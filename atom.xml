<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Bèr ‘berkes’ Kessels</title>
 <link href="http://berk.es/atom.xml" rel="self"/>
 <link href="http://berk.es"/>
 <updated>2013-07-31T12:30:49+02:00</updated>
 <id>http://berk.es</id>
 <author>
   <name>Bèr ‘berkes’ Kessels</name>
   <email>ber@berk.es</email>
 </author>

 
 <entry>
   <title>So, I am starting as Ruby Developer at Savvii</title>
   <link href="http://berk.es/2013/07/31/starting-as-ruby-developer-at-savvii"/>
   <updated>2013-07-31T00:00:00+02:00</updated>
   <id>http://berk.es/2013/07/31/starting-as-ruby-developer-at-savvii</id>
   <content type="html">&lt;p&gt;Monday (5th of Juli) I am starting at the startup &lt;a href=&quot;http://savvii.nl&quot;&gt;Savvii&lt;/a&gt;. To
be part of the team that wants to bring you the very best WordPress
hosting in the Netherlands.&lt;/p&gt;

&lt;p&gt;I am going to develop the software for the back end: program the robots that
do all the magic behind-the-scenes work.&lt;/p&gt;

&lt;p&gt;Because I am a Ruby-developer, I'll do this in Ruby. We
needs some technical things like long-running threads and asynchronous
workers and stuff, which makes Ruby (and Rails) one of the best
candidates. I'll be blogging more about the technical stuff on our yet-to-go-online blog. And probably here too.&lt;/p&gt;

&lt;p&gt;WordPress, for those who are not too much into this stuff, is the most used, of &lt;a href=&quot;http://trends.builtwith.com/cms&quot;&gt;the
three most popular CMSes&lt;/a&gt;. It is the
software &lt;a href=&quot;http://en.wordpress.com/notable-users/&quot;&gt;behind many famous and popular
websites&lt;/a&gt; and is commonly known
as a Blogging-system, rather then a generic CMS.&lt;/p&gt;

&lt;h2&gt;WAT!? You be doing WordPress-development?&lt;/h2&gt;

&lt;p&gt;Probably a little, but my task is
to get the back end-software running, which is building stuff like CRMs, billing gateways, provisioning APIs and whatnot.
My &lt;a href=&quot;https://twitter.com/fuegas&quot;&gt;fellow-programmer&lt;/a&gt; is the main PHP-and WordPress-developer. But I will certainly dive into WordPress now
and again to make it play nicely with all the Ruby back ends.&lt;/p&gt;

&lt;h2&gt;But didn't you say you hate WordPress, Drupal and all that other PHP-stuff?&lt;/h2&gt;

&lt;p&gt;Nope. Apparently a lot of people seem to think that I am &quot;against&quot;
Drupal, WordPress or even PHP in general. On contrary: I like them a
lot. And very often advise people to use this software for their
websites.&lt;/p&gt;

&lt;p&gt;I merely think that such CMSes have their place and cases, but are often abused
in cases (and projects) where they fit poorly: the right tool for the
job. Apparently many people read that as &quot;haters gonna hate&quot;. I don't.
Hate.&lt;/p&gt;

&lt;h2&gt;What about your own company?&lt;/h2&gt;

&lt;p&gt;I'll be putting my all my focus on Savvii, on making it
a great hoster. But I expect to go back to some small side-projects once we are
moving. Not sure how it will combine, but time will learn.
&lt;a href=&quot;http://berk.es/about.html&quot;&gt;Berk.es&lt;/a&gt; will continue to exist, albeit
dormant for a while.&lt;/p&gt;

&lt;h2&gt;Savvii? WordPress hoster?&lt;/h2&gt;

&lt;p&gt;We are just starting, so all the details are still unclear.
But in short, translated from &lt;a href=&quot;http://savvii.nl&quot;&gt;the placeholder
website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Savvii is the new managed WordPress platform for the Netherlands.
That means speed (caching, CDNs, tweaks), security (scans, free fixes,
automatic updates) and service!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Savvii is part of the family of companies around &lt;a href=&quot;http://www.blixem.nl&quot;&gt;bliXem
internet&lt;/a&gt;, which is where I'll be working. Yes,
that is Nijmegen, so I can go to work on my bike.&lt;/p&gt;

&lt;p&gt;I am really grateful to become part of such a good team and to be able
to get the opportunity to help such a promising startup going!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Over de anonimiteit van Bitcoin</title>
   <link href="http://berk.es/2013/05/23/over-de-anonimiteit-van-bitcoin"/>
   <updated>2013-05-23T00:00:00+02:00</updated>
   <id>http://berk.es/2013/05/23/over-de-anonimiteit-van-bitcoin</id>
   <content type="html">&lt;p&gt;Het bedrijf dat in Nederland pintransacties verwerkt, &lt;em&gt;Equence&lt;/em&gt;,
&lt;a href=&quot;http://nos.nl/artikel/510009-banken-verkopen-pingedrag-klanten.html&quot;&gt;kondigde aan om ons pingedrag te verkopen&lt;/a&gt; aan geïnterresseerde
marketeers en bedrijven. Ze beweren dat deze transacties anoniem zijn.
Dat is onzin, pintransacties (Of iDeal, creditcard, Paypal of eender
welke digitale transactie) kán eenvoudigweg niet anoniem zijn; je
rekeningnummer is immers direct gekoppeld aan je, geïdentificeerde,
persoon. Ooit een bankrekening proberen te openen op naam van Jelle Snikkelsma, Kerkstraat 14 te Grashuizen?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;, hoor je vaak, &lt;strong&gt;is wél anoniem&lt;/strong&gt;. Bitcoin-betalingen, zijn,
inderdaad, niet tot een persoon terug te herleiden als je dat niet wilt. Vrijwel
vergelijkbaar met betalen met contant geld. Als ik jou een briefje van vijf euro geef en
daarna mijn hele levensverhaal vertel, is de betaling niet anoniem.
Maar als ik je vijf euro per post opstuur, dan is (bijna) niet te
achterhalen dat dit van mij afkomt.&lt;/p&gt;

&lt;p&gt;Deze anonimiteit bij bitcoin is vrij uitzonderlijk
voor een digitaal systeem. Wanneer je dan bedenkt dat Bitcoin in feite
een enorm, publiek kasboek is, waarin iedere transactie wordt
weggeschreven, klinkt dit al helemaal vreemd.&lt;/p&gt;

&lt;p&gt;Bitcoin werkt namelijk met pseudoniemen. Cryptografische pseudoniemen;
je rekening is niet meer dan een public en private keypair, je
&lt;em&gt;portemonee&lt;/em&gt;. En bitcoin werkt daarom niet met registratie:
iedereen die een public en private (geheime) keypair kan aanmaken, heeft onmiddellijk een werkende bitcoin-rekening.
In analogie
met een bankrekening zou dat zijn: iedereen die een uniek bankrekeningnummer en
bijbehorende pincode kan verzinnen en die kan onthouden, heeft een
bankrekening; zonder dat het banksysteem daar ooit vanaf hoeft te weten.
De cryptografie garandeert dat enkel jijzelf toegang hebt tot die
bankrekening (dat de pincode precies de goede is om geld mee van de rekening over te maken). En zorgt ervoor dat er nooit (in de praktische zin van &quot;nooit&quot;: niet in
theoretische) twee mensen dezelfde bankrekening verzinnen.&lt;/p&gt;

&lt;p&gt;De portemonnee, en dan met name je public-key, moet echter niet naar jou
te herleiden zijn. Je moet, in de praktijk, dus niet je publieke sleutel versturen vanaf
een IP-adres wat naar jou persoon terugleidt. En dat versturen ervan, doe
je bij iedere transactie.  En daarbij kun je heel eenvoudig een (of meer) nieuwe portemonnee aanmaken en
al je geld daarheen overmaken. Als jij je pseudoniem geheim wilt houden
kan dat. En is die rekening verder op geen enkele manier te herleiden
tot jou.&lt;/p&gt;

&lt;p&gt;Daarbij heeft je portemonnee oneindig veel bankrekeningnummers, &lt;em&gt;Bitcoin
addresses&lt;/em&gt; genoemd, waarmee je geld naar je portemonnee kunt overmaken. En
van waaraf je geld kunt overmaken. In de praktijk zul je dus voor iedere
transactie een nieuw, wegwerp-adres aanmaken. Dus zelfs als één zo'n
adres wel terug naar jou te herleiden is (omdat je bijvoorbeeld een boek
bestelde en dat thuis laat bezorgen), dan nóg staat een volgende betaling
daar vrijwel los van. Wanneer dus de éne betaling die je binnenkrijgt voor
een factuur is waar je met naam en toenaam op genoemd staat, is alléén
dat adres naar jou terug te leiden en niet te koppelen aan alle andere
betalingen die je ontvangt.&lt;/p&gt;

&lt;p&gt;Ook hier hangt het dus vooral af van hoeveel privacy je wílt; maar je
hebt, in tegenstelling tot dat bankpasje in je broekzak, tenminste de
mógelijkheid om je identiteit verborgen te houden bij bestellingen,
betalingen en zelfs bij het ontvangen van geld.&lt;/p&gt;

&lt;p&gt;Dát beste mijnheer Rietveld van Equens, is privacy. Het verkopen van
cijfers aan Ohra, over hoe vaak een groepje rekeninghouders op Station
Utrecht een blikje Grolsch koopt (en de volgende ochtend op Station
Nijmegen bij de DA een pakje Aspirine), is dat niet!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoins kopen? Weet wat je doet.</title>
   <link href="http://berk.es/2013/04/01/bitcoins-kopen-weet-wat-je-doet"/>
   <updated>2013-04-01T00:00:00+02:00</updated>
   <id>http://berk.es/2013/04/01/bitcoins-kopen-weet-wat-je-doet</id>
   <content type="html">&lt;p&gt;Afgelopen dagen heb ik aardig wat vragen over Bitcoin beantwoord. Daarom
een algemene samenvatting. In de vorm van een waarschuwing.&lt;/p&gt;

&lt;p&gt;Bitcoin is overal in het nieuws. &lt;a href=&quot;http://bitcoincharts.com/charts/mtgoxUSD#rg90ztgSzm1g10zm2g25zv&quot;&gt;BBC&lt;/a&gt;, &lt;a href=&quot;http://www.foxnews.com/tech/2013/03/29/digital-currency-bitcoin-surpasses-20-national-currencies-in-value/&quot;&gt;Fox&lt;/a&gt; en vandaag ook het
&lt;a href=&quot;http://nos.nl/artikel/490896-vijf-vragen-over-bitcoins.html&quot;&gt;NOS achtuurjournaal&lt;/a&gt;. De reden is de &lt;a href=&quot;http://bitcoincharts.com/charts/mtgoxUSD#rg90ztgSzm1g10zm2g25zv&quot;&gt;enorme wisselkoersstijging&lt;/a&gt;. Vanmiddag ging de prijs van 1 Bitcoin door de $100-grens: je betaalt dus $100 voor één Bitcoin. Begin dit jaar was dat nog minder dan $20.&lt;/p&gt;

&lt;p&gt;Laat vooropstaan dat ik Bitcoin een geweldige toekomst toedicht. Ik
geloof erin; doe dat al &lt;a href=&quot;http://berk.es/2011/05/29/bitcoins-de-revolutionaire-valuta-met-een-potentie-voor-de-teloorgang-van-ons-banksysteem/&quot;&gt;bijna twee jaar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Opeens wil iedereen Bitcoin. Hieronder drie redenen waarom je dat nu
misschien beter niet kunt doen. Of helemaal beter niet kunt doen.&lt;/p&gt;

&lt;h2&gt;Garanties, veiligheid en kennis vereist.&lt;/h2&gt;

&lt;p&gt;Bitcoin is decentraal, dus niemand is verantwoordelijk voor jou geld.
Bitcoin heeft wel waarde en bedrijven en zelfs banken waar je jou
Bitcoins kunt onderbrengen.&lt;/p&gt;

&lt;p&gt;Maar de meesten zullen hun spaarpot gewoon op hun computer zetten. Als
je al moeite hebt met virusscanners, wachtwoorden onthouden of je
hardeschijf te versleutelen is dit eenvoudigweg geen optie. Ja die éne
Bitcoin kun je best op je Android-telefoon bewaren. Maar die paarduizend
euro niet. De kans is vrij groot dat iemand ze gaat stelen. En dan is er
geen grote bank die garant staat of zelfs maar moeite doet om jou te
beschermen.&lt;/p&gt;

&lt;p&gt;Je kunt je Bitcoin bij een van de vele online banken hiervoor
onderbrengen, maar de kans dat zo'n bank beroofd wordt is ook reëel en
dan is het onzeker of je het geld nog terugkrijgt. Meestal niet.&lt;/p&gt;

&lt;p&gt;Weet waar je mee bezig bent, of huur hiervoor iemand in. Blijf er anders
beter van weg.&lt;/p&gt;

&lt;h2&gt;Gelovers, gebruikers en handelaren&lt;/h2&gt;

&lt;p&gt;In de Bitcoin-economie worden aardig wat bedrijven opgezet, accepteren
steeds meer handelaren het als betaalmiddel, en gaat er &lt;a href=&quot;https://blockchain.info/nl/charts/n-transactions&quot;&gt;daadwerkelijk
heel veel geld rond&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maar er zijn ook heel veel daghandelaren. Dat zijn veel mensen die
helemaal niet (persé) in het systeem geloven, maar enkel afkomen op de
enorme koersstijgingen. Deze mensen leveren maar een kleine bijdrage aan
de échte waarde van deze munt. Die waarde wordt namelijk vooral bepaald
door wat je ermee kunt kopen. Vandaar dat alle ondernemers die Bitcoin
aannemen, of die diensten rondom Bitcoin ontwikkelen, veel meer waarde
in de economie stoppen.&lt;/p&gt;

&lt;p&gt;Hoe minder mensen zulke waarde in het systeem stoppen, hoe instabieler
de economie. Als je dus alleen van plan bent om snel rijk te worden en
die rijkdom direct in Euro's wilt omzetten, mag dat natuurlijk. Maar als
teveel mensen op deze manier in Bitcoin zitten, zakt alles natuurlijk
ook gewoon weer in.&lt;/p&gt;

&lt;p&gt;Stap er dus ófwel voor heel korte tijd in, maar weet dat je dan veel
verstand moet hebben van valutahandel en daghandel. Als leek heeft het
enkel zin om met Bitcoin aan de slag te gaan voor lange termijn. En dan
kun je beter even afwachten tot wat duidelijker is of deze huidige koers
een bubbel is (veel te hoog, dus) of dat het weer aan het stabiliseren
is. Anders beleg je spaarcentjes voor een veel te hoge koers.&lt;/p&gt;

&lt;p&gt;Persoonlijk geloof ik dat Bitcoin (of een Bitcoin-achtige) over een
paar, vier, vijf, jaar nog véél en véél groter is, lange-termijn dus.&lt;/p&gt;

&lt;h2&gt;De prijs is (veel te) hoog.&lt;/h2&gt;

&lt;p&gt;Althans, dat zeggen de meesten die wél verstand van economie hebben in
de Bitcoin-community. Ik praat die lui hier enkel na. De reële waarde
ligt eerder onder de $20 per Bitcoin, zeker niet $100.&lt;/p&gt;

&lt;p&gt;Momenteel is de prijs vooral zo hoog, door de enorme vraag. Die vraag
komt weer door de plotselinge zichtbaarheid in alle media.&lt;/p&gt;

&lt;p&gt;Er is dus een enorm grote kans op een harde waardedaling in de komende
weken. Dat zeg ik, nogmaals, als leek in economische wetenschappen.
Maar die kans is groot, doordat er relatief (te) veel daghandelaren in
de economie zitten (ten opzichte van mensen die reële waarde in de vorm
van goederen en diensten) aanbieden. En omdat deze grote groep
anticipeert op een koersstijging. Noem ze de &quot;opportunisten&quot;.
Bij de minste of geringste daling zullen deze mensen eruit stappen. Omdat
ze enerzijds niet in de lange termijn geloven (of er geheel niet in
geloven) en anderzijds enkel erin gestapt zijn voor een waardestijging.
Stappen al deze mensen eruit, dan corrigeert de waarde terug naar de
reële waarde. Wat die waarde precies is, weet niemand. Maar kijk je
naar &lt;a href=&quot;http://bitcoincharts.com/charts/mtgoxUSD#rg360ztgSzm1g10zm2g25zvzl&quot;&gt;wat langetermijngrafieken&lt;/a&gt;,
dan is te zien dat de waarde van midden september tot eind januari,
rond de $14 lag en nauwelijks schommelde.&lt;/p&gt;

&lt;p&gt;Kenners en experts waarschuwen voor een te hoge prijs. De kans is,
volgens hen, op dit moment groot dat de waarde in de komende weken weer
gaat dalen. Neem dit risico mee in je overweging.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Please, Ruby devs, join() your paths</title>
   <link href="http://berk.es/2013/03/21/please-ruby-devs-join-your-paths"/>
   <updated>2013-03-21T00:00:00+01:00</updated>
   <id>http://berk.es/2013/03/21/please-ruby-devs-join-your-paths</id>
   <content type="html">&lt;p&gt;Like in most programming languages, when you write paths in ruby, e.g. to open a file you pass in a string:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar.txt&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/foo/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is a serious smell for several reasons. Not, as people often
believe, just to cater the few Ruby developers on Windows (Windows knows how to follow
&quot;/foo/bar/&quot; paths just as well as &quot;\foo\bar&quot; nowadays).&lt;/p&gt;

&lt;p&gt;But mostly because this does not scale, gets convoluted real quick. Like
so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;config/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/../&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/environment.rb&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ./../config//environment.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Ruby offers a great &lt;a href=&quot;http://apidock.com/ruby/File/join/class?q=file.join&quot;&gt;&lt;code&gt;File.join()&lt;/code&gt;&lt;/a&gt; class method, for this. This simply uses the &lt;code&gt;File::SEPARATOR&lt;/code&gt; to join a string.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;config/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;environment.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ./../config/environment.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As you may notice, double slashes are eliminated.&lt;/p&gt;

&lt;p&gt;Also, you can inherit this behaviour from &lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/libdoc/pathname/rdoc/Pathname.html&quot;&gt;&lt;code&gt;Pathname&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;Rails.root&lt;/code&gt; does.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;config/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;environment.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; /path/to/rails/project/config/environment.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Rolling your own, is very beneficial, and simple too.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyConfig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dir&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;etc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;myapp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;templates&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;example.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;/etc/myapp/templates/example.html&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There really is no reason to fiddle with strings, concatenate slashes
and whatnot, to build paths. Join is so much easier, more powerfull and
above all, cleaner and more portable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal Imagecache security vulnarability with DDOS attack explained</title>
   <link href="http://berk.es/2013/03/04/drupal-imagecache-security-vulnarability-with-ddos-attack-explained"/>
   <updated>2013-03-04T00:00:00+01:00</updated>
   <id>http://berk.es/2013/03/04/drupal-imagecache-security-vulnarability-with-ddos-attack-explained</id>
   <content type="html">&lt;p&gt;Nearly a year ago, long before I decided to move out of &lt;a href=&quot;http://berk.es/2012/10/01/farewell-drupal/&quot;&gt;Drupalwork
entirely&lt;/a&gt;, I reported a security vulnarability in Drupal 7 core
in imagecache. Since imagecache is used on most Drupal6 instances this
problem occurs there too. I had the draft for this poste, tucked away on
an offline disk (security-details should not live &quot;online&quot; or in &quot;the
cloud&quot;, ever); and, obviously, the day I arrive in Thailand for a
vacation, Drupal released the CVE.&lt;/p&gt;

&lt;p&gt;I made a proof of concept, and a tool to test it. A screencast explaining the issue is found below:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/JP7Q4co0shk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;The issue itself is really simple, the solution is hard; because
Imagecache was designed &quot;wrong&quot; in the first place. Let me explain.&lt;/p&gt;

&lt;p&gt;You have really basic Drupal7-site on http://example.com, with content-type story that has an image-field. Using three
imagecache-styles: &quot;medium&quot;, &quot;large&quot; and &quot;thumbnail&quot;.&lt;/p&gt;

&lt;p&gt;Imagecache works by creating new images from an original, on demand,
when a particular url is requested:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;img src=&quot;http://example.com/sites/default/files/styles/medium/public/field/image/news.jpg&quot; /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dissecting that url, we see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://example.com/sites/default/files/ is where uploaded files are
stored. This can also be something like http://acme.com/sites/acme-is-evil.org/files/ in case of multisite.&lt;/li&gt;
&lt;li&gt;/styles/ is the directory where imageges are cahed under.&lt;/li&gt;
&lt;li&gt;/medium/ is the style applied to this image&lt;/li&gt;
&lt;li&gt;/public/ the &quot;driver&quot;, usually either &quot;private&quot; or &quot;public&quot;.&lt;/li&gt;
&lt;li&gt;/field/image/news.jpg where the image is stored. The original can
therefore be found at http://example.com/sites/default/files/field/image/news.jpg&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In this case, a &lt;em&gt;derivative&lt;/em&gt; called &lt;em&gt;medium&lt;/em&gt; is created. Because creating images
is heavy, they are stored on disk, so a next time, the webserver can
serve this image right-away.&lt;/p&gt;

&lt;p&gt;Let me repeat that: Because &lt;em&gt;creating images is heavy&lt;/em&gt;, they are &lt;em&gt;stored
on disk&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea is as simple as it is wrong: The first time (when the image is created) a full Drupal is booted up,
that Drupal-instance applies the various image-manipulations you have configured
for that style, and then serves and saves the image.&lt;/p&gt;

&lt;p&gt;&quot;But why is that Wrong?&quot;, you ask?&lt;/p&gt;

&lt;p&gt;Because you never know when the &lt;em&gt;heavy stuff&lt;/em&gt; will be invoked. It is
unpredictable.&lt;/p&gt;

&lt;p&gt;And because the &lt;em&gt;heavy stuff&lt;/em&gt; is initialized by your visitors. People from
the evil, outside world. They can fire up your image-creating just by
visiting urls.&lt;/p&gt;

&lt;h2&gt;DDOS&lt;/h2&gt;

&lt;p&gt;This is a typical DDOS vector: making a server do heavy stuff by
throwing something at it from outside. Typically in an orchestrated
attack that involves many people from many places throwing stuff at it.&lt;/p&gt;

&lt;h2&gt;The actual issues: mixing images and styles&lt;/h2&gt;

&lt;p&gt;Everything above is not a large problem, because 90%, or more, of the
images used in img-tags on your site, are already created and cached on
disk. An attacker will need to find the last 10% and request these urls.
This is limited.&lt;/p&gt;

&lt;p&gt;But, there are more, far more, possible images then those you use in the
img-tags.&lt;/p&gt;

&lt;p&gt;We have two images. A frontpage-banner and a user-avatar. They are
&lt;em&gt;usually&lt;/em&gt; used with two imagecache styles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://example.com/sites/default/files/styles/avatar-thumb/public/users/123.jpg
http://example.com/sites/default/files/styles/front-banner/public/field/image/fancy_banner.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could just swap the styles and create a front-banner from the user-avatar,
and an avatar from the banner, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://example.com/sites/default/files/styles/front-banner/public/users/user_123.jpg
http://example.com/sites/default/files/styles/avatar-thumb/public/field/image/fancy_banner.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And what is worse, you can pull any image in your &lt;em&gt;files&lt;/em&gt; directory through imagecache. Including that huge 7MB hi-res upload you forgot there. And if you consider the fact the tool imagemagick (often used as engine to convert the images) can actually handle pdfs, html and many other files you probaly have lying around in your &lt;em&gt;files&lt;/em&gt; directory, you know how much your system can be hurt.&lt;/p&gt;

&lt;p&gt;This all gets worse with the size of the images that can be abused and
the heavyness of the imagecache-styles you have defined. Adding
watermarks, smartcropping, overlays, rounded corners and whatnot make
the generation of a derivative much heavier then merely resizing an image.&lt;/p&gt;

&lt;h2&gt;The other issue: recursiveness&lt;/h2&gt;

&lt;p&gt;When we look above, we can see that imagecache will gladly pick up any
file, pull it trough the image-profiles you have defined, using the toolkits at hand and then &lt;em&gt;write out a file to disk&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Guess where? Yup, in the &lt;em&gt;files&lt;/em&gt; directory. Adding another file that can
be pulled trough imagecache. So, you can imagecache-already-imagecached
files. [insert inception jokes here].&lt;/p&gt;

&lt;p&gt;This is where the attackers have the opportunity to fill up your
servers' harddrive. By simply generating image-styles by mixing up
images and styles, you can create a huge amount of unexpected images.
You them pull these trough imagecache again, to duplicate that huge
amount. And again. And again. Untill urls grow so large that the
webserver refuses them. Apache's limit lies around 4000 characters.&lt;/p&gt;

&lt;p&gt;A site with only one, 0.1MB image image and two styles can gain several thousand
directories, nearly fivehundred copies of imagecache derivatives making
a total of ~50MB of new images. All an attacker needs to do, is send 500
HEAD requests to your server, doable in a fraction of a second.&lt;/p&gt;

&lt;p&gt;A site with thousands of images and five imagecache styles will get
terabytes of new images in mere minutes. Obviously depending on the
speed of the server and how many (HEAD) requests the server allows simultaniously.
Or in days. Doing only a few-hundred requests each day, yet filling up
your disk slowly but surely, after which your average server will either
start crashing, or your hoster will send you large bills for extra
storage and so on.&lt;/p&gt;

&lt;p&gt;Also note that one does not need to download the to-be-generated file. Just requesting it,
with a HEAD is enough.&lt;/p&gt;

&lt;h2&gt;The proof of concept tool&lt;/h2&gt;

&lt;p&gt;Find it &lt;a href=&quot;https://github.com/berkes/canhaz&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that the tool is made for investigative use only; but be
aware that others might not heed this notice and either build such a
tool themselves (it is really simple) or use it to bring down your site.&lt;/p&gt;

&lt;p&gt;Because of this, I chose to cripple it a little. The tool cannot detect wether you have applied the
security patch or not, or if you have different measures in place.
Because of this, I have removed the crawling and parrallel part too, limiting it to
images and imagecache-styles found on the page you insert manually.&lt;/p&gt;

&lt;p&gt;The tool was made to investigate when and how a system would crash or
choke using these attacks. Please investigate and learn about the CMS
and the modules you are you are using.&lt;/p&gt;

&lt;p&gt;Prepare your system for Ruby.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ruby rubygems #OSX and most Linuxes already have these
$ sudo gem install bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone the tool and install the dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/berkes/canhaz.git
$ cd canhaz
$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./canhaz # Shows all tasks
$ canhaz hit http://example.com 20 # generates max 20 imagecache
                                   # derivatives, by investigating
                                   # example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;Don't do on-demand generation of things that require heavy work. In this
case, derivatives needed for a user-avatar should be created when a user
uploads that avatar. Even better is to let a &lt;a href=&quot;http://en.wikipedia.org/wiki/Thread_pool_pattern&quot;&gt;worker queue&lt;/a&gt; deal with the actual generation, that way dedicated machines can deal with the heavy lifting,
and users don't have to wait in front of a loading page while you are
making images. For PHP the standard tool
&lt;a href=&quot;http://www.php.net/manual/en/book.gearman.php&quot;&gt;Gearman&lt;/a&gt;, has worked
well for me; just don't expect it to be like resqueue, sidekiq or pythons RQ (yet).&lt;/p&gt;

&lt;p&gt;Magic &quot;handyness&quot; like allowing any image to be &quot;imagecached&quot; is
usefull in development, but not in production. So, on your development
environment, you may want imagecached images to be generated on the fly (and probably not
cached, damn you, drush cc-all), you certainly don't want this
flexibility on a production server. You probably want to call some build
task while deploying to re-generated all your images there. Once. Before
deploying.&lt;/p&gt;

&lt;p&gt;And for Drupal8: get rid of imagecache and implement a much simpler
on-submit image-builder. It should create the derivatives for when
a File is created and passes validations. This not only solves any such &quot;unpredictable load&quot;
issues, it allows for much easier CDNs, static-file-servers, caching and
more. The on-demand architecture has too much downsides to warrant the
only upside: flexibility.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tagadelic: TDD, OOP and seeking maintainer</title>
   <link href="http://berk.es/2013/02/10/tagadelic-tdd-oop-and-seeking-maintainer"/>
   <updated>2013-02-10T00:00:00+01:00</updated>
   <id>http://berk.es/2013/02/10/tagadelic-tdd-oop-and-seeking-maintainer</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: &lt;a href=&quot;http://drupal.org/project/tagadelic&quot;&gt;Tagadelic&lt;/a&gt; is close to a Drupal 7 release, with an easy upgrade
path to Drupal 8. It is completely rewritten, Object Oriented and Test
Driven. Since I don't do any Drupal anymore, I am looking for someone who can maintain
a clean, OOP and TDD-module, to take it over from me.&lt;/p&gt;

&lt;p&gt;There is just so much you can do when porting an age-old module again
and again. Tagadelic has been around since mid-2005, has been ported
over and over again. Mind you: not upgraded but ported. Quick, dirty and
&quot;works-for-me&quot; ports. Like most other modules, actually. There never was
a stable release for Drupal7, because the module never was really stable
in the first place. Yes, it might work (for you), but that is far from
&lt;em&gt;stable&lt;/em&gt; and releasable.&lt;/p&gt;

&lt;p&gt;Between 2005 and now, I learned programming properly. I mean, OOP,
unit-testing, patterns and all that (This also lead to me, &lt;a href=&quot;http://berk.es/2012/10/01/farewell-drupal/&quot;&gt;abandoning all
my Drupal work, mostly&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;None of my publicly released Drupal-modules ever
resembled that progress I made; mainly because Drupal itself is not OOP. Has poor
testing abilities (please read on, I will explain later) and applies
quite a few anti-patterns. This makes writing really clean and pretty code,
somewhat discouraging. Most of its examples, best practices and defaults
go straight against what is in general considered best practice.&lt;/p&gt;

&lt;p&gt;But since Tagadelic is used by a lot of people, I wanted to create a
&lt;em&gt;proper&lt;/em&gt; replacement. A module with pretty code, easy to implement APIs
and some additional, turnkey modules for those who cannot or will not write these
few lines of PHP. A module that resembles what I now consider good code
and properly developed. As a replacement for what I thought proper 8
years ago.&lt;/p&gt;

&lt;p&gt;I coded for several months and today released the first alpha.&lt;/p&gt;

&lt;p&gt;In the long run, I can conclude three things:&lt;/p&gt;

&lt;p&gt;Drupal is not really ready for OOP development. The interfacing between my module and Drupal
required me to write wrappers (so that Tagadelic classes access
Drupal-functions in an OOP-manner) and to write the modules themselves
with global functions, since that is how Drupal expects the hooks and
implementations.&lt;/p&gt;

&lt;p&gt;DrupalWebTest is way, way too slow and feature-poor for Test Driven
Development (TDD). Tagadelic only has about 150 DrupalWebTests, but running
them all takes over 5 minutes (on my machine: quad-core Intel 2.67GHz, SSD drives
only). Note that in a typical Rails (being -rightfully- known for being very
slow) with cucumber suite of over 600 tests takes under 30 seconds;
that includes selenium opening Firefox and clicking around in a few
tests. 30 seconds is considered unacceptably slow there.&lt;/p&gt;

&lt;p&gt;When developing test-driven (or Behaviour Driven) you typically
run the isolated tests five, six times. And the entire suite of tests at
least once. So aside from the actual coding, the testing alone takes 30
minutes. This is both discouraging (meh, I'll just assume everything is
still green, will test in next iteration) and very hard for your &quot;flow&quot;
and concentration.
It is feature-poor in a sense that I ended up writing most assertions
and several set-up functions myself. assertXpath()? Nope. assertHasId()?
Nope. assertIdenticalArrays()? Nope. And worse is that it breaks a very
important rule for testing: isolation. If you want to test whether some
admin-setting can be saved and creates the proper variable, you are also
testing whether a Drupal is installed properly, user can log in, is admin,
can access a page, has nodes, has access to creating these nodes and so
on. I ended up poking into the database (not even &quot;my&quot; tables) because
somewhere in the clutter of setup-tasks stuff was created but it failed.&lt;/p&gt;

&lt;p&gt;It is really fun to write unit-tests with &lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/&quot;&gt;phpUnit&lt;/a&gt;. I was very much
positively impressed by that test-environment and by using it. The
biggest adventure was how to stub out Drupal. Drupal, using global
functions for stuff like &lt;code&gt;check_plain()&lt;/code&gt; is nearly impossible to mock
and stub. I solved this by extending my &lt;a href=&quot;https://github.com/berkes/tagadelic/blob/7.x-2.x/tests/TagadelicCloudTest.php#L106&quot;&gt;DrupalWrapper&lt;/a&gt; and
stubbing that. After all: I don't care whether &lt;code&gt;check_plain()&lt;/code&gt; itself
works and clears out XSS, I only care whether or not my classes call
that function in proper places to ensure clean output. Testing whether
&lt;code&gt;check_plain()&lt;/code&gt; works is not my concern, here. I chose phpUnit over
DrupalUnit, because the latter is pretty much &lt;a href=&quot;http://stackoverflow.com/questions/6045241/unit-testing-drupal-with-drupalunittestcase-fails-on-database-setup/6046100#6046100&quot;&gt;unusable for
unit-testing of arbitrary classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And now it is time for someone, or several someones to slowly take over the module. Together
we will release a Drupal7 2.0 version and then I can carry over all
project rights on my last Drupalproject.&lt;/p&gt;

&lt;p&gt;Interested? You should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiar with PHP OOP development. You should probably feel that the
usual way of Developing Drupal modules in a none-OOP manner is not
a very good way.&lt;/li&gt;
&lt;li&gt;Familiar with PHPunit and Drupal Tests. You should feel strongly for
TDD and good test-coverage. You should probably feel that even though
writing Drupal Web Tests is not (yet) perfect and requires time and
effort, it always should happen.&lt;/li&gt;
&lt;li&gt;Able to maintain such a module for a substantial time. It being TDD
and all, means that it won't take you a lot of effort or time. But it
would be a shame if three months after a release you abandon it
altogether because you like Node.js better. Or so.&lt;/li&gt;
&lt;li&gt;Wanting to develop on Github. At least until the 2.0 release.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Testing colored output with Cucumber</title>
   <link href="http://berk.es/2013/02/04/testing-colored-output-with-cucumber"/>
   <updated>2013-02-04T00:00:00+01:00</updated>
   <id>http://berk.es/2013/02/04/testing-colored-output-with-cucumber</id>
   <content type="html">&lt;p&gt;I am improving a Command line app to &lt;a href=&quot;https://github.com/berkes/todotxt&quot;&gt;manage my todos&lt;/a&gt;. I am developing it entirely 'Behaviour Driven', using &lt;a href=&quot;https://github.com/cucumber/aruba&quot;&gt;Cucumber and Aruba&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All is pretty straightforward, but I had a hard time testing the colors in
the output. Colors are made with
&lt;a href=&quot;http://rubydoc.info/gems/rainbow/1.1.4/frames&quot;&gt;Rainbow&lt;/a&gt;; which is
really neat, but sometimes a little too smart. Rainbow detects when it
outputs to something that cannot handle colors and turns them off. The
solution turned out to be really simple though.&lt;/p&gt;

&lt;p&gt;Lets start with a simple script that outputs some Rastafari&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;thor&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rainbow&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;example&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;an example task&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Yah!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bright&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rasta-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fari&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Running this, results in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/inline/rasta_cli.png&quot; alt=&quot;Example output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But piping this into a file, or for example less, shows no colors;
This is a useful feature built into Rainbow.
When testing with cucumber, the colors are gone too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cucumber&quot;&gt;&lt;span class=&quot;k&quot;&gt;Feature:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Example&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Yah!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I run `example example`&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it should pass with:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      Yah!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      ...&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This passes, but does not test any colors. First thing is to tell
Aruba/Cucumber to not strip the colors, ansi-codes, with an &lt;code&gt;@ansi&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Next thing is to tell Rainbow to output colors regardless of where it
outputs to. We need to do do this in the application itself, by making
the application a little more testable. However, Aruba strips the colors
for a reason: it is really hard to test when all your output is littered
with ANSI escape codes. You really only want to force Rainbow to output
them when you are testing for colors.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thor&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;Sickill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Rainbow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;FORCE_COLORS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;TRUE&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#....&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This allows you to force coloring when testing or running by setting the
variable, like so &lt;code&gt;export FORCE_COLORS=TRUE; ./bin/example example&lt;/code&gt;. A step could
them look like &quot;When I run &lt;code&gt;export FORCE_COLORS=TRUE; ./bin/example example&lt;/code&gt;&quot;.&lt;/p&gt;

&lt;p&gt;More usefull however, is that we can set this variable in cucumber for
all the &lt;code&gt;@ansi&lt;/code&gt;-tagged scenario's. In a support-file
&lt;code&gt;features/support/ansi.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;@ansi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;FORCE_COLORS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;TRUE&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With the scenario tagged @ansi, it fails: &lt;code&gt;expected
&quot;\e[31mYah!\e[0m\n\e[30m\e[1m...\e[0m\n\e[33mRasta-\e[0m\n\e[32mfari\e[0m\n&quot;
to include &quot;Yah! ...&lt;/code&gt;. Good.&lt;/p&gt;

&lt;p&gt;Testing against strings like &quot;\e[31m&quot;, however, is both error-prone and
unreadable. A simple new step definition, in which we add the
ansi-escape codes, using Rainbow, to the to-be-tested string. Which allows us to test colors really
easy.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;features/support/ansi.rb&lt;/code&gt; should include &quot;rainbow&quot;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^it should output &amp;quot;([^&amp;quot;]*)&amp;quot; in &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_partial_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cucumber&quot;&gt;&lt;span class=&quot;k&quot;&gt;Feature:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Example&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;  @ansi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Yah!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I run `example example`&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it should output &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Yah!&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot; in &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Readable, easy testing of your colored output!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Make cucumber open the browser with the current page</title>
   <link href="http://berk.es/2013/01/08/make-cucumber-open-the-browser-with-the-current-page"/>
   <updated>2013-01-08T00:00:00+01:00</updated>
   <id>http://berk.es/2013/01/08/make-cucumber-open-the-browser-with-the-current-page</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://pragprog.com/book/hwcuc/the-cucumber-book&quot;&gt;The Cucumber Book&lt;/a&gt;
describes a really nifty trick when testing web-pages: open the browser
when a step fails. This is a feature provided by cucumber itself.&lt;/p&gt;

&lt;p&gt;Add a support file &lt;code&gt;features/support/debugging.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save_and_open_page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And add &lt;a href=&quot;https://github.com/copiousfreetime/launchy&quot;&gt;launchy&lt;/a&gt; to your gemfile, and &lt;code&gt;bundle install&lt;/code&gt;. (or install it with whatever else
you use).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;launchy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~&amp;gt; 2.1.2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will save the page that cucumber is looking at, then open it in
your browser. Works fine, untill you have a large suite of features and
some refactoring breaks many features. Having to close twenty tabs in
your browser after each run is counterproductive and often really
frustrating.&lt;/p&gt;

&lt;p&gt;I solved this with a flag that allows me to fire this debugging-trick
only when I need it.
When I have a failing scenario, and I want to investigate it by
inspecting the page, I run my cucumber with an additional
environment-variable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cucumber &lt;span class=&quot;nv&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save_and_open_page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed?&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;debug=&lt;/code&gt; syntax allows for more simple tricks too. Like &lt;code&gt;debug=pp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pp&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save_and_open_page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed?&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pp&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Simple trick, works like a charm.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Developing a tiny ecommerce site using microframework Slim</title>
   <link href="http://berk.es/2012/11/19/developing-a-tiny-ecommerce-site-using-microframework-slim"/>
   <updated>2012-11-19T00:00:00+01:00</updated>
   <id>http://berk.es/2012/11/19/developing-a-tiny-ecommerce-site-using-microframework-slim</id>
   <content type="html">&lt;p&gt;Last elections, I stepped forward as a volunteer for the &lt;a href=&quot;http://www.piratenpartij.nl/&quot;&gt;Dutch
Pirateparty&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They were struggling with Drupal, and the most pressing issue was
getting a webshop going, using the Dutch Payment system iDeal, to take care of &lt;a href=&quot;https://lidworden.piratenpartij.nl/&quot;&gt;new member subscriptions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had quite some experience with Drupal e-commerce, and the default Dutch payment-method &lt;a href=&quot;http://groups.drupal.org/node/16772&quot;&gt;iDeal&lt;/a&gt;, in Drupal. Yet decided to build something from scratch instead, here is a short
introduction, some reasoning and then how I build the shop.&lt;/p&gt;

&lt;h2&gt;Reasoning&lt;/h2&gt;

&lt;h3&gt;Managing the Drupalproject was hard as it was.&lt;/h3&gt;

&lt;p&gt;Three people were already working, around the clock, at that time, to get the
Drupalsite running and bug-free: theming, organic-groups-integration and
LDAP-integration (centralising the login), amongst the daily &quot;we need
this and that page, if possible, ready before yesterday).&lt;/p&gt;

&lt;p&gt;Adding a fourth track, integrating e-commerce, was just too much juggling and managing. And
granting access to their codebase and server for just about everyone who wanted to
help was not an option; so all commits would have to go via already
overloaded other volunteers.&lt;/p&gt;

&lt;p&gt;Making, and deploying this as standalone application, was a good option.&lt;/p&gt;

&lt;h3&gt;Drupals' (complete) lack of decent E-commerce options.&lt;/h3&gt;

&lt;p&gt;Yes, there is Commerce now. But in Juli, when all this was happening, it
was simply not ready, for example, there was no stable iDeal payment and
building one (against a still not stable payment-layer) was just too
much work. But even now, I have great doubts about Commerces' set-up,
architectures and concepts. Too much layers, too much in-browser
configuration and overly complicated juggling of several tens of
modules. I guess that is partly my aversion against this overly
complicated drupal-configuring-by-clicking-together stuff, but it might
also be because Drupal, as a CMS, will simply never have the focus and
targeted development that any of the bazillion e-commerce alternatives
have.&lt;/p&gt;

&lt;p&gt;And Übercart has actually never been a serious option to me.&lt;/p&gt;

&lt;p&gt;Integrating and developing the iDeal part for payment-module, was going to be much more work then building from scratch anyway.&lt;/p&gt;

&lt;h3&gt;Easy for new volunteers.&lt;/h3&gt;

&lt;p&gt;Drupal is becoming harder and harder to jump into and start developing, with each release;
this site was Drupal 7 and I found that a lot of volunteers had trouble
solving trivial issues in this Drupalsite. I am not talking about
installing the eighty-fifth module, or configuring another view and
entity. I am talking theming, bugfixing and module-development.&lt;/p&gt;

&lt;p&gt;One of the things I did was helping with many such trivial issues like
organising the menu's, side blocks, organic-groups setup and so on. There
already was a shortage of people who knew enough of Drupal to help.
There was no shortage of people who knew some CSS and HTML, though, yet
getting them up-to-speed to employ these skills in Drupal theming and
configuration proved too much work. I learned (again) how hard and
difficult Drupal is, even for experienced (web)developers.&lt;/p&gt;

&lt;p&gt;Also, the concept of this &quot;become a member&quot; thing was very much
unstable: no one knew exactly what was needed, required and such. If you
asked four people about what was required, you'd get four different (and
even contradicting) answers. So I decided we needed the most agile
system possible. Something that could have a new release several times a
day, something that anyone with basic webdevelopment-skills could help
fix or improve.&lt;/p&gt;

&lt;h2&gt;Slim&lt;/h2&gt;

&lt;p&gt;Hence &lt;strong&gt;PHP&lt;/strong&gt;, hence &lt;a href=&quot;http://www.slimframework.com/&quot;&gt;&lt;strong&gt;Slim&lt;/strong&gt;&lt;/a&gt;, and managed and deployed with &lt;a href=&quot;http://berk.es/2012/08/03/git-deploy-or-how-i-learned-to-stop-worrying-and-love-deployment/&quot;&gt;&lt;strong&gt;git
deploy&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Requirements, documentation and functional designs (wireframes)&lt;/h3&gt;

&lt;p&gt;Before I started coding I wrote down some guidelines made a few
&lt;a href=&quot;https://github.com/piratenpartij/lidworden/blob/doc/lidworden.markdown&quot;&gt;mockups&lt;/a&gt; and created the most basic requirement-doc possible.&lt;/p&gt;

&lt;h3&gt;The set-up&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/piratenpartij/lidworden&quot;&gt;code&lt;/a&gt; consists of a few
directories and a very few files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;err&quot;&gt;├&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Slim&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Contains the Slim Framework Library (classes)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templates&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Contains snippets and PHP-files to render the actual HTML&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# A few settings and globals&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Class/lib to handle the payment processor&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# The actual application&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# file which is excluded from the public git and from the docroot.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Template&lt;/h3&gt;

&lt;p&gt;The template was generated from the existing Drupalsite, by saving the page with Firefox (wget will not save CSS and such), parsing that trough &lt;code&gt;tidy&lt;/code&gt;, and then manually clean up the rest of the HTML.&lt;/p&gt;

&lt;p&gt;This turned out to be, by far, the most work and resulted in two extra
directories &quot;CSS&quot; and &quot;JS&quot;. The biggest problem was Drupal's extremely
convoluted HTML, with nested divs twenty(levels) deep at some points.&lt;/p&gt;

&lt;p&gt;In the end we learned that making the HTML, CSS and JavaScript from
scratch would not only have saved us many hours, it would have left us
with a far easier to maintain application.&lt;/p&gt;

&lt;p&gt;The initial idea to keep as close to Drupal's output as possible. Since that would
allow us to transfer changes in design to this subsite too, was not
practical.&lt;/p&gt;

&lt;h3&gt;The application&lt;/h3&gt;

&lt;p&gt;The entire application &lt;a href=&quot;https://github.com/piratenpartij/lidworden/blob/develop/index.php&quot;&gt;lives in index.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a Slim application, you set up routes that react to a HTTP-request,
do stuff, and then return other stuff. Like so&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_head.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;landing.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;default_amount&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DEFAULT_AMOUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;actions&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_footer.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is a PHP5 syntax, where you can create
The above does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;register a path, &quot;/&quot; with the HTTP-verb GET.&lt;/li&gt;
&lt;li&gt;Add an anonymous function to that; which will be executed when &quot;/&quot; is
requested. PHP5 supports &lt;a href=&quot;http://www.php.net/manual/en/functions.anonymous.php&quot;&gt;anonymous functions, closures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When the function is executed, we call &lt;code&gt;render&lt;/code&gt; to tell what files under &quot;/templates/&quot; to render. We do this for &lt;code&gt;head.inc&lt;/code&gt; and &lt;code&gt;footer.inc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The template &lt;code&gt;landing.php&lt;/code&gt; is rendered, but gets two variables passed along, which can then be &lt;a href=&quot;https://github.com/piratenpartij/lidworden/blob/develop/templates/landing.php&quot;&gt;printed in landing.php&lt;/a&gt;. Note the &quot;Bug&quot; where we don't actually print the actions? This part has been rewritten so often that things got messed up a little.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is all code needed to create a &lt;a href=&quot;https://lidworden.piratenpartij.nl&quot;&gt;page, with a form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you post this form, a slightly more complex function is called, the
simplified version of that is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/pirate&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$pirate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//... more preparing of the $pirate that will be stored in the database&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/.+@.+\..+/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E-mailadres is niet correct&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...Lots of other validations of all the fields.&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;$pirate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;write_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;$ideal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ideal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MERCHANT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SUB_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HASH_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AQUIRER_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//... Preparing a hidden form for payment&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_head.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;pirate.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;hidden_form&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ideal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hidden_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ideal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aquirer_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_footer.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The values you posted are validated, then written to the database, and
placed in a mail.&lt;/p&gt;

&lt;p&gt;A new page is then rendered, with a hidden-form which will be posted to
the payment-system.&lt;/p&gt;

&lt;h2&gt;iDeal&lt;/h2&gt;

&lt;p&gt;We have the simplest form of iDeal payment, iDeal lite. This is an
offsite-payment, where you simply create a form with hidden values and
POST that to the offsite payment-system. They then parse the POSTed
values and present the customer with a payment-workflow.&lt;/p&gt;

&lt;p&gt;On success, the customer might return to &lt;code&gt;/success&lt;/code&gt; on error, there is a
chance they end on &lt;code&gt;/error&lt;/code&gt;. Because this is by no means a confirmation,
we simply render a success or error page there; but take no actions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_head.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;error.php&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_footer.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Other ideal-versions have a Post-back system, where their server
confirms the payment; one of the earlier version of this application had
that, since we did not know exactly what iDeal-version we'd go with. A
confirm would be really simple to implement here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/confirm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;UPDATE pirates SET status = :status WHERE id =&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  :id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;paymentStatus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pirate_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;purchaseID&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Obviously, in reality you'd probably need to parse the $payment to
extract the correct information (the status and the user whose payment
it was) from there. But again: you can see how extremely simple it is to implement.&lt;/p&gt;

&lt;h2&gt;Deploying&lt;/h2&gt;

&lt;p&gt;Since everything is stored in code, we can deploy really simple, using a
git-push. Everyone with write access to the codebase can push changes
there.&lt;/p&gt;

&lt;p&gt;This allows for really fast rolling releases. Unfortunately, this breaks
when someone hacks the code online. And with so many people, under such
large pressure, that will happen. So all the time saved by having
deployments under our fingertips with git, was undone by merging in
changes that were not pushed correctly.&lt;/p&gt;

&lt;p&gt;The solution to this is to make it easier and simpler to deploy The
Right Way, then to hack something on a live server. (And not, as some
might say, to make it harder to do the wrong thing; like removing Vim on
the server or disallowing access to the files on the server).&lt;/p&gt;

&lt;p&gt;I assumed git-deploy would be this easy, but apparently people under
stress grabbed The Vim over SSH and hacked away on production code
anyway. Apparently the git-route was not simple enough.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Several nights of coding, about 20 hours, of which 12 hours were CSS-
and HTML-cleaning and fiddling, we made a really simple login-system.&lt;/p&gt;

&lt;p&gt;The system was simple enough for others to start hacking on, in mere
minutes.&lt;/p&gt;

&lt;p&gt;And its result was simple, stable and friendly enough to handle the
subscriptions of over 1100 in less then a month time.&lt;/p&gt;

&lt;p&gt;Another example of what I call the &quot;seeping trough of the complicated underlying
technology&quot;. In order to keep a project and its result clean, simple and
friendly, make sure the technology you use is simple, friendly and
clean; &lt;a href=&quot;http://2.bp.blogspot.com/-bRoNlTFFl4k/T8BDgLJQCJI/AAAAAAAAAwI/Mc9VGyhwYXA/s1600/einstein-if-you-cant-explain-it-simply-you-dont-understand-it-well-enough.jpg&quot;&gt;KISS&lt;/a&gt;. Despite all the unstructured and rushed development, this application still works, is reasonable clean and can be revived and
improved in mere minutes.&lt;/p&gt;

&lt;p&gt;Something I doubt would have been possible with a large stack of
e-commerce modules in Drupal; or hacked into a Magento or other shop; let
alone built with Zend, Rails or Whatever other framework.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Statische websites beheren anno 2012</title>
   <link href="http://berk.es/2012/11/12/statische-websites-beheren-anno-2012"/>
   <updated>2012-11-12T00:00:00+01:00</updated>
   <id>http://berk.es/2012/11/12/statische-websites-beheren-anno-2012</id>
   <content type="html">&lt;p&gt;Statische sites, bijvoorbeeld weblogs gemaakt met simpele HTML-bestandjes, maken een terugkomst. Gereedschappen als &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; samen met moderne revisiebeheersystemen als &lt;code&gt;git&lt;/code&gt;, maken het opzetten van een simpele, statische site, vaak vele malen makkelijker dan het inregelen van een CMS. In dit artikel leg ik kort uit hoe een CMS zich dat verhoudt tot een statische site. Daarna bekijk ik een rijtje voor- en nadelen, mogelijkheden en onmogelijkheden. En als laatste beschrijf ik kort, hoe je in drie simpele (voor programmeurs, hackers en meer ervaren computergebruikers, althans) stappen, een site met Jekyll kunt opzetten.&lt;/p&gt;

&lt;p&gt;Een CMS genereert de pagina's wanneer ze opgevraagd worden. Voor élke pagina, voor iedere persoon, wordt telkens, eenmalig, een pagina opgebouwd. Dit blogartikeltje bijvoorbeeld, verandert niet meer tussen het moment dat jij en die ene andere lezer het lezen; dus waarom voor jou en die andere lezer een op maat gemaakte pagina opbouwen?  Waarom is het nodig dat ik voor jou en de personen die voor en na jou komen telkens opnieuw in een database ga graven om daaruit de laatste updates te zoeken en daarmee een pagina opbouw?&lt;/p&gt;

&lt;p&gt;Een Static Site Generator (SSG), genereert eenmalig, bijvoorbeeld bij een update, alle bestanden en pagina's. Het idee is niet nieuw, vroeger waren gereedschappen die dit voor je deden, zoals Dreamweaver, de norm. Tegenwoordig zijn complexe, CMS-gebaseerde, of dynamische sites de norm. Maar eigenlijk meestal overbodig. Voorbeelden van moderne Static Site Genergators zijn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, in Ruby, gebruikt door onder meer
Github.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ringce.com/hyde&quot;&gt;Hyde&lt;/a&gt;, in python, &lt;a href=&quot;http://philipm.at/2011/0507/&quot;&gt;vergelijkbaar&lt;/a&gt; met Jekyll.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.phrozn.info/en/&quot;&gt;Phrozn&lt;/a&gt;, in PHP, probeert Jekyll en Hyde
te benaderen.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We zien dan ook een opleving van Static Site Generators, hoofdzakelijk aangedreven door git. Git is een revisiebeheersysteem waarmee je makkelijk kunt &lt;a href=&quot;http://berk.es/2012/08/03/git-deploy-or-how-i-learned-to-stop-worrying-and-love-deployment/&quot;&gt;releasen&lt;/a&gt;, en makkelijk heel veel bestanden kunt beheren.
Deze generatie static site generators, gebruiken geen databases of complexe en dure pakketten, maar, heel eenvoudig, tekstbestandjes.  Gewoon een tekstbestand voor iedere pagina en artikeltje. Dit tekstbestandjes beheer je met git, een revisiebeheersysteem. Met wat scripts maak je van de tekstbestandjes daadwerkelijke webpagina's en die zet je online.&lt;/p&gt;

&lt;p&gt;Een Static Site Generator heeft enkele nadelen, maar ook enorme voordelen ten opzichte van
dynamische sites:&lt;/p&gt;

&lt;h3&gt;Dynamische en interactieve functionaliteit.&lt;/h3&gt;

&lt;p&gt;Een statische site heeft simpelweg geen toegang tot een database. Het plaatsen en opslaan van bijvoorbeeld reacties is daarom simpelweg onmogelijk; dat maakt een en ander enorm veilig, maar maakt veel sites en concepten onmogelijk met statische sites. Sites waarbij mensen inloggen, berichten, artikelen, producten of wat dan ook, plaatsen, kun je gewoon niet uitvoeren met een statische site.
Voor reacties op artikelen kune je nog wat trucjes met bijvoorbeeld facebook of &lt;a href=&quot;http://disqus.com/&quot;&gt;disqus&lt;/a&gt; uitvoeren. Maar verder dan dat: zo goed als onmogelijk. Als je interactie nodig hebt, registraties, insturen van zaken door gebruikers, dan is een statische site gewoon geen optie.
Maar voor de meeste redactioneel gedreven sites (ook als die redactie slechts één persoon is) is het een uitermate geschikte tool.&lt;/p&gt;

&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Op een gemiddeld webservertje, kun je met een gemiddelde Wordpress of Drupal-site (twee veelgebruikte CMSen) vaak minder dan tien gebruikers per minuut aan. Pagina's laden duurt tussen de halve en enkele seconden.
En je moet voor bijna iedere site, groot of klein, ingewikkelde caching-, proxy of databases tunen. Gewoon om een paar pagina's te tonen. Een statische pagina is om en nabij de honderduizend keer zo snel als de meest eenvoudige Drupal-pagina.&lt;/p&gt;

&lt;p&gt;Veel CMSen vallen dan ook terug op allerhande caching-servers en lagen. Het is niet ongebruikelijk om een volledige server (reken vanaf €300/jaar) voor caching in te zetten. Caching is in feite niets meer dan eenmalig de gegenereerde pagina (of onderdelen ervan) ergens op te slaan zodat ze voor de volgende bezoeker niet opnieuw gegenereerd hoeven te worden. Veelal nogal onzinnig: een volledig, op de server draaiend CMS, om statische pagina's mee te maken. Dat kan slimmer (hint: dat CMS elders neerzetten, bijvoorbeeld op je eigen computer en de gegenereerde pagina's zelf op de server plaatsen). Caching is voor de meeste CMSen onontbeerlijk en maakt een groot deel van de dynamiek en interactie weer ongedaan. Veelal blijkt het voor sites eigenlijk goed mogelijk om die vier jaar oude archiefpagina niet telkens opnieuw uit een database op te bouwen, maar gewoon eenmalig weg te schrijven als een statisch bestand en nooit meer naar om te kijken.&lt;/p&gt;

&lt;h3&gt;Piekperformance&lt;/h3&gt;

&lt;p&gt;Zelfs wanneer je een goed getunede server hebt met een mooi ingeregeld CMS, dan &lt;a href=&quot;http://www.destentor.nl/nieuws/algemeen/binnenland/12002326/Website-Omroep-Gelderland-weer-in-de-lucht.ece&quot;&gt;gaat&lt;/a&gt; het &lt;a href=&quot;http://webwereld.nl/nieuws/105305/crisis-nl-blundert-zichzelf-offline.html&quot;&gt;bij&lt;/a&gt; piekbelasting &lt;a href=&quot;http://www.it-executive.nl/dossiers/dossier/programmeerfout_haalde_website_ns_onderuit&quot;&gt;vaak mis&lt;/a&gt;.
Meestal is de onderlinge oorzaak de complexiteit van het geheel.
Allerhande gekoppelde redactionele systemen, advertentieservers en vele onderling gekoppelde servers. Wanneer je enkel statische files serveert is de opzet zó eenvoudig dat bij piekbelasting de site gewoon online gehouden kan worden, in heel extreme gevallen bijvoorbeeld door wat extra servers bij te schakelen. Iets wat met de meeste dynamische systemen gewoon niet kan. Terwijl juist bij piekbelasting de bereikbaarheid belangrijk is. Is het niet voor de kritieke communicatie en informatie bij calamtiteiten, dan op zijn minst omdat je tijdens een piek lekker veel advertentieinkomsten binnenharkt.&lt;/p&gt;

&lt;p&gt;Je ziet dan ook bij extreme situaties dat (grote) sites overschakelen op statische files, of zelfs altijd statische files hebben klaarstaan om het over te nemen als het CMS het niet langer trekt. De CNN tijdens 9/11 was een prachtig voorbeeld daarvan: een simpele pagina waarop de redacteuren telkens nieuwe informatie toevoegden of herschreven; hun CMS was allang daarvoor gestorven aan overbelasting.&lt;/p&gt;

&lt;h3&gt;Security&lt;/h3&gt;

&lt;p&gt;Omdat je het meest complexe en tevens meest blootgelegde deel uit je applicatiestapel (stack) haalt, is beveiligen heel makkelijk.
Geen databases, administratieomgevingen en interactieve delen die opengebroken kunnen worden. De enige die zaken op de server kan plaatsen is de applicatie of persoon die de statische files erop zet; dus dat is enorm sterk te beveiligen. In een HTML-bestand kun je (welhaast) niet inbreken. In diezelfde pagina van een CMS eigenlijk altijd wel (alleen is nu nog niet bekend hoe).&lt;/p&gt;

&lt;p&gt;Om deze reden kun je ook enorm besparen op onderhoud; je hoeft immers enkel nog de webserver(s) te onderhouden; iets wat sowieso bijna niemand meer zelf doet. Bij een update-frequentie van eens per paar weken voor Wordpress, of eens per week voor Drupal, met een paar modules, scheelt dit al snel tien of meer uur aan duurbetaalde ontwikkelaars, per maand.&lt;/p&gt;

&lt;h3&gt;Hosting en serverkosten&lt;/h3&gt;

&lt;p&gt;De hosting kan enorm simpel worden uitgevoerd. Vanwege de duizenden malen hogere performance, kun je in theorie duizenden malen zoveel sites hosten op dezelfde hardware. Meestal kun je een statische site met enkele duizenden bezoekers per week heel makkelijk gratis en toch redelijk professioneel hosten. Meestal hoef je voor veel grotere sites slechts één server op te tuigen, in plaats van een hele boom van servers. Grote hosters zoals de NPO hebben vaak vele tientallen malen zoveel applicatieservers (de servers die de CMSen draaien) dan statsiche content-servers; gewoon omdat die laatste zoveel makkelijker tot onvoorstelbare performance op te schalen zijn.&lt;/p&gt;

&lt;p&gt;Het web, en daarmee de bekendste servers en alle protocollen waren ook gewoon ontworpen voor statische content. Pas nu, 2012, komen webservers en protocollen beschikbaar die eigenlijk technisch geschikt zijn voor interactieve sites. Alles wat we tot nu toe deden was knutselen en rommelen in de marge. Als je dus teruggaat naar die basis, statische paginas, worden zaken vele malen gemakkelijker.&lt;/p&gt;

&lt;h3&gt;Hackability&lt;/h3&gt;

&lt;p&gt;Je hele stapel aan serversoftware kun je terugbrengen naar één lokaal draaiend stukje gereedschap; geen &lt;code&gt;mod_php&lt;/code&gt;, &lt;code&gt;cgi&lt;/code&gt;, &lt;code&gt;databases&lt;/code&gt;, &lt;code&gt;caching proxies&lt;/code&gt; enzovoort.  En zelfs dat lokale stukje software is meestal erg simpel. Jekyll zelf bestaat uit een paar klasses en enkele tientallen files, niet meer. Met wat knutselwerk kun je ook met vier PHP-scriptjes HTML-bestanden maken uit tekstfiletjes.
Bovendien draait de applicatie niet op de (productie-)server, dus is uitproberen van kleine wijzingingen heel makkelijk. Pas als je tevreden bent, kopieer je alles naar online.
Het is daarom zeer, zeer hackable (hackable als in: aanpasbaar, niet als in &lt;em&gt;inbraakgevoelig&lt;/em&gt;). Met een klein beetje programmeerervaring kun je zo heel grote sites optuigen. Veel makkelijker en overzichtelijker dan in de code van een of ander CMS te gaan rondsleutelen; iets wat bovendien vaak sterk wordt &lt;a href=&quot;http://wordpress.stackexchange.com/questions/1639/what-are-some-reasons-why-you-should-not-hack-wordpress-core-files#1671&quot;&gt;afgeraden&lt;/a&gt;. Maar bij statische-site-generators juist de norm en bedoeling is!&lt;/p&gt;

&lt;p&gt;Deze aanpasbaarheid zorgt ook dat je een stuk vrijer bent dan wanneer je alles volgens de structuur of standaarden van het gekozen framework of CMS doet.&lt;/p&gt;

&lt;h3&gt;SEO&lt;/h3&gt;

&lt;p&gt;De eenvoud en hackability van statische-sites laat het toe om tot op zeer gedetailleerd niveau aanpassingen te maken: superschone HTML, goede -tags, nette doorverwijzingen enzovoort. De snelheid zorgt er bovendien voor dat de robots van zoekmachines in enkele seconden je hele site kunnen inlezen en indexeren; bij veel CMSen duurt dit weken; vooral omdat robots je site niet willen platleggen en ze, wanneer ze zien dat je een CMS hebt, wat rustiger gaan indexeren.&lt;/p&gt;

&lt;h3&gt;Hogere drempel&lt;/h3&gt;

&lt;p&gt;Het aanpassen van tekstbestandjes op je schijf geeft een hogere drempel; hoger voor onervaren gebruikers om te gaan schrijven aan tekst voor een site, en hoger voor jezelf, omdat het plaatsen van een artikel net even een grotere taak lijkt dan op een CMS.&lt;/p&gt;

&lt;p&gt;Dit maakt dat veel blogs die met statische sites gemaakt zijn, veelal langere artikelen bevatten, met minder hoge frequentie. Het is minder geschikt voor iemand die viermaal daags een update wil plaatsen, liefst vanaf haar mobiele telefoon. Maar meer voor iemand die dagen schaaft aan een stukje.&lt;/p&gt;

&lt;h3&gt;Integratie van allerhande gadgets&lt;/h3&gt;

&lt;p&gt;De meeste CMSen integreren twitter, facebook, en wat dies meer zij, ook gewoon via zogenaamde &quot;embedcodes&quot;. Dat kan op een statische site dus precies zo makkelijk.
Maar als de integratie iets verder gaat, zoals het automatisch koppelen van comments aan facebook; of het vanzelf plaatsen van links van nieuwe artikelen op twitter, dan is wat meer kunst- en vliegwerk vereist.&lt;/p&gt;

&lt;h3&gt;Grotere organisaties.&lt;/h3&gt;

&lt;p&gt;De huidige statische sites gaan ervanuit dat je op je PC een lijstje met bestanden hebt die bij publicatie omgezet worden naar HTML.
Met meer mensen samenwerken is wat moeilijk. Tenzij die mensen dit met een revisiebeheersysteem doen. Daaronder valt ook bijvoorbeeld een gedeelde Dropbox waarin enkele mensen tegelijk tekstbestandjes plaatsen.&lt;/p&gt;

&lt;p&gt;Maar een standaard redactioneel team met (online) workflows die via vele teams, eindredacteurs enzovoort naar online gaat, is het waarschijnlijk wat minder geschikt. Althans, je kunt ook gewoon elkaar tekstbestandjes mailen.&lt;/p&gt;

&lt;h2&gt;Jekyll opzetten&lt;/h2&gt;

&lt;p&gt;Hieronder een korte howto van een site met Jekyll. Zo een site is heel simpel en plat. Wil je wat sneller vooruitkomen, dan kun je met bijvoorbeeld &lt;a href=&quot;http://octopress.org/&quot;&gt;octopress&lt;/a&gt; of &lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;Jekyllbootstrap&lt;/a&gt;.  Maar die zijn meteen veel complexer en vereisen waarschijnlijk weer een heleboel opruimwerk. Ik begon zelf met Jekyll Bootstrap, maar heb erg veel tijd moeten steken in het weghalen van vanalles. Achteraf bezien was het veel sneller geweest om met een standaard Jekyll te beginnen en gewoon zelf alles op te zetten.&lt;/p&gt;

&lt;p&gt;Daarom de drie stappen om je site te maken:&lt;/p&gt;

&lt;h3&gt;1. Installatie&lt;/h3&gt;

&lt;p&gt;Installeer de Gem (of eerst ruby, rubygems en dan Jekyll, op Linux soms nodig, op Mac heb je deze al):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get ruby rubygems &lt;span class=&quot;c&quot;&gt;# op Mac niet nodig dus, op Linux soms.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Of installeer Jekyll vanuit je packagemanger in Ubuntu. Beter is via gems, want de deb packages in Ubuntu willen nogal eens achterlopen op de gems, wat Ruby's eigen pakettensysteem is.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install jekyll.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;2. Mappen en bestanden aanmaken&lt;/h3&gt;

&lt;p&gt;Maak mappen aan waarin je je statische site en de layout enzo gaat bouwen.&lt;/p&gt;

&lt;pre&gt;
    .
    |-- _config.yml
    |-- _includes
    |-- _layouts
    |   |-- default.html
    |   `-- post.html
    |-- _posts
    |   |-- 2012-12-30-mijn-eerste-blogartikel.markdown
    |   `-- 2012-12-31-het-was-een-goed-jaar.markdown
    |-- _site
    `-- index.html
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;default.html&lt;/code&gt; bevat de HTML waarmee je jou site opmaakt, &lt;code&gt;post.html&lt;/code&gt; de opmaakt van een enkel artikel binnen deze standaard opmaakt. Hierin zet je waarschijnlijk &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;enkele variabelen&lt;/a&gt; om bij het maken van de HTML, de titels, datums enzovoort te plaatsen. De posts schrijf je als simpel tekstbestandje, maar wat extra informatie (zoals tags, auteur enzovoort) kun je &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;bovenaan in het bestandje kwijt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; vul je met wat tekst voor je voorpagina &lt;a href=&quot;https://github.com/shopify/liquid/wiki/liquid-for-designers&quot;&gt;en code&lt;/a&gt; om een lijstje met artikelen te plaatsen, bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for posts in site.posts limit:10 %}
  {{ post.date | date_to_string}}: &amp;lt;a href=&quot;{{ BASE_PATH }}{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gerenderd als:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;30 Dec 2012: Mijn Eerste Blogartikel
31 Dec 2012: Het was een Goed Jaar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3. Omzetten naar HTML: de site genereren.&lt;/h3&gt;

&lt;p&gt;Roep &lt;code&gt;jekyll --server&lt;/code&gt; aan. Open een browser op &lt;a href=&quot;http://localhost:4000&quot;&gt;localhost:4000&lt;/a&gt;. En viola, je site.&lt;/p&gt;

&lt;p&gt;Met &lt;code&gt;jekyll generate&lt;/code&gt;, vul je de &lt;code&gt;_site&lt;/code&gt; map met de statische versie
van je site; deze kun je op vrijwel iedere host plaatsen. Hosten (gratis) op
Github kan ook, maar vereist wat &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;kennis van git en github's hosting&lt;/a&gt;.
Uiteraard kun je het plaatsen van de statische content helemaal
automatiseren, bijvoorbeeld met git, of een van de vele &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Deployment&quot;&gt;andere manieren&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fix SEGV for Vims command t on Ubuntu 12.10</title>
   <link href="http://berk.es/2012/10/23/fix-segv-for-vims-command-t-on-ubuntu-1210"/>
   <updated>2012-10-23T00:00:00+02:00</updated>
   <id>http://berk.es/2012/10/23/fix-segv-for-vims-command-t-on-ubuntu-1210</id>
   <content type="html">&lt;p&gt;The upgrade to Ubuntu 12.10 upgraded my Ruby version to 1.9.3 (yay!).&lt;/p&gt;

&lt;p&gt;This, however, broke my &lt;a href=&quot;https://wincent.com/products/command-t&quot;&gt;command-t&lt;/a&gt; a vim-plugin to open files
quickly. Command-t is a compiled plugin (for speed) and needs to be
compiled against the system-wide Ruby. Else vim crashes with a &lt;code&gt;SEGV&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A little &lt;a href=&quot;https://github.com/carlhuda/janus/issues/215#issuecomment-3003126&quot;&gt;searching&lt;/a&gt;, &lt;a href=&quot;http://deangerber.com/blog/2012/01/09/vim-caught-deadly-signal-segv/&quot;&gt;showed me&lt;/a&gt;
that command-t was the problem and needed to be
recompiled. Obviously only when you had installed command-t before the upgrade to 12.10
(and thus compiled against the previous ruby version). As nearly always, once you know the problem, the fix is
easy on Ubuntu; the Vim and gVim are already compiled against the correct library.&lt;/p&gt;

&lt;p&gt;First, checking what version command-t is compiled against:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ ldd ~/.vim/bundle/command-t/ruby/command-t/ext.so
  linux-gate.so.1 =&amp;gt;  (0xb7714000)
  libruby1.8.so.1.8 =&amp;gt; /usr/lib/libruby1.8.so.1.8 (0xb7696000)
  libc.so.6 =&amp;gt; /lib/i386-linux-gnu/libc.so.6 (0xb7330000)
  libpthread.so.0 =&amp;gt; /lib/i386-linux-gnu/libpthread.so.0 (0xb7314000)
  librt.so.1 =&amp;gt; /lib/i386-linux-gnu/librt.so.1 (0xb730b000)
  libdl.so.2 =&amp;gt; /lib/i386-linux-gnu/libdl.so.2 (0xb7306000)
  libcrypt.so.1 =&amp;gt; /lib/i386-linux-gnu/libcrypt.so.1 (0xb72d5000)
  libm.so.6 =&amp;gt; /lib/i386-linux-gnu/libm.so.6 (0xb72a9000)
  /lib/ld-linux.so.2 (0xb7715000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm. &lt;code&gt;libruby1.8.so.1.8&lt;/code&gt;, not good.&lt;/p&gt;

&lt;p&gt;Cd into the command-t location (mine is at &lt;code&gt;~/.vim/bundle/command-t/&lt;/code&gt;),
feth the lastest version, clean the old make and re-make. In order to re-make I use the rakefile,
you might have to install rake first. And, important, make sure you run
the system ruby if using gemsets. Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ rvm use system
  $ ruby -v &amp;amp;&amp;amp; which ruby # Just to know what we are using.
  $ sudo gem install rake # We need rake to build.

  $ cd ~/.vim/bundle/command-t/
  $ git pull --rebase origin &amp;amp;&amp;amp; git checkout master

  $ make clean # remove old compilations and installation
  $ rake make  # rebuild the 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ ldd ~/.vim/bundle/command-t/ruby/command-t/ext.so 
  linux-gate.so.1 =&amp;gt;  (0xb7714000)
  libruby-1.9.1.so.1.9 =&amp;gt; /usr/lib/libruby-1.9.1.so.1.9 (0xb74da000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy &lt;a href=&quot;https://wincent.com/products/command-t&quot;&gt;command-t-ing&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spree e-commerce on budgethoster Site5</title>
   <link href="http://berk.es/2012/10/22/spree-on-budgethoster-site5"/>
   <updated>2012-10-22T00:00:00+02:00</updated>
   <id>http://berk.es/2012/10/22/spree-on-budgethoster-site5</id>
   <content type="html">&lt;p&gt;Recently I rolled out a
Ruby-on-Rails/&lt;a href=&quot;http://spreecommerce.com&quot;&gt;Spree&lt;/a&gt;-based webshop on the
budgethoster &lt;a href=&quot;htp://site5.com&quot;&gt;Site5&lt;/a&gt;. I thought to share some gotcha's, reasoning
around this project. To debunk the idea that hosting for Rails is either
complex and hard, or done on Heroku. To explain a bit about Spree as a
good option for your e-commerce (or not) and to go a little into how I modified
Spree.&lt;/p&gt;

&lt;p&gt;My wife makes &lt;a href=&quot;http://annatreurniet.nl&quot;&gt;custom bags, smartphone- and tablet sleeves, and all sorts
of leather, handcrafted jewelery&lt;/a&gt;. Obviously she wanted to sell some
through the internet; So I made her a webshop.&lt;/p&gt;

&lt;h2&gt;Reasons for choosing for Spree&lt;/h2&gt;

&lt;p&gt;I decided to go for Spree, after some investigation. A few important
reasons where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's catchphrase &lt;em&gt;It was designed to make customization and upgrades
as simple as possible&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It is built in Ruby on Rails, and that is what I do. (Although I
probably know more about PHP, and Drupal, at that).&lt;/li&gt;
&lt;li&gt;We wanted a simple shop. Her needs are mostly simplicity; less
features in the shop equals better. Spree promises that; as opposed to
most ready-to-go shopping tools, that promise every feature you may
wish. And get in your way.&lt;/li&gt;
&lt;li&gt;We needed flexibility. Simple means that it offers less options and
choices. But also that the business-logic needs to handle more.&lt;/li&gt;
&lt;li&gt;I wanted the site to be ready for mobile and thus to be &lt;a href=&quot;http://zomigi.com/blog/examples-of-flexible-layouts-with-css3-media-queries/&quot;&gt;responsive&lt;/a&gt;. Rails is ready for this. HTML5 and all that. So is Spree.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some reasons why I had thoughts about either writing my own e-commerce or
going with a PHP-solution were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had (and have, read on) my questions about how true the catchphrase
&lt;em&gt;It was designed to make customization... as simple as possible&lt;/em&gt; was,
in reality.&lt;/li&gt;
&lt;li&gt;Spree is Rails. Rails requires professional hosting; not a problem for
a project developed for over 1k; where hosting at $20 per month is peanuts. In this
case $20 per month is far over budget; again, the insides of her exact
business-choices are out of scope for this project. Good-enough
PHP-hosters come for under the $5 per month.&lt;/li&gt;
&lt;li&gt;I was going to build it for free, obviously. So we could not afford me
spending hundreds of hours on tweaking some tool, CSS and whatnot. A
turnkey-solution like &lt;a href=&quot;https://en.wikipedia.org/wiki/Magento&quot;&gt;Magento&lt;/a&gt; would be a faster solution.&lt;/li&gt;
&lt;li&gt;We chose the Dutch bank and payment provider &lt;a href=&quot;https://www.rabobank.nl/bedrijven/producten/betalen_en_ontvangen/geld_ontvangen/rabo_omnikassa/&quot;&gt;Omnikassa&lt;/a&gt; because
they simply offered the best deal for her. There was no omnikassa
payment plugin for Spree, but there were some for more famous
frameworks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I went for Spree after proof-of-concepting my two biggest challenges:
offsite payment and (Zurb-foundation](http://foundation.zurb.com) as CSS/HTML framework, instead of
the default &lt;a href=&quot;http://www.getskeleton.com/&quot;&gt;Skeleton&lt;/a&gt;, came out quite
alright. And a 30 days trial on &lt;a href=&quot;https://www.site5.com/&quot;&gt;Site5&lt;/a&gt; proved me that hosting there was
going to work out.&lt;/p&gt;

&lt;h2&gt;Zurb Foundation&lt;/h2&gt;

&lt;p&gt;I replaced most views with my own HTML, so that I can use Zurb
foundation. It offered just a little more features, such as a &lt;a href=&quot;http://foundation.zurb.com/docs/orbit.php&quot;&gt;slider&lt;/a&gt;
and more advanced responsive features; like hiding entire subtrees of
elements on certain devises.&lt;/p&gt;

&lt;p&gt;In the end, we decided to go Desktop-first; I am re-doing some of the
views now, so they are prettier on mobile too. The reason we put this
lower in our todo, is that the most-used payment system in the
Netherlands, iDeal, trough our PSP omnikassa, is not mobile-friendly in
the first place. So why offer an entire mobile-webshop when people
cannot pay (properly) on a mobile?&lt;/p&gt;

&lt;p&gt;It turned out to be really easy, but quite a journey of discovery trough all the
spree-gems and its views, before I found out what views to copy into my
own projects. The CSS was just as cumbersome to override. In the end, I
decided to simply do away with &lt;em&gt;all&lt;/em&gt; CSS and JavaScript for the front-end and roll my own.&lt;/p&gt;

&lt;h2&gt;Site5 Hosting.&lt;/h2&gt;

&lt;p&gt;For under €5 per month you get a server with git, ssh-access and
Passenger to host your Rails application. A few Euro more for a static
IP address, which I need for the SSL-certificate. It is an e-commerce,
you need HTTPs.&lt;/p&gt;

&lt;p&gt;It requires a &lt;a href=&quot;http://kb.site5.com/ruby-on-rails/how-to-deploy-a-rails-3-application-with-phusion-passenger/&quot;&gt;few settings to be changed&lt;/a&gt; to my Rails application and it
requires Ruby &lt;a href=&quot;http://kb.site5.com/ruby-on-rails/ruby-rails-gems/&quot;&gt;1.8.7&lt;/a&gt; since that is what their Passenger is configured
to use, but in the end it works just fine.&lt;/p&gt;

&lt;p&gt;The only problem I had was some asset-precompiling issue, where the
compiler just died on me. After a support-call, the Site5-engineers upped
some memory on the server and I could compile just fine.
It turned out that some spree plugin came with several hundreds of
(demo) asset-files like huge videos that needed to be &quot;compiled&quot; by the
asset-pipeline. Cleaning up &lt;a href=&quot;https://github.com/berkes/spree_slider/commits/master&quot;&gt;Spree Slider&lt;/a&gt; and removing its assets
fixed the issue for good. But hey, I don't expect a budget-hoster to
support me compiling hundreds of megabytes of video and other
demo-stuff. Fair enough.&lt;/p&gt;

&lt;p&gt;Also, their uptime is reasonable. Not enterprise-alike reliable (IMHO), so I
have &lt;a href=&quot;http://nagiosplugins.org/man/check_http&quot;&gt;nagios&lt;/a&gt; to check the
frontpage every several minutes for certain strings to occur (It looks
if the words &quot;Anna Treurniet&quot; occur in the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;). Every odd
month (or so) there is a restart or some short downtime. One time Site5
changed the MySQL-setup (location of the socket moved to elsewhere) so I
had over half a day of downtime until solved. And now and again the
application gets shut-down for no clear reason, so it needs to boot,
resulting in the webshop loading very slow for one or two visitors. The
nagios checking actually kind-of solves this too, since it acts as a
&quot;visitor&quot; opening the site every five minutes.&lt;/p&gt;

&lt;p&gt;All in all, I am very happy with this host. It offers far (far!) more then one
would expect from a €5/month. In my &quot;enterprise&quot;-jobs, I have to deal with €500-and-up-per-month
hosters who have far worse deals, support, deployment and uptime.&lt;/p&gt;

&lt;p&gt;Their absolute biggest downside is the way their bulkhosting environment holds them back from upgrading to Ruby 1.9.3.
So, if you depend on a reasonable recent Ruby-version, bad luck.&lt;/p&gt;

&lt;h2&gt;Git Deploy&lt;/h2&gt;

&lt;p&gt;In order to keep the deployment smooth and somewhat close to the
experience I have with &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, I use &lt;a href=&quot;https://github.com/mislav/git-deploy&quot;&gt;git-deploy&lt;/a&gt;. Git deploy consists of a few simple hooks that run on the server in post-receive hooks. So, after you push your changes to production with &lt;code&gt;git push production&lt;/code&gt;, the server runs a few commands, like (when needed) database-migrations, assets and cache-refreshing and then a restart of the Rails application. I have used this for &lt;a href=&quot;http://www.berk.es/2012/08/03/git-deploy-or-how-i-learned-to-stop-worrying-and-love-deployment/&quot;&gt;other, PHP-based systems too&lt;/a&gt;.
Some problems, as mentioned above with asset-precompiling aside, it
works like a charm.&lt;/p&gt;

&lt;p&gt;Obviously, when using git to manage the deployment, you need a &lt;a href=&quot;http://www.jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/&quot;&gt;good
branching and releasing management&lt;/a&gt;. With that in place, I can fix and deploy changes within minutes. Yes. Minutes. Probably faster than most of you can log in over SSH, find the sourcecode on production, and hack a fix in with Vim.&lt;/p&gt;

&lt;h2&gt;Testing and TDD&lt;/h2&gt;

&lt;p&gt;Unfortunately, I did not manage to get good integration tests for Spree
going. Most of the extensions lack any form of tests. Spree itself is is
covered pretty well, but integrating Spree means changing configuration,
overriding behaviours with &lt;a href=&quot;http://guides.spreecommerce.com/logic_customization.html&quot;&gt;Decorators&lt;/a&gt;. And I still have no idea how
to tests these properly. The rest is mostly view-overrides, which often
breaks Spree's own tests and requires me to rewrite all the spree-tests
in my application. It mostly boils down to my inexperience with testing
mostly, though.&lt;/p&gt;

&lt;h2&gt;Omnikassa&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;http://www.spreecommerce.com/extensions/95-spree-omni&quot;&gt;Spree Extension&lt;/a&gt; was written to allow offsite-payment with the
Dutch payment-system Omnikassa. This is and was a mess. Spree had no
(proper) support for offsite payments, so I had to hack into the entire
checkout-workflow in order to get this payment-system going. The
Omnikassa-extension somehow breaks the feature in Spree to allow
discounts; it breaks certain orders in the back-end and whatnot. Spree
1.2.0 promises to have this checkout-workflow-inflexibility fixed, but
an upgrade is rather hard, seeing all the customisations the application
needed.&lt;/p&gt;

&lt;h2&gt;Spree again?&lt;/h2&gt;

&lt;p&gt;I don't think I will use Spree for a future e-commerce project. Despite
its promise to be the most flexible solution, I found it making too much
assumptions and being far too inflexible in areas. I'd rather roll my
own, next time.
The most important parts that Spree offers me, are either very easy to
develop myself (products, categories, their views, content-management),
 not needed (credit card-handling, user-login, 3rd party
 statistics) or covered in solid Rails plugins (administration, editors).&lt;/p&gt;

&lt;p&gt;Against small-things-made-hard, like changing the checkout-workflow
(one-click-checkout?, offsite-payments), manually ordering the products
on the frontpage, integrating a simple CMS for the few &quot;static pages&quot;
and so on. Usually, in an Average Rails-projects these things take a
few hours programming and deploying. Here they took me days of stepping
through spree-core code in order to understand how my Decorator did
(not) change some ordering or some menu-addition.&lt;/p&gt;

&lt;p&gt;For me, Spree offers me too little benefits to overcome its downsides. Despites
its promise, it is very much a ready-made application, which works
according to various assumptions about workflow, features and even looks, that you can
configure and beat into shape; mostly. The very same conceptual things that &lt;a href=&quot;http://www.berk.es/2012/10/01/farewell-drupal/&quot;&gt;Drove me
from Drupal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But overall, rolling a simple, Spree-site on Site5, gives you a
well-designed, ready-to-go e-commerce environment for under €10 per
month. And with a few hacks and tools, you can make the deployment to
that host really easy. Whether Spree is the best solution for your
e-commerce needs, depends on how much (and what exactly) you need to
customize.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why outside in Webdevelopment is Better; why Designs should be Leading.</title>
   <link href="http://berk.es/2012/10/15/why-outside-in-webdevelopment-is-better-why-designs-should-be-leading"/>
   <updated>2012-10-15T00:00:00+02:00</updated>
   <id>http://berk.es/2012/10/15/why-outside-in-webdevelopment-is-better-why-designs-should-be-leading</id>
   <content type="html">&lt;p&gt;Designs should be leading when building a website or -application.
There! I said it.&lt;/p&gt;

&lt;p&gt;Sure, form follows function; content is king and so on: a design should be a Good Design to begin
with: it should carry the function, content and user-experience to a
higher level. So, for the sake of the argument, let us assume you have the Perfect Design For Your Project,
Audience and Branding. It is UX-tested. It is
delivered as valid, clean HTML and CSS, backed with PSDs, Wireframes and looks stunning.
It has passed numerous PR- and marketing sessions, and even the boss
wants it implemented like this.&lt;/p&gt;

&lt;p&gt;Enter &quot;the technical guys&quot;. People like me, a &lt;em&gt;backend-guy&lt;/em&gt;. &lt;strong&gt;Sorry, but
the CMS we are going to build it with, makes it really hard to implement
this design.&lt;/strong&gt;, sometimes followed with the really pragmatic solution to
&lt;strong&gt;Have the CMS dicate the way the application works&lt;/strong&gt;. To &lt;strong&gt;redo the
wireframes according to how the CMS works, because that will save lots
of time and budget&lt;/strong&gt;. That last word, being the most important one:
&lt;strong&gt;Budget&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;People think visual. People talk visual. And our delivery is mostly
visual: people interact with our -technical- solutions through the &quot;interface&quot;,
that which was in &quot;the Design&quot;.&lt;/p&gt;

&lt;p&gt;But most important: the design, that interface, is most prone to change;
from small changes in wording in a footer, to a grand
rebranding-overhaul: mostly interface changes. When I calculate the
tickets in the projects I am now involved in, 80% of the tickets are
&quot;interface&quot;- or &quot;interface-related&quot;. First because this interface is
where any problems below surface and second because this is what 80% of
your and my clients care about: the interface.&lt;/p&gt;

&lt;p&gt;Yet, Even though most of the communications and deliveries are
outside-in; we work inside out; starting with database-designs,
CMS-configurations from which we work towards the interfaces.&lt;/p&gt;

&lt;h2&gt;But how?&lt;/h2&gt;

&lt;p&gt;You'll be developing the innards of the application (its models,
controllers) and then, in the end, need a giant hammer to beat the
views, glued to it, into shape to match as closely as possible to your
designs.&lt;/p&gt;

&lt;p&gt;It gets worse when these innards are fixed, because you use a CMS that
has them built in, for example. You'll be writing extensions, hacks and
overrides all trough that CMS, just to make it output its interfaces as
close as possible to designs.&lt;/p&gt;

&lt;p&gt;The solution lies in &lt;strong&gt;outside-in development&lt;/strong&gt;. I encountered that term first in &lt;a href=&quot;http://www.pragprog.com/titles/achbd/errata&quot;&gt;The
Rspec Book — A
Comprehensive Handbook for Behaviour Driven Webdevelopment&lt;/a&gt;. And I am loving it.&lt;/p&gt;

&lt;p&gt;The idea is as simple as pragmatic: &lt;a href=&quot;http://teachmetocode.com/screencasts/introduction-to-outside-in-development-with-cucumber&quot;&gt;you develop by making the views, the
interface first&lt;/a&gt;. Then fixate them in tests (specs), so that the
interface, the HTML is fixed in your project. From there on, you develop
the underlying application, whether those are modules for a CMS, models
and controllers for an MVC-framework or configurations of a
point-and-click-tool.&lt;/p&gt;

&lt;p&gt;Once the HTML (and thus the CSS and interaction) is fixed, a test will
start to fail the moment someone touches that HTML. Developers can
therefore develop, refactor, and rewrite the underlying application as
often as they wish, without breaking the Designs. Sounds cool, not?&lt;/p&gt;

&lt;h2&gt;Flexibility.&lt;/h2&gt;

&lt;p&gt;Well, maybe not if that underlying application lacks the flexibility to
be rewritten, altered and changed without making these views-tests fail.
If, the moment you install an extension, all your tests turn Red (they fail),
your tests, the fixed interfaces, become a burden. It is then near
impossible to keep them passing, without all the hacks, extensions and
configurations. That is probably the moment that you decide to rather
change the view-specs (i.e. Divert from the original Designs) just to
get forward.&lt;/p&gt;

&lt;p&gt;It means you have the wrong tool. It means you have a tool at hand where
you'll simply never get 100% according to design. Where the tool
dictates the designs and workflows of the application. If that works for
you, then outside-in development makes little sense; but in that case,
be very aware of this all trough the process; It really makes no sense
to have a UX-lab test all the wireframes and mockups, if two weeks
later, you find you cannot implement these wireframes and mockups
anyway, due to the underlying inflexible tools.&lt;/p&gt;

&lt;p&gt;Most RAD frameworks like Rails, Django, and various or their PHP-clones,
are flexible enough in this, because they don't (ever) assume anything
about your wireframes and designs.
Some, very few actually, CMSes allow this too.&lt;/p&gt;

&lt;h2&gt;An example?&lt;/h2&gt;

&lt;p&gt;In Rails many people test with Rspec; Views are (arguably) best
described in cucumber features. The exact syntax and setup goes way
beyond this post, so let's look at some pseudo-code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: I want to log in
  Given I am signed in
  When I click on my name
  Then I should see my profile-page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple feature, described in &lt;a href=&quot;http://cukes.info&quot;&gt;Gherkin&lt;/a&gt; and fixates the actual views
with so-called step-definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given /I am signed in/ do
  @me ||= Factory(:valid_user)
  When %(I go to the new user session page)
  When %(I fill in &quot;Username&quot; with &quot;#{@me.username}&quot;)
  When %(I fill in &quot;Password&quot; with &quot;#{@me.password}&quot;)
  When %(I press &quot;Sign in&quot;)
end
When /^I click on my name$/ do
  click_link(&quot;#{@me.first_name} #{@me.last_name}&quot;)
end
Then /^I should see my profile-page$/ do
  page.should have_xpath('//*/h1.name', :text =&amp;gt; &quot;#{@me.first_name} #{@me.last_name})
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a really simple test to ensure that a logged-in user, who clicks
on a link with her name, gets to see the profile-edit page, containing
an &lt;em&gt;H1-tag&lt;/em&gt;, with class &quot;name&quot; and contents of the users' name. Real
world tests, with more detail &lt;a href=&quot;http://blog.carbonfive.com/2012/02/14/beginning-outside-in-rails-development-with-cucumber-and-rspec&quot;&gt;over at Jared Carroll's blogpost on this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Downsides?&lt;/h2&gt;

&lt;p&gt;Certainly. As you can see, just to describe a login-form, a link with my
&lt;em&gt;username&lt;/em&gt;, and a generic &lt;em&gt;H1-tag&lt;/em&gt;, I already need one entire &lt;em&gt;story&lt;/em&gt;. Depending on your
test-suite and your application, you may have to write far, far more test-code then &quot;actual&quot;
code.&lt;/p&gt;

&lt;p&gt;But outside-in development is just one of many reasons why one
might choose for test-driven development. Writing tests requires
effort, time and dedication. Without tests you have no way to describe
and fixate the interfaces. And without that, there is no outside-in
development (And you'd best tell your designers and clients right-away
that you are not going to get 100% pixel-perfect interfaces, within
agreed budget and time... :) ).&lt;/p&gt;

&lt;p&gt;The upside, is that your application is tested, and can easily remain
so. With each release, a few commands ensure you that your (ever
growing) application works. That all the work by all your colleagues or
contributors remains working. And that the interfaces, the one thing
your users care most about, work and look the way they expect them to
look.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Programming on a Non-English Project; best practices</title>
   <link href="http://berk.es/2012/10/05/programming-on-a-none-english-project-best-practices"/>
   <updated>2012-10-05T00:00:00+02:00</updated>
   <id>http://berk.es/2012/10/05/programming-on-a-none-english-project-best-practices</id>
   <content type="html">&lt;p&gt;As a Dutch webdeveloper, I see mostly Dutch websites being built. And I
see many team struggling with how to do this well. I developed a set of
best practices, which I want to share and discuss.&lt;/p&gt;

&lt;p&gt;If your entire teams' first language is English, this post is probably
not for you. And if you are the kind of person who thinks &quot;are there
actually people out there who write Russian code, Swedish documentation
or use Dutch classnames? WTF?&quot; this post is probably not for you either
(But take this with you before leaving: there are. A lot).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; as &lt;a href=&quot;http://www.reddit.com/r/programming/comments/10zffv/programming_on_a_none_english_project_best/c6hy06s&quot;&gt;offbytwo, a
redditor&lt;/a&gt; kindly points out, it is
non-English, not &lt;em&gt;none-English&lt;/em&gt;. Guess that proves that I am none-English
(sic) to begin with :).&lt;/p&gt;

&lt;h2&gt;The Client.&lt;/h2&gt;

&lt;p&gt;They will most probably communicate in your local language. Not in
English. They want to produce their specifications, requirements and even
designs in their native language. This input is therefore not-English.&lt;/p&gt;

&lt;p&gt;It makes no sense trying to enforce this in English, that only creates
friction in an area (feedback, requirements) where you want as little
friction as possible. If anything, you may want to designate one person
to translating this input before it goes into your other systems. But
often it is good enough to simply put the non-English input as-is into
your project.&lt;/p&gt;

&lt;h2&gt;The Team.&lt;/h2&gt;

&lt;p&gt;You might have one or two developers whom you have to communicate in
English with. Either because you outsourced stuff, or because you are
collaborating in Open Source, or because you have people on your team
from abroad.&lt;/p&gt;

&lt;p&gt;But even when you don't, having all the technical communication in
English pays off: all your developers understand and can write some
English; but not all your potential developers speak your native tongue.&lt;/p&gt;

&lt;p&gt;Standardising on English now, allows you to pull in such developers
later. Standardising on your native language now, shuts a giant pool of
potential collaborators out. Forever.&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;All code should be English. Always. No exceptions allowed.
Programming-languages, libraries and tools are all in English, so if
anything, using your native language will only add inconsistency.
Sure, if there is an all-Dutch programming-language, you would be
writing all your code in Dutch. But such languages are rare or
nonexistent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class GebruikersController extends Controller {
  //Maakt een nieuwe gebruiker aan op basis van zijn identifier.
  def __construct($gebruikers_id) {
    //@TODO: maak de eigenlijke code
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There. I just used 5 pure English words and statements, 2 mixed words
(&lt;em&gt;Gebruikers&lt;/em&gt;-Controller and &lt;em&gt;gebruikers&lt;/em&gt;-id_entifier_) and a load of Dutch words that
no-one but a Dutch speaking person can understand.&lt;/p&gt;

&lt;p&gt;All your objects, classes, variables, function and whatnot should be
English. Always. When you are programming a shop, you don't call that
&lt;code&gt;class InnKaupaKörfu &amp;lt; ActiveRecord&lt;/code&gt; but rather just &lt;code&gt;Cart &amp;lt;
ActiveRecord&lt;/code&gt;. Code, databasetables, tools and whatnot should be in one
language only. Defaulting to English.&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;p&gt;When your code is all in English, a large part of your documentation
will automatically be in English. It makes no sense, therefore to have
the other documentation in another language.&lt;/p&gt;

&lt;p&gt;Just default to English.&lt;/p&gt;

&lt;p&gt;With one exception, being the input you receive from your clients. If
this input is passed on to English speaking colleagues, you will need to
translate it, but in that case, keep the original with the translation.
In that case, you will need to appoint one person, e.g. a project
manager or lead developer with the task to do the translating. And
you'll need budget for that, obviously.&lt;/p&gt;

&lt;h2&gt;Configuration and Integration&lt;/h2&gt;

&lt;p&gt;In tools like Drupal, a lot of the building is done trough UI's within
Drupal itself. Things like fields (title, body, images, colors etc.) on
articles, article-types and even entire pages (views) are configured
trough the interface.&lt;/p&gt;

&lt;p&gt;Often these are made in the native tongue. That is not a good practice.
Just give all these components English names. So don't call the
color-field on your &quot;product&quot;, &lt;em&gt;couleur&lt;/em&gt;, or &lt;em&gt;χρώμα&lt;/em&gt;. But rather just color.&lt;/p&gt;

&lt;p&gt;The reason is that in situations like these with Drupal, but also
Expression-engine, Typo3 and such, these names are then used all over
the place. Ranging from database names, column-names to variables and
autogenerated classes.&lt;/p&gt;

&lt;p&gt;It is very ugly having to work with template-files called &lt;code&gt;overzicht_block_content&lt;/code&gt; or &lt;code&gt;les_plus_lus_page_header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because these names trickle through to your code, keep them English.
Else you will be forced to break rule #1: all code is in English.&lt;/p&gt;

&lt;h2&gt;Interface strings&lt;/h2&gt;

&lt;p&gt;Quite often, you will be building your application in one language only.
It makes little sense to write it in English first, when you are 100%
certain that it will never be used in English.&lt;/p&gt;

&lt;p&gt;In that case, simply don't use the full text for the interface. Rather
than &lt;code&gt;&quot;Thank you for registering&quot;.t&lt;/code&gt;, simply use tokens or symbols:
&lt;code&gt;&quot;registration.messages.thankyou&quot;.t&lt;/code&gt;. Many languages and platforms
already require this. But some have the default standards to write the
full texts throughout your application. In that case, just ignore that
standard, when English is too much hassle. Anything is better than
having your code filled with pieces like &lt;code&gt;&quot;ขอบคุณสำหรับการลงทะเบียน&quot;.t&lt;/code&gt;.
Only a Thai developer has any idea what is going on there; whether it is
one word, two, a sentence or a token?&lt;/p&gt;

&lt;p&gt;Obviously, this means using some kind of translation framework. But
nearly every language and platform has these either built-in or as
default add-on. And if not, you are probably working with the wrong
tool, considering you are building a localized application in the first
place.&lt;/p&gt;

&lt;h2&gt;Revision control&lt;/h2&gt;

&lt;p&gt;While many teams do adhere to the guidelines that code, and everything
around it is English, their commit-messages are local.&lt;/p&gt;

&lt;p&gt;The funny thing, however, is that I have never seen a team write
&lt;em&gt;only-Dutch&lt;/em&gt; commit-messages. They often mix English messages with Dutch.
And when upstream software is English, you'll see that even more.&lt;/p&gt;

&lt;p&gt;In all cases, it is best  to just use English for commit-messages. For
one, because you will be referring to (English!) code in the messages,
but also, because mixing English and non-English requires more mental
energy from the reviewer, when she or he has to toggle all the time.&lt;/p&gt;

&lt;p&gt;There is only one reason to write commit-messages in your native tongue:
when otherwise people don't write them at all. &lt;em&gt;Anything&lt;/em&gt; lowering the
barrier that makes people write good messages is good. &lt;em&gt;No&lt;/em&gt;
commit-messages is definitely worse than &lt;em&gt;non-English messages&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Bug tracking&lt;/h2&gt;

&lt;p&gt;When bugs are only managed within the team, just stick to English here
too. You already write most of your documentation in English, your
commit-messages in English and obviously your code too. Why then, write
your bugs in another language. It only adds inconsistency and might
(will!) even lead to confusion and more bugs. Like when the
shopping-cart is called &quot;shopping-cart&quot; all over your product, but
suddenly a bug-report mentions that the &quot;&lt;em&gt;ostukorvi&lt;/em&gt;&quot; is not working.
Suddenly! Confusion over already established concepts like &quot;the
shopping-cart-icon&quot;, versus the &quot;shopping-cart-process&quot;.&lt;/p&gt;

&lt;p&gt;Only when you clients write bug-reports, should you leave them in your
native tongue. Here too, you want to remove any friction from your
client submitting reports (you do, don't you?).&lt;/p&gt;

&lt;p&gt;I've seen three successful methods here:&lt;/p&gt;

&lt;p&gt;The Bug-reporting was closed for
the client, they emailed issues to their contact. The contact then
translated it to English &lt;em&gt;and&lt;/em&gt; translated it to an actual usable
bug-report (i.e. turn &quot;problem with site, clicking on header not well&quot;
into &quot;JS-overlay placing DIV over clickable area in header&quot;). Two wins.&lt;/p&gt;

&lt;p&gt;The Bug-reports were made in Dutch and followed up in Dutch too. But
from there, the person working on it translated everything. In
commit-messages, when referred to an issue the title was quoted. Like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;Fixed issue 1337 &quot;Problemen met video. METEEN REPAREREN!!!&quot; by
adding new CDN-urls to javascript for players.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bug-reports were made in a separate environment and followed up in an
English-only workflow. Feedback and updates for the clients were in
Dutch, in the &quot;clients-issue-tracking&quot;, yet in-house everything remained
English.&lt;/p&gt;

&lt;p&gt;What do you think? Is English bringing your productivity down?
Do you consider your cultural heritage important enough, to decide
to write code in your native tongue? Are you in a team where people
don't speak a word of English? (and how can they program, in that case?)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>After almost twelve years of Drupal, I am saying goodbye</title>
   <link href="http://berk.es/2012/10/01/farewell-drupal"/>
   <updated>2012-10-01T00:00:00+02:00</updated>
   <id>http://berk.es/2012/10/01/farewell-drupal</id>
   <content type="html">&lt;p&gt;Over &lt;a href=&quot;https://drupal.org/user/1783&quot;&gt;eleven years&lt;/a&gt; ago, I got &lt;a href=&quot;https://drupal.org/user/2663&quot;&gt;involved in Drupal&lt;/a&gt;, after running two
personal blogs on Drupal. A few years later, to my surprise, I found myself to be
amongst the first few people to &lt;a href=&quot;http://web.archive.org/web/20040606050259/http://drupal.org/services&quot;&gt;offer commercial and professional Drupal services&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And boy, it was a ride. With no IT-education, other than
&lt;a href=&quot;http://webmonkey.com&quot;&gt;webmonkey&lt;/a&gt;, the fantastic Drupal-community allowed me to
piggyback and stand on shoulders. Great, strong shoulders.&lt;/p&gt;

&lt;p&gt;I grew. I learned. And I learned how to program somewhat decent.
I then, gradually I learned there were books and systems that allowed one to program &lt;em&gt;The Proper Way[tm]&lt;/em&gt;.
Mostly because I was rolling out Drupal in
Real-world projects every day, bumping into issues that, as I found, had
been &quot;solved&quot; ages ago in academical books and studies. I learned that
&quot;talk is silver, code is gold&quot; is simply not true. Code that is
discussed, thought about, refactored, and then discussed again, is of a
much higher quality than code that is &quot;just done&quot;. I learned that
properly architecturing something, turns it into far more than gold. I
often complained about &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Blinders&quot;&gt;horse-tack&lt;/a&gt;-coding&quot; in Drupal.
Where working on small, isolated issues was (and is) always preferred over refactoring larger parts. This has led to a lot of repetition, inconsistent APIs and very unpredictable behaviour. I learned about encapsulation, separation of concerns, loose-coupling and more such well-known principals. All of which Drupal lacks, or ignores. I had the feeling I grew faster than Drupal.&lt;/p&gt;

&lt;p&gt;I also came across &lt;em&gt;Ruby on Rails&lt;/em&gt; and found that there were actually real,
technical solutions for several of my gripes with Drupal. We are talking 2005,
by now. Remember, I have no educational background. At first, I knew
nothing about  OOP, other than what the great folks, the great shoulders
of the Giants in Drupal, told me about it on IRC and in forums.&lt;/p&gt;

&lt;p&gt;I learned a lot of new terms, methods and concepts. They were, and still are, an eye-opener.
MVC was something that actually existed! Something actually existed, actually got designed and invented, solely to solve most of the issues I had with Theming in Drupal! And these design-patterns were not just to make technical people happier (or something to flamewar about), they actually
solve many management and planning-issue too.&lt;/p&gt;

&lt;p&gt;But, I had also grew into something of a local Drupal-expert and goto-guy. Serving
most of the Netherlands as freelancer and Drupal consultant payed for my
mortgage. I got called in on many failing Drupal-project. Got to help
large companies and organisation in their swich to Drupal.&lt;/p&gt;

&lt;p&gt;But toggling between Rails and Drupal-work, only made me see all the issues with Drupal
more clearly: there was a lot of work for me to do, in order to make
Drupal something as elegant and nice to work with as Rails. In an ever
growing Drupalcommunity, I decided that my voice and code in this was
only noise; especially since that community &lt;a href=&quot;http://buytaert.net/views-in-drupal-8&quot;&gt;clearly has a different idea
about webdevelopment&lt;/a&gt; than I have.&lt;/p&gt;

&lt;p&gt;Around that time (beginning of 2009), I co-founded &lt;a href=&quot;http://wizzlern.nl/&quot;&gt;Wizzlern&lt;/a&gt;. We developed
training and education for Drupal.
Training people allows you to meet professionals with lots of different backgrounds. People who have formal training in IT. People with much more in-the-field experience than I will probably ever have. And people who are critical. About things in Drupal.&lt;/p&gt;

&lt;p&gt;But developing several training-courses also required me to dive really deep into the what and
the why behind things. I suddenly had to paint the big picture around an
inconsistent and weird API, answer questions like: Why are modules so hard to find? How come there are so few pretty
themes, compared to wordpress? Why is it so much harder to use than
Wordpress? Why can't we find a decent workflow to develop in a team and deploy? Feedback from experienced webdevelopers (in Java, Python, .net and PHP-frameworks) made me realize even more that there was something amiss for me.&lt;/p&gt;

&lt;p&gt;It became harder for me to defend that, harder to explain my passion for the system, its quircks and its community. They say, that once you have looked in the kitchen of your favorite restaurant, you never want to eat there again. That could be the case here. Or maybe it is because I am a vegetarian.&lt;/p&gt;

&lt;p&gt;The realisation came slow. It took years. Drupal actually wants to be
what it is now, not what I thought, or hoped, it wanted to be. My idea of &lt;em&gt;a toolkit, developed by webdevelopers, for ourselves, wedevelopers, to create ever better websites for our clients&lt;/em&gt;, was a not going to be found in Drupal.&lt;/p&gt;

&lt;p&gt;Dries's comment on Copenhagens' keynote made this even more clear for
me. He pointed out that Drupal should not focus on developers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Drupal made the webmaster redundant. In future it will make the webdeveloper
redundant&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, I cannot find the exact quote, this one is from my vague memory and scriiblish note I made back then. I can only find &lt;a href=&quot;http://www.youtube.com/watch?v=RGfQHu4QA6c&amp;amp;t=2m19s&quot;&gt;Dries answering my question&lt;/a&gt; about that quote. So his exact words are most probably different from what I phrased here!&lt;/p&gt;

&lt;p&gt;However, the bigger picture became more clear to me: something we have seen happening in Drupal for a while
now: It focuses on the click-and-point development of website, not on the
programming of a website. It really wants to be a CMS, albeit a flexible one. Rather than what I consider the future: a developer-platform that allows me &lt;a href=&quot;http://labs.talkingpointsmemo.com/2011/07/the-twilight-of-the-cms.php&quot;&gt;to build a CMS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Development in with click-and-point, offers little challenge for me. Learning, where and how to find, evaluate
and configure the umpteenth gallery-slider-view-plugin offers no challenge, nor satisfaction.
I also found this approach of clicking together a site, to not satisfy
my clients; not being able to deliver 100% what they wish. And I found
it inefficient: especially when my programming skills grew. I could
churn out a few objects and a hook or two that output the exact JSON I
want, much faster than I would ever be able to click together some
&lt;a href=&quot;https://drupal.org/project/services&quot;&gt;Services&lt;/a&gt; configuration.&lt;/p&gt;

&lt;p&gt;In my search to more challenging Drupal-work, I helped several large
sites, to solve some of their performance-issues. Helped many project with
their problematic Drupal-development and -deployment. I taught many developers how
to write themes, modules and how to deploy. Unfortunately the challenges
did not revive my love for Drupal, but only took me further from it. I
came to realize that most of the problems stem from the way the Drupal
community prefers to do stuff. I even wrote some &lt;a href=&quot;http://webwereld.nl/opinie/106086/drupal-verkeerde-keus-voor-overheidssites--opinie-.html&quot;&gt;controversial
opinions on that (Dutch)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I decided that it was time to make a shift. Find new projects
outside of Drupal, work on some pet-projects and see if I found more
challenges and opportunities to grow again, outside of Drupal.
After nearly one year of flipping between Drupal and other projects made me
realize that I had to cut all ties, in order to progress. That Drupal
was never going to be the developer-tool I hoped it to become.&lt;/p&gt;

&lt;p&gt;I will put down all my Drupal-work and finish the remaining
few of my running Drupal-projects. Both those with clients, and those things like a stable release of tagadelic2 for Drupal 7. I will obviously announce those here.&lt;/p&gt;

&lt;p&gt;Moving on to &lt;a href=&quot;http://nodejs.org/&quot;&gt;exciting&lt;/a&gt; new &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;technologies&lt;/a&gt;, &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;tools&lt;/a&gt; and &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;development platforms&lt;/a&gt; that fit better with my workflow and programming-experience.&lt;/p&gt;

&lt;p&gt;Goodbye, it was a fantastic bunch of shoulders to be allowed to stand on!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>git deploy or: How I Learned to Stop Worrying and Love Deployment</title>
   <link href="http://berk.es/2012/08/03/git-deploy-or-how-i-learned-to-stop-worrying-and-love-deployment"/>
   <updated>2012-08-03T00:00:00+02:00</updated>
   <id>http://berk.es/2012/08/03/git-deploy-or-how-i-learned-to-stop-worrying-and-love-deployment</id>
   <content type="html">&lt;p&gt;One of the most surprising things I learned when moving away from
Drupal-development towards Rails development, is the impact of fast and
low-barrier deployment.&lt;/p&gt;

&lt;p&gt;We all know that &lt;a href=&quot;http://www.slideshare.net/eaton/drupal-deployment-presentation&quot;&gt;Drupal's deployment is severely broken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I always thought fast and low-barrier deployment was just a
nice-to-have, because it would bring down the actual hours spent on deploying. But it gives you so much more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very quick response on client requests.&lt;/li&gt;
&lt;li&gt;The possibility to &lt;a href=&quot;http://www.flickr.com/photos/bertboerland/2217345100/&quot;&gt;fail fast and fail cheap&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Be sure about few regressions and no failures.&lt;/li&gt;
&lt;li&gt;Provide guarantees about uptime.&lt;/li&gt;
&lt;li&gt;Allows for canonical releases&lt;/li&gt;
&lt;li&gt;It allows for more code and less config.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Very quick response on client requests.&lt;/h2&gt;

&lt;p&gt;There is nothing that makes a client happier then sending in a question or request and seeing
it live and online a few minutes later. And nothing pays your bills so well as a deployment.&lt;/p&gt;

&lt;p&gt;If you have contracts that only pay after &quot;the entire project is
finished&quot;, it most certainly includes a deployment. But more often it
requires far more, because &quot;finished&quot; implies that all bugs are fixed
and the client gets (almost exactly) what she asked for. In a waterfall
this means many small releases, often on some internal &quot;acceptance&quot;
site. When you can deliver the bugfixes and improvements faster, you
will finish your project faster; the actual time between your first
preview-delivery and the final one (the one that gets the invoice payed) is much shorter.
This is when you are not working &quot;Agile&quot;. For &quot;Agile&quot;, such
fast-and-often deployments are a requirement.&lt;/p&gt;

&lt;h2&gt;The possibility to Fail Fast and Fail Cheap.&lt;/h2&gt;

&lt;p&gt;If you can push out releases the way my rabbit has babies, you can
afford to have some fail. And because you can release five minutes later, again, you can fix such
a fail with lightning speed.&lt;/p&gt;

&lt;p&gt;A failing release that needs days of fixing, rollbacks and recovery-work
is bad. But when that means that a next release requires even more
planning, people on-call, meetings, and so on, you only make things
worse: the release becomes even more expensive and
cumbersome.&lt;/p&gt;

&lt;p&gt;Being able to quickly recover from a mistake helps the client. She or he
sees less downtime and has to pay less for &quot;deployment-time&quot; and on-call
hosters and sysadmins.&lt;/p&gt;

&lt;p&gt;But it mostly allows you to try new stuff. If some new UI-idea, or a
fancy payment-method can be released with little or no effort, it
becomes less hard for everyone to roll it back, if it proved less
successful then anticipated. It makes the investment in some feature
smaller, and therefore the barrier to simply throw it away when it
fails, much lower.&lt;/p&gt;

&lt;h2&gt;Be sure about regressions and no failures.&lt;/h2&gt;

&lt;p&gt;One condition for fast releases, is that you are certain about its
quality. Most often you will have a test-suite in place to insure yourself against
regressions.&lt;/p&gt;

&lt;p&gt;This allows you to hit a few buttons and when everything turns up green,
you can deploy. With arrogance. You know it will go well. And you know
everything continues working.&lt;/p&gt;

&lt;p&gt;The average Drupal-deployment calls for click-frenzies: developers,
clients and other stakeholders click around on the site manually, for
many hours, to ensure everything continues working.&lt;/p&gt;

&lt;p&gt;A client who sees an unrelated part failing because you bugfixed another
part, is an unhappy client. Even if you can explain that this complex
access-permission-module touches not just the Wiki (where they asked for
some access control) but also the blogs and forums (whom you forgot to
check throughly against the new access-control).&lt;/p&gt;

&lt;p&gt;A client, whom learned to check the
entire, and ever-growing site for failures, on each and every release, is an unhappy (and busy)
client. A developer who manually walks trough the entire site after each
and every change is a very unproductive developer.&lt;/p&gt;

&lt;p&gt;Testing as a security against failures is not a result of fast deployment, but a
requirement to have them. If you want fast deployments you must have
tests.&lt;/p&gt;

&lt;p&gt;But when testing is not an option, at least the fast, and low-barrier
deployment, allows for quick rollbacks and makes such failures much
cheaper.&lt;/p&gt;

&lt;h2&gt;Provide guarantees about uptime.&lt;/h2&gt;

&lt;p&gt;With Drupal, you &lt;a href=&quot;http://drupalcode.org/project/drupal.git/blob/refs/heads/7.x:/UPGRADE.txt#l54&quot;&gt;must bring your site down&lt;/a&gt; during deployment. When you consider that your average Deployment of Drupal takes an hour or
more, then no-one can afford to have several releases each week. Even
when you deploy at 03:00 at night.&lt;/p&gt;

&lt;p&gt;With slow, manual deployments, especially in cases like Drupal's where
the site is offline during the entire process, the downtime is
unacceptable for many. My clients have often postponed releases for
weeks, because of this; because they were afraid to bring down the site
for even one hour. My last bigger Drupal release took four(!) hours of
manual labor. Half a working-day downtime is &lt;em&gt;Not an Option&lt;/em&gt; for most.&lt;/p&gt;

&lt;p&gt;That &quot;fear of downtime&quot; and postponing of releases, is actually the worst part
of it. It means that after developing cool new features, you have to
wait weeks before it can be released (and the project can be finished
and billed).
Or worse: it means that you continue development and squeeze hundreds
more bugfixes and features. Making the release even bigger and harder.&lt;/p&gt;

&lt;h2&gt;Allows for canonical releases&lt;/h2&gt;

&lt;p&gt;Releasing often, means that you can release after each and every change
too. The advantages of that, are huge.&lt;/p&gt;

&lt;p&gt;You detect mistakes faster, rolling back is a piece of cake, and the
overall impact of a change is much easier to grasp.&lt;/p&gt;

&lt;h2&gt;It allows for more code and less config.&lt;/h2&gt;

&lt;p&gt;When a release is cheap, &quot;hardcoding&quot; stuff is cheap too. Instead of
writing large and complex &quot;on vacation-message-systems&quot; in a CMS, you
can simply set a &quot;We'll be back august 31&quot; in the template. And deploy.
Four minutes work.&lt;/p&gt;

&lt;p&gt;Yet when the deployment is hard and expensive, you'll need to allow such
things in your application. Quite recently, did we implement a large and
complex layout-system, with drag-and-drop placement of content-snippets
in a CMS. It had a horrible effect on the system: The design became
extremely complex, it had to
cater every possible placement, performance of the application dropped
to snail-speed, the code behind it all was large and complex and the UI of this &quot;in the CMS layout system&quot; required
large and expensive projects in itself. A disaster.&lt;/p&gt;

&lt;p&gt;Yet the reason behind the request for this layout-system was that the
client wanted to change the placement of some content once or twice a
year. With the required downtime for a deployment, the overall costs of
one such deployment and all the friction that caused, it was no longer an
option to call the development-team twice a year with the request for
changing the layout. Building this large and complex beast was actually
cheaper then having some (frontend)developer change some HTML around
twice a year.&lt;/p&gt;

&lt;p&gt;With fast deployments, the option to hardcode things is a very valuable
option. It not only allows you to keep the application and its backend
simple and lean, it is mostly a self-amplifying-loop: large and complex
configurable systems require hard and often manual labor on releases.&lt;/p&gt;

&lt;p&gt;Which is the main problem in Drupal's deployment: you don't code stuff, you configure
it. And everything configured, cannot be deployed with a
deployment-system, but has to be re-applied manually on a production site.
Off course you can think of many tricks (like exporting and importing the
configuration) but they don't solve the underlying problem:
manually applied configuration is not deployable like code is
deployable. And when that configuration (such as the layout) lives in
the same database as where your content lives, like in Drupal, the
disaster is complete. The chaos is complete when such a manual
configuration (like a new content-field, say &quot;teaser&quot;, gets introduced) requires a change in code too.
Or when a code-change requires manual configuration.&lt;/p&gt;

&lt;h2&gt;Learn to stop worrying too&lt;/h2&gt;

&lt;p&gt;By coding most of the stuff, in a framework that supports automated
testing and has a good migration-framework, you lower all the barriers.&lt;/p&gt;

&lt;h3&gt;Start testing&lt;/h3&gt;

&lt;p&gt;Testing allows you to be sure about what you are to release. No need to
manually click trough the site on some &quot;Acceptance&quot; server, for hours,
before releasing. But a few clicks after every change to assure yourself
(and your client) every that worked in the past, still works.&lt;/p&gt;

&lt;h3&gt;Write migrations&lt;/h3&gt;

&lt;p&gt;Instead of manually inserting stuff after a deployment, you should
automate that.
In rails, I write migrations to change the database. And rake-tasks for
most of the other work, which can then be called from &lt;a href=&quot;http://stackoverflow.com/a/2632865/73673&quot;&gt;within the
migration&lt;/a&gt;. Rake-tasks are
dead-easy to write, mostly because they were designed especially for
automating tasks.
Every task that can be automated, needs no UI, requires no manual labor
and, most importantly can be tested trough and trough.&lt;/p&gt;

&lt;h3&gt;Deploy. Just do it.&lt;/h3&gt;

&lt;p&gt;I write my blog in &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, where publishing a new
article is a deployment. I don't blog that often, but experiencing how
simple and fast deployments are, has brought some of my deployment-fear
down.&lt;/p&gt;

&lt;p&gt;For the other systems, I use
&lt;a href=&quot;https://github.com/mislav/git-deploy&quot;&gt;git-deploy&lt;/a&gt;, which ties the
deployment on top of git. The setup is simple, but the deployment is
ridiculously easy: &lt;code&gt;git push production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I have attempted to rewrite git-deploy for Drupal, but so far, not to
satisfaction. Drush, the Drupal counterpart for Rake is hard to get
configured on each and every (different) production server out there.
And is not very scripting-friendly. But already, it lowers the barrier
so far that deploying becomes fun again.&lt;/p&gt;

&lt;p&gt;Deploy to acceptance, test or development on daily basis. Have at least
one place where you and your entire team deploy several times a day.
It brings experience and makes everyone aware of the benefits of good
automation of the process.&lt;/p&gt;

&lt;p&gt;Once you start deploying five times a week, as opposed to once every two
months, you will be a happier developer. You clients will see far more
progress, faster responses and all your sites will improve much faster.&lt;/p&gt;

&lt;p&gt;What is holding you back from deploying once a day?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Standardising the technology stack (or CMS) is silly</title>
   <link href="http://berk.es/2012/07/02/standardising-the-technology-stack-or-cms-is-silly"/>
   <updated>2012-07-02T00:00:00+02:00</updated>
   <id>http://berk.es/2012/07/02/standardising-the-technology-stack-or-cms-is-silly</id>
   <content type="html">&lt;p&gt;I have been involved in many &quot;we want to move all our websites to one
technology&quot; projects. Mostly Drupal. Mostly where people wanted to move
from a wild range of CMSes, forum-systems, blogging-tools and so on,
written in various languages towards everything-in-Drupal. Smart move,
you might think. Not often, I know now.&lt;/p&gt;

&lt;p&gt;We all like car analogies, when it comes to websites, so here is one: my
1986 Volkswagen T3 camper. A great car. I know its engine (watercooled
1.6 boxer, best engine sound ever), I have gone trough its electrical
cirquits a few times and know them pretty well now.&lt;/p&gt;

&lt;p&gt;I know where to find and buy secondhand or deadstock
replacement parts. I know the support-forums. And mostly, I can safely invest in knowing
the ins-and outs of the car, because I am pretty sure I will buy
Volkswagen Classic T3 Camper Vans for all my needs, forever, from now on. Or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/inline/busje.jpg&quot; alt=&quot;Busje&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Off course not! No-one in his or her sane mind would buy a second such
camper-van to do the daily shopping, or for your daily commute. If I needed
a car for my daily commute, I would not buy a second,  rather expensive, fuel-gobbling,
always-something-needs-fixing van with all the camping-stuff built in,
but one that suits the needs much better, like a small, cheap Japanese car.&lt;/p&gt;

&lt;p&gt;Yet this is the argument that goes when people choose to &quot;Always use Foo for every of our sites from now on&quot;.&lt;/p&gt;

&lt;p&gt;It is different if you are a mechanic, or auto-shop. Analogy for
&quot;webbuilder&quot;. It makes more sense then, to become an expert on one
brand, year, engine-type of car. Specialists have a good place: we, the
consumers and clients will be able to find them when we need them. And I
prefer a Volkswagen mechanic with good Knowledge of the old-timer
transporter vans to fix my car.&lt;/p&gt;

&lt;p&gt;This goes just as well for webdevelopment. A Drupal-only-shop will
be able to provide better sites for their clients,
because they know all the weird little quirks in that CMS inside out.
A dedicated python-developer knows much better where to find the most
up-to-date resources and tools. And so on.&lt;/p&gt;

&lt;p&gt;But as a consumer, as a client, you are much better off to choose your
CMS, framework, programming language as it best fits the site, service or app you
want building. Rather then shoe-horning each and every website you want
into, say, Wordpress. I have seen it all: e-commerce platforms built on
top of Wordpress? Wordpress turned into a JSON-webservice system. Great ideas molded into
nothing, because it had to fit within what Wordpress can offer.&lt;/p&gt;

&lt;p&gt;Do you really want to sacrifice all that, simply because you chose to standardise on that one CMS?&lt;/p&gt;

&lt;p&gt;No, what you want, is the same as with your car, or cars: a good
and trustworthy mechanic who helps you with your old-timer camper-van as
well as your husbands commute-car. Or at the very least, two such
mechanics, one for each. You want trustworthy contractors and
service-managers who can help you with whatever problem you have.&lt;/p&gt;

&lt;p&gt;You want a good partner, or set of partners who can offer you the best
tool and solution for each problem you have. And here is the other
problem: if that partner is a shop who standardised on one technology,
&lt;em&gt;that is what they are going to offer you&lt;/em&gt;. There is no Ruby-on-Rails
developer who is going to say, &lt;em&gt;no, bad idea, you should not hire us.
Rails is really not the best tool for your job&lt;/em&gt;. That is why you need
some basic knowledge.&lt;/p&gt;

&lt;p&gt;Again, like with the car: you walk into a Volkswagen-dealer to ask what
car you need for your new building-company and you will end up with a
Volkswagen. Even though a secondhand Toyota pickup is probably a much
better fit. You need some basic idea of what you want and what fits.
Most people who buy a car, know that newer, smaller cars use less fuel.
And that (in The Netherlands, at least) driving Diesel is cheaper then
Gasoline. Most people also know that an €180k is far more
luxurious then a €400 Suzuki Alto. But you really should avoid
shoehorning all your needs into one system. Because that one system is
best at one area, you end up with a large range of websites that are not
working too well, too expensive (or too cheap); you will end up like me,
commuting to work by train, because doing it with my 1 liter
on 8.5 kilometer fuelgobbling van, is just too expensive ;). You will
end up using technology that is far from the best fit for a certain
problem.&lt;/p&gt;

&lt;p&gt;Only when all your sites are near 100% equal, then it
makes sense to pick one and build every site with that technology.&lt;/p&gt;

&lt;p&gt;And only if you insist on doing everything yourself, in-house, then it
makes sense to standardise on one technology. Just like I would have to
buy a second Volkswagen-van for my commuting, if I would insist on doing
all the maintenance myself; learning the ins-and-outs of a, say, Japanese
Diesel is too much for my simpleton programmer-brain.&lt;/p&gt;

&lt;p&gt;Don't you just hate these car-analogies in IT :) ?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Map capslock to escape in Ubuntu Linux</title>
   <link href="http://berk.es/2012/06/21/map-capslock-to-escape-in-ubuntu-linux"/>
   <updated>2012-06-21T00:00:00+02:00</updated>
   <id>http://berk.es/2012/06/21/map-capslock-to-escape-in-ubuntu-linux</id>
   <content type="html">&lt;p&gt;If you are a Vim user, you probably want the &lt;a href=&quot;http://federico.galassi.net/2012/06/20/the-vim-holy-grail/&quot;&gt;escape key more at hand&lt;/a&gt;. On Ubuntu (And probably every Gnome3 desktop) this is really very easy. It comes with point-and-click tools to map your key to about everything you can think of; and more. If you google this problem, you find all sorts of xmonad CLI commands. They work too, but this is far easier for the stupid Linux-user like me.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;System settings&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Keyboard Layout&lt;/code&gt;.
&lt;img src=&quot;/images/inline/keymap_system_settings.png&quot; alt=&quot;system settings&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Options&lt;/code&gt;.
&lt;img src=&quot;/images/inline/keymap_layout.png&quot; alt=&quot;Keyboard Layout&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;code&gt;Capslock&lt;/code&gt;, choose whatever you want.
&lt;img src=&quot;/images/inline/keymap_options.png&quot; alt=&quot;Options&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I chose &lt;code&gt;switch Escape and Capslock&lt;/code&gt;. So that if I REALLY WANT TO SHOUT AT PEOPLE I STILL CAN! :).
And it forces me to relearn the escape key.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Overheden moeten APIs aanbieden</title>
   <link href="http://berk.es/2012/06/03/overheden-moeten-apis-aanbieden"/>
   <updated>2012-06-03T00:00:00+02:00</updated>
   <id>http://berk.es/2012/06/03/overheden-moeten-apis-aanbieden</id>
   <content type="html">&lt;p&gt;President Obama heeft alle federale overheidsorganisaties in de
Verenigde Staten twee maanden gegeven om &lt;a href=&quot;http://blog.apievangelist.com/2012/06/01/barak-obama-directs-all-federal-agencies-to-have-an-api/&quot;&gt;hun informatie via APIs aan te
bieden&lt;/a&gt;.
Dat getuigt van een goede visie.&lt;/p&gt;

&lt;p&gt;Overheden zijn helaas geen webbouwers. Iedereen kent voorbeelden van
verschrikkelijke websites van overheden. Regelmatig lees je over
dramatisch verlopende ICT-projecten in gemeentes, rijksoverheden en
aanverwanten.  Zo lijkt het bijvoorbeeld de gemiddelde Nederlandse
gemeenteambtenaar maar niet te lukken om simpele zaken als &quot;wanneer
komen ze het oudpapier ophalen&quot; te beantwoorden op hun site.  Vaak moet
je eerst een studie doen naar de interne inrichting van die
overheidsorganisatie, om te weten bij welke afdeling, welke
subcontracter of welke semi-overheidsinstelling en welke website je moet
zijn voor die informatie. En weet je aan het einde van je zoektocht meer
over de contracten tussen gemeentes vuilophalers en
paprapluorganisaties, dan over het oudpapierophaalrooster in je zomervakantie.&lt;/p&gt;

&lt;p&gt;Overheden geven soms miljoenen uit aan relatief eenvoudige websites.
Enorme projecten met enorme overheadkosten, supercomplexe interne
functionaliteit en de vreemdste interne eisen. Zaken waar jij als
eindgebruiker van zo'n website in het beste geval niks van merkt, maar
meestal zult ervaren als ridicuul lastige navigatie en vreemde indeling.
De oorzaak van de ridicule kosten, is dan ook de ontwikkeltijd.
Meestal duren zulke bouwprojecten maanden. Of soms zelfs jaren.  En
tegen de tijd dat die mooie nieuwe desktopsite van het gemeenteloket, de
douane-invoerprijzen-overzichtten of de
werken-aan-de-weg-voorlichtingssite af is, wil iedereen met een
smartphone je site lezen.  Overheden, log en traag als ze zijn, kunnen
het web gewoon niet bijbenen.&lt;/p&gt;

&lt;p&gt;Het mantra waarmee je de afgelopen regeerperiodes doodgegooid werd is
juist hier erg op zijn plaats:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Laat het aan de markt over.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Dat is wat Obama nu juist doorziet en verplicht doorvoert. De
overheidsinstelling moet zijn of haar data beschikbaar maken via API's.
Waarmee &quot;de markt&quot;, snelle webontwikkelaars, slimme app-bouwers of heel
onverwachte andere instanties de content kunnen gebruiken en opnieuw
aanbieden. Een voorlichtingssite over wegwerkzaamheden is aardig.
Maar die data direct in je TomTom is nog veel handiger. Of een mashup
die die data samen met treintijden en parkeerplekken bij stations aanbied,
is voor anderen nóg handiger. De onbegrijpelijke in- en uitvoerprijzen van de
douane direct in je e-commerce pakket ingebouwd. Belastingoverzichten
direct in je accountant-pakket.
Natuurlijk zou rijskwaterstaat allemaal apps, integraties en mashups kunnen (laten) bouwen. Maar
als ze hun wegwerkzaamheden gewoon via APIs (XML, SOAP, JSON)
aanbieden, dan kan iedereen daarmee aan de slag. En kan een snelle
app-bouwer dat voor hun doen. Die app-bouwer kan haar AnaarBeter App beter maken,
geld ermee verdienen, en het belastinggeld hoeft er niet voor ingezet te
worden. Iedereen wint.&lt;/p&gt;

&lt;p&gt;In de VS komt daarbij nog een ander belangrijk element kijken: alle door
overheden gemaakte data is publiek domein. Dus er zit geen auteursrecht
op. Je mag het gebruiken, verkopen, hergebruiken en verspreiden
zonder dat je daarvoor nog een keer hoeft te betalen. Het idee is even
simpel als logisch: De belastingbetaler die al betaalt heeft, voor het maken
van voorlichtingsfilmpjes, informatie, rapporten en wat dies meer zij,
is gewoon eigenaar van dat werk.&lt;/p&gt;

&lt;p&gt;Want alleen via APIs aanbieden is niet genoeg, je moet ook wettelijk
regelen dat de informatie in die APIs gebruikt mag worden. Ook in
commerciële toepassingen en in andere vormen dan waarop je het aanbied.&lt;/p&gt;

&lt;p&gt;Natuurlijk kost het verplicht aanbieden van APIs ook geld. Nóg een eis
waaraan een website moet voldoen. Wordt het project nóg duurder. Maar
daarna kost snelle doorontwikkeling niks meer. Sterker nog, in veel
gevallen zou een overheid eigenlijk niets meer dan een API hoeven te
bouwen. Geen sites laten ontwerpen. Kunnen ze afzien van dure en
ingewikkelde content managementsystemen met plaatjes en ondersteuning voor filmpjes.
Maar gewoon een simpele SOAP-interface. En een PDFje erbij hoe je dat
kunt gebruiken.&lt;/p&gt;

&lt;p&gt;Dus, overheden, geef ons nou gewoon je informatie in een herbruikbaar
formaat, in plaats van op onhandige, peperdure websites.
En laat het aan de markt om er een mooie site omheen te
bouwen; laat Google het indexeren en op hun kaarten weergeven,
TV-producten het in je TV importeren of app-bouwers het in hun
specialistische pakketten opnemen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3D printen walst de auteursrechten discussie binnen</title>
   <link href="http://berk.es/2012/05/31/3d-printen-walst-de-auteursrechten-discussie-binnen"/>
   <updated>2012-05-31T00:00:00+02:00</updated>
   <id>http://berk.es/2012/05/31/3d-printen-walst-de-auteursrechten-discussie-binnen</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.wired.com/design/2012/05/3-d-printing-patent-law/&quot;&gt;Wired&lt;/a&gt;
heeft een verhaal over Thomas Valenti. Als fan, ontwierp en
printte hij poppetjes voor &lt;a href=&quot;http://www.games-workshop.com/gws/&quot;&gt;Warhammer&lt;/a&gt;. En deelde hij die op &lt;a href=&quot;http://www.thingiverse.com/tag:wargame&quot;&gt;Thingiverse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En dat mag niet. De advocaten van Games Workshop, de Britse fabrikant
van het spel, hebben de bestanden waarmee je de poppetjes kon printen,
offline laten halen. En zo begint de &quot;oorlog&quot;.&lt;/p&gt;

&lt;p&gt;Een fabrikant als Alessi, die plastic prullaria mooi maakt; en zo een
zoutvaatje voor enkele tientjes per stuk weet te verkopen, moet een
ander businessmodel gaan zoeken. Net als fabrikanten van poppetjes voor
spelletjes, dus.&lt;/p&gt;

&lt;p&gt;Tot enkele jaren terug moest je flink investeren, mallen maken,
dure spuitgietmachines aanschaffen, enzovoort, om die Alessi zoutvaatjes
na te maken. Dat deden en doen, vast een heel aantal fabriekjes (in China),
maar met wat moeite en een klein legertje advocaten, kun je deze namaak
best uit de lokale blokker weren. Duizenden fabriekjes die namaak maken,
is heel wat anders dan tientallen miljoenen mensen die datzelfde doen.
Ooit kon de muziekindustrie de paar professionele cd kopieerders nog wel
aanpakken. Tot de Cd-brander thuis en daarna Napster en trawanten.&lt;/p&gt;

&lt;p&gt;Een jaartje of anderhalf, en iedereen kent wel iemand met een 3d printer
in de bijkeuken. Je hebt er nu al kant-en-klare voor &lt;a href=&quot;http://www.solidoodle.com/&quot;&gt;onder de $500&lt;/a&gt;.
En met twee rechterhanden en een soldeerbout ben je al voor twee of driehonderd
euro aan het printen. Nog niet een jaar geleden was de enige optie, die
zelfmaak-optie en kostte zo een printer aan materiaal alleen al een paarduizend
euro.&lt;/p&gt;

&lt;p&gt;3D-printen kan zich nog lang niet meten met de bekende Chinese
plastic-perser, die rubberen eendjes, pennen en alle andere plastic
spullen uitspuugt voor een paar cent per kilo. En dat zal het
waarschijnlijk ook nooit kunnen. Net zoals je de geboortekaartjes ook
bij de drukker laat drukken, ondanks die kleurenprinter thuis op je
bureau.&lt;/p&gt;

&lt;p&gt;Maar voor maatwerk, onderzoek, kunst en dus ook dure design-prullen is
het een zeer geschikt apparaat. &lt;a href=&quot;http://www.elsevier.nl/web/Artikel/163531/Ondernemen-Eureka-Maar-wat-dan.htm&quot;&gt;Bedrijven&lt;/a&gt; die daarop draaien
, of zich beschermd denken door octrooien op hun triviale producten, die
moeten vernieuwen, of net als de muziekindustrie, ten onder gaan aan de
revolutie die het Internet ons heeft gebracht.&lt;/p&gt;

&lt;p&gt;Wat die bedrijfsmodellen zijn? Leer van de Open Source
softwarefabrikanten: verkoop niet het product, maar de diensten
eromheen. Of verkoop extra's, zoals service, eenvoud, garantie en
doorontwikkeling. Of een van de andere geweldige ideeën waar nu nog
niemand zelfs van durft te dromen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Leave some Ink in the Well</title>
   <link href="http://berk.es/2012/05/30/leave-some-ink-in-the-well"/>
   <updated>2012-05-30T00:00:00+02:00</updated>
   <id>http://berk.es/2012/05/30/leave-some-ink-in-the-well</id>
   <content type="html">&lt;p&gt;Many writers know Hemingway's tip:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Leave some water in the well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;From
&lt;a href=&quot;http://artisticwhim.com/blog/2005/12/leaving-a-little-ink-in-the-well/&quot;&gt;Impulse&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It’s a great idea: stop work­ing when you’re writing your best and it’s easier to start writing next time.
You leave the work excited to return. You only face the dreaded Blank Page in the middle of your writing session, fresh from a success.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I found the same goes for Coding, albeit for different reasons. And, as
a coder, I created a silly little script to help me with that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/inline/ink.png&quot; alt=&quot;Screenshot showing where I left the ink in the
well&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;You get disturbed.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I&lt;/em&gt; get disturbed a lot, during work, anyway. When finally you have mapped the
entire stack of some weird application in your brain, your phone rings,
alarms for some server start blinking, or you get some new twitter reply.
Woosh, the effort is lost; the energy put into mapping everythin in your
brain: wasted.&lt;/p&gt;

&lt;p&gt;But even more often you have planned interuptions. Such as the end of
the day, lunch, or some meeting.&lt;/p&gt;

&lt;h2&gt;You have many projects intermingling.&lt;/h2&gt;

&lt;p&gt;Ideally, as a programmer, you work on one problem at a time. Lucky
people work on one technology, in one environment with only one language
and toolset.&lt;/p&gt;

&lt;p&gt;Luckily I don't, because that would bore me to death. I love working on
multiple projects simultaneaously. Most of us do, if the average github
commitlog is any proof.&lt;/p&gt;

&lt;p&gt;So, you are working on some problem in, say, Drupal. And suddenly your
time is, up, or a more urgent, say, CSS-issue needs solving. Or some
server configuration needs sorting out, because backups or builds are
failing.&lt;/p&gt;

&lt;p&gt;What do you do? Commit the unfinished state? &lt;code&gt;git stash&lt;/code&gt; it? just leave
it as it is?&lt;/p&gt;

&lt;p&gt;You could leave some ink in the well. Using a simple &lt;code&gt;@INK&lt;/code&gt; marker.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;by_ranking&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @INK: the rank attribute is not updated or filled&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#       in the database, it seems. @TODO: make a &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#       migration to add this field to the database,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#       then an after_update hook to actually fill this value.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A simple '@INK' with a comment. &lt;code&gt;@INK&lt;/code&gt; is a different marker then
&lt;code&gt;@FIXME&lt;/code&gt; or &lt;code&gt;@TODO&lt;/code&gt;. Actually, &lt;code&gt;@INK&lt;/code&gt; is &lt;em&gt;also&lt;/em&gt; a TODO.&lt;/p&gt;

&lt;p&gt;Then, whenever you pick up a project, you look for the @INK, have your
&lt;em&gt;aha-moment&lt;/em&gt; and can jump right in where you left.&lt;/p&gt;

&lt;p&gt;The only problem I have with this, is when you get disturbed, you often
don't have the time to dump your thoughts and mental-state into such a
comment. But telling the person behind you to &quot;wait a sec till I finish
this sentence&quot; is not too strange.&lt;/p&gt;

&lt;p&gt;Some rules apply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There can be only one &lt;code&gt;@INK&lt;/code&gt;. Ever. (A project can have many &lt;code&gt;@FIXME&lt;/code&gt;'s or
&lt;code&gt;@TODO&lt;/code&gt;'s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@INK&lt;/code&gt; marked code may never be pushed to other people's or a central
repository. They are your private markers.&lt;/li&gt;
&lt;li&gt;Whenever you open a project, you &lt;em&gt;must&lt;/em&gt; search for the ink first. Then
either remove it, replace it with a TODO or start where you left.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And with a simple script, you can find your ink in the well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-- Last four commits --&amp;quot;&lt;/span&gt;
git log --graph --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s1&quot;&gt;&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39;&lt;/span&gt; --abbrev-commit --date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;relative -n4
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-- Git status --&amp;quot;&lt;/span&gt;
git status -s
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-- The INK --&amp;quot;&lt;/span&gt;
ack-grep -C 4 &lt;span class=&quot;s2&quot;&gt;&amp;quot;@INK&amp;quot;&lt;/span&gt; --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It gets some context with two git commands, one to render a short,
&lt;a href=&quot;http://www.jukie.net/bart/blog/pimping-out-git-log&quot;&gt;pretty git log&lt;/a&gt;,
to learn what you did last, before you left the project.
The other to show the changes in the repository: uncomitted, changed and
removed files and such.
And the last shows you where you placed the &lt;code&gt;@INK&lt;/code&gt; marker, with a few
lines of context.&lt;/p&gt;

&lt;p&gt;Instead of &lt;a href=&quot;http://betterthangrep.com/&quot;&gt;ack-grep&lt;/a&gt;, you can use &lt;code&gt;grep&lt;/code&gt; if
you prefer. I'ts just slower and needs additional &quot;--recursive *&quot;
parameters.&lt;/p&gt;

&lt;p&gt;There, it works very &lt;code&gt;@INK [berkes wo may 30 15:09:51 CEST 2012]: write some catchy finishing line; the postman is ringing at the door&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DrupalJam presentatie over Microframeworks</title>
   <link href="http://berk.es/2012/05/25/drupaljam-presentatie-over-microframeworks"/>
   <updated>2012-05-25T00:00:00+02:00</updated>
   <id>http://berk.es/2012/05/25/drupaljam-presentatie-over-microframeworks</id>
   <content type="html">&lt;p&gt;Voor &lt;a href=&quot;http://drupaljam.nl/&quot;&gt;DrupalJam 2012&lt;/a&gt; werd mij gevraagd een sessievoorstel in te
dienen. Het leek me passend om een aan Drupal-gerelateerd onderwerp te
zoeken; welke niet direct over Drupal zélf gaat.&lt;/p&gt;

&lt;p&gt;Vandaar: &lt;a href=&quot;http://drupaljam.nl/sessie/microframeworks-queen-drupal-en-haar-onderdanen&quot;&gt;Microframeworks&lt;/a&gt;. En hoe je deze in een Drupalomgeving of -project kunt inzetten.&lt;/p&gt;

&lt;h2&gt;Update: resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://berk.es/microframeworks/#/this-qr&quot;&gt;De presentatie&lt;/a&gt; (&lt;a href=&quot;https://github.com/berkes/microframeworks/tree/develop&quot;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/berkes/microframeworks-questions&quot;&gt;De voorbeeld applicatie, &quot;questions&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://berk.es/microframeworks/#/voorbeelden&quot;&gt;Overzicht van frameworks voor PHP, Python en Ruby&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Microframenworks: Queen Drupal en haar onderdanen&lt;/h1&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;MobileFooWizards heeft voor ons een iphone-app gemaakt, of we op de
Drupalsite even een JSON-feed kunnen aanbieden van de nieuwsberichten
met de data zoals in dit mailtje staat&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Klinkt als een eitje. Toch? Beetje views klikken, klaar! Maar dan komt
het: hoe bied je mobielvriendelijke plaatjes in die content aan? Hoe
zorg je dat toekomstige versies van de app andere JSON kunnen lezen? Hoe
scherm je het af? Schaalt het wel? Voor je het weet is het een enorm
project, met allerhande afhankelijkheden, deployments enzovoort.&lt;/p&gt;

&lt;h2&gt;Het microframework: eenvoud&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Een goede ontwikkelaar kan niet zozeer alle problemen oplossen, maar kan
ieder probleem opdelen in makkelijk oplosbare, kleine probleempjes.
 - Ik, zojuist&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Microframeworks zijn gereedschappen waarmee je enorm simpele, piepkleine
webapplicaties bouwt.&lt;/p&gt;

&lt;p&gt;Zo een web-applicatie kan perfect met Drupal samenwerken: Het kan Drupal
werk uit handen nemen, voorgekauwde informatie aanbieden enzovoort. Een
ideale onderdaan voor je Drupalsite.&lt;/p&gt;

&lt;p&gt;Door een piepkleine website te bouwen naast Drupal dat bijvoorbeeld één
enkele JSON-feed aanbied kun je Drupal veel werk uit handen nemen. Je
verdeelt je project in onafhankelijke, losse componenten, die allemaal één ding doen en
dat heel goed kunnen.&lt;/p&gt;

&lt;h2&gt;Sessie&lt;/h2&gt;

&lt;p&gt;In deze sessie laat ik verschillende scenario's zien waar een
microframework samen met Drupal een gouden combinatie blijkt.&lt;/p&gt;

&lt;p&gt;We kijken naar het iPhone-app-probleem, maar ook naar hoe we informatie
Drupal ín kunnen krijgen. En we kijken hoe we Drupal kunnen koppelen aan
externe informatie en diensten door er een microframework tussen te
plaatsen.&lt;/p&gt;

&lt;p&gt;In de sessie zal hier en daar wat code voorbijkomen, maar dat is slechts ter illustratie. Uiteraard zul je moeten
programmeren om een microframework in te kunnen gaan zetten; maar in
deze sessie kijken we meer op een afstandje hiernaar.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Een nieuw weblog</title>
   <link href="http://berk.es/2012/05/24/een-nieuw-weblog"/>
   <updated>2012-05-24T00:00:00+02:00</updated>
   <id>http://berk.es/2012/05/24/een-nieuw-weblog</id>
   <content type="html">&lt;p&gt;Zo. Eindelijk. Een nieuw weblog. Mijn oude blog stond op
&lt;em&gt;bler.webschuur.com&lt;/em&gt; en op &lt;em&gt;webschuur.com&lt;/em&gt;. Zo heet ook mijn bedrijf:
&lt;em&gt;webschuur.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Al diverse malen heb ik geprobeerd om alles om te gooien, om na 80% van
het werk erachter te komen dat ik verkeerd bezig was.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;'t is bij de loodgieter dat het kraantje lekt.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Mijn blogs &lt;em&gt;bler&lt;/em&gt; en &lt;em&gt;webschuur.com&lt;/em&gt;, respectievelijk mijn persoonlijke,
Nederlandse en zakelijke Engelse blog, moesten samengevoegd. Waar ze op
draaiden, Drupal moest geheel vernieuwd. En het design moest hoognodig
op de schop. Oh. En ik had een veel cooler domein: berk.es.&lt;/p&gt;

&lt;p&gt;Alle content is gemigreerd, maar nog niet alles is gerepareerd: er
zitten duizenden artikelen die teruggaan tot 2001 in de database. In
allerhande formats, met allerhande extra content, en veel artikelen
bleken al jaren kapot. Dat moet met de hand aangepast gaan worden. Dat
is een klus voor de komende weken.
Alle reacties zijn nog niet gemigreerd. De spam moet er eerst helemaal
uitgefilterd worden en dan moet alles geconverteerd en gemigreerd worden
naar &lt;a href=&quot;https://disqus.com/admin/moderate/&quot;&gt;disqus&lt;/a&gt;. Een hels karwij,
ook voor de komende weken.&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Deze blog draait op &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is
supereenvoudig: het gebruikt een tekstbestandje per artikel en genereert
van al deze bestandjes een site. Die upload je dan. Klinkt ouderwets,
maar is vooral supereffectief: geen CMS, geen database, geen complexe
serversoftware, geen veiligheidsupgrades, mogelijke inbraken in je CMS,
enzovoort. Sneller dan zo een site kun je niet krijgen; veiliger dan zo
een CMS bestaat zelfs in theorie niet; en de eenvoud is onvoorstelbaar.
En het hosten is zelfs op een professionele omgeving zo goed als
gratis.&lt;/p&gt;

&lt;p&gt;Althans, als je tekstbestandjes bewerken makkelijk vind.
Wat technischer: je schrijft de tekst in HTML of in markdown. Dat wordt
dan omgezet naar schone HTML. Je beheert alle tekstbestandjes met een
revisiebeheersysteem (git, in mijn geval) en dat revisiebeheersysteem
zorgt ook voor de deployment; het genereren en uploaden van de site.&lt;/p&gt;

&lt;h2&gt;Waarom geen Drupal?&lt;/h2&gt;

&lt;p&gt;Allebei de sites draaiden Drupal. Beide waren FUBAR: totall loss.
Upgraden ging niet (meer) en oplossen van problemen leverde alleen nog
maar meer problemen op:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spam: Ik heb alle spam-oplossingen voor Drupal geprobeerd, maar met
soms miljoenen (!) spam-posts per dag slippen er altijd een paar
doorheen. 1% van 1miljoen is nog altijd 10000. Als ik soms een weekje
niet keek, had ik honderduizenden spams die toch doorgesijpeld waren:
een versterkend effect: want gepubliceerde spam trekt spammers aan.
&lt;strong&gt;Oplossing&lt;/strong&gt;: een nieuw commentsysteem: Disqus. Dat vergt een
moeilijke migratie.&lt;/li&gt;
&lt;li&gt;Oude modules, oude content: In de loop van de tijd heb ik Drupal
honderden keren geüpdate en iets van zeven keer geüpgrade. Altijd ging
er wel iets kleins mis, of was er voor een module geen upgrade. Het
resultaat is een kapotte database, veel kapotte content en enorm veel
achtergebleven puin. De &lt;strong&gt;oplossing&lt;/strong&gt; is een volledige herbouw. En een
volledige export en import van alle oude artikelen.&lt;/li&gt;
&lt;li&gt;Drupal is enorm zwaar geworden. Veel te zwaar voor een klein blogje.
Dat merk je extra goed als je een miljoen hits van spammers krijgt.
Maar dat merk je ook als het heel eventjes wat drukker is. Mijn
&lt;a href=&quot;https://www.linode.com/&quot;&gt;servertje&lt;/a&gt; kan vijf drupalsitejes aan. Echt
niet meer. Dat is belachelijk: één dedicated VPS voor vijf piepkleine
sites. Upgraden naar Drupal7 van alle vijf zou betekenen dat ik een
grotere of tweede VPS erbij moet bestellen: belachelijk. Of dat ik met
proxies, memcache enzovoort in de weer moet. Voor vijf kleine sites:
belachelijk.
&lt;strong&gt;Oplossing&lt;/strong&gt; bij de oude, beter performende Drupal blijven, of een
ander CMS.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Bovendien had ik wat kleine, simpele eisen aan een nieuw Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML5 (en CSS3) voor de layout.&lt;/li&gt;
&lt;li&gt;Mobielvriendelijk.&lt;/li&gt;
&lt;li&gt;Schone HTML.&lt;/li&gt;
&lt;li&gt;Geen/nauwelijks beheer en veiligheidupdates.&lt;/li&gt;
&lt;li&gt;Tweetalige content.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Drupal7 kan met veel pijn en moeite enigszins schone HTML5 uitserveren.
Maar na 80% van mijn design geïmplementeerd te hebben (en daarvoor een
heel nieuwe theme engine geschreven te hebben) besloot ik dat dit
onzinnig is. Ik kon beter naar iets op zoek dat mij meer controle over
de layout enzo gaf.&lt;/p&gt;

&lt;h2&gt;Rails?&lt;/h2&gt;

&lt;p&gt;Ik heb mijn hele site omgebouwd naar &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;.
De content-migratie was klaar, een mooi spamveilig commenting systeem
was af. En het zat vol met leuke gadgets (zoals een twitter, reddit en
facebook scraper: plaatst reacties aldaar op mijn blog). En het performde bijna net zo
goed als Drupal7. Met wat tweaken zelfs nog beter. Nog even de laatste
20% afronden en klaar.&lt;/p&gt;

&lt;p&gt;Totdat ik wat stappen achteruit deed en nog eens goed naar het project
keek: een vrij groot, zelfgeschreven CMS, op Rails, om een supersimpel
blogje te publiceren. Ik ben gek ook: zelfs die laatste 20% is
waarschijnlijk nog meer werk dan even wat aan Jekyll hacken.&lt;/p&gt;

&lt;h2&gt;Vandaar. Jekyll.&lt;/h2&gt;

&lt;p&gt;En nu weer wat vaker bloggen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A new blog</title>
   <link href="http://berk.es/2012/05/24/a-new-blog"/>
   <updated>2012-05-24T00:00:00+02:00</updated>
   <id>http://berk.es/2012/05/24/a-new-blog</id>
   <content type="html">&lt;p&gt;There. Finally. A new blog. My old blog was found on
&lt;em&gt;bler.webschuur.com&lt;/em&gt; and &lt;em&gt;webschuur.com&lt;/em&gt;. Which is also the name of my
company: &lt;em&gt;webschuur.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For several times, I attempted to rewrite everything, but after 80% of the
work done, I found out was doing it all wrong. And started over again.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;They say the cobbler's children go the worst shod.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My blogs and &lt;em&gt;bler&lt;/em&gt; &lt;em&gt;webschuur.com&lt;/em&gt;, respectively, my personal,
Dutch and English business blog, had to be merged. The CMS powering
them, Drupal, needed a complete rebuild. And it really needed a redesign. Oh. And I had a much cooler domain name: berk.es.&lt;/p&gt;

&lt;p&gt;All content has been migrated, but not everything has been repaired, there
are thousands of articles dating back to 2001 in the database. In
all kinds of formats, with all sorts of extra content, and many articles
were broken for years. The coming weeks, I will have to repair them one
at a time. By hand.&lt;/p&gt;

&lt;p&gt;And the comments are not yet migrated. First, I need to weed out all
spam and then migrate everything to
&lt;a href=&quot;https://disqus.com/admin/moderate/&quot;&gt;Disqus&lt;/a&gt;. A hell of a job.&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;This blog runs on &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is
super simple: it uses a text file for each article and generates
a site out of all these files. Which you then upload. This sounds old fashioned,
but is actually super effective: no CMS, no database, no complex
server software, no security upgrades, no possible intrusions in your CMS,
and so on. Faster than a site so you can not get, as safer than
CMS is not even in theory, and the simplicity is unimaginable. And
hosting it on a professional environment is cheap (or free).&lt;/p&gt;

&lt;p&gt;That is, if you think editing text files is easy.&lt;/p&gt;

&lt;p&gt;More technical: you write the text in HTML or markdown. Which is
then converted to clean HTML. You manage all text files in a
revision control system (git, in my case) and that revision control
 provides the deployment: it generates and upload the site.&lt;/p&gt;

&lt;h2&gt;Why not Drupal?&lt;/h2&gt;

&lt;p&gt;Both sites were running Drupal. Both were FUBAR: totall loss.
Upgrading was not possible (anymore) and troubleshooting or bugfixing
yielded only but more problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spam: I have tried all spamsolutions for Drupal, but with
sometimes millions (!) of spam posts per day there is always some
slipping through. 1% of 1 million is still 10000. Sometimes, after not
looking at my site over a week, I found hundreds of thousands of spams
that still seeped trough: a self-maintaining effect: published spam attracts spammers.
&lt;strong&gt;Solution&lt;/strong&gt;: A new comment system Disqus. This requires a
difficult migration.&lt;/li&gt;
&lt;li&gt;Old modules, old content: During time I have updated Drupal
hundreds of times and upgraded seven times. Always some minor thing
broke; there was no upgrade for a certain module. A table did not update
completely right and so on. The
result is a broken database, lots of broken content and lint. The &lt;strong&gt;solution&lt;/strong&gt; is a complete rebuilding. And
full export and import of all the old articles.&lt;/li&gt;
&lt;li&gt;Drupal has become extremely big and bloated over time. Too heavy for a&lt;/li&gt;
&lt;li&gt;small little blog. You notice this very well when you get a million&lt;/li&gt;
&lt;li&gt;hits from spammers. But also briefly when the site has been busier&lt;/li&gt;
&lt;li&gt;(e.g. a post on Reddit). My
&lt;a href=&quot;https://www.linode.com/&quot;&gt;Tiny server&lt;/a&gt; may power five small drupalsite.
Really, no more. That is ridiculous: a dedicated VPS for five tiny
sites. An upgrade to Drupal7 of all five sites would mean that I have to
order a larger or second VPS: ridiculous; an extra twohundredsomething
Dollar per year for just five tiny sites. Or that I need to start
fiddling with proxies and memcache. For five small sites: ridiculous.
&lt;strong&gt;Solution&lt;/strong&gt; continue with the old, yet better perform-using Drupal,
or find another CMS.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also had some small, simple requirements for a new blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML5 (and CSS3) for the layout.&lt;/li&gt;
&lt;li&gt;Mobile Friendly.&lt;/li&gt;
&lt;li&gt;Fine HTML.&lt;/li&gt;
&lt;li&gt;No / minimal administration and security updates.&lt;/li&gt;
&lt;li&gt;Bilingual content.&lt;/li&gt;
&lt;li&gt;Cheap hosting.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Drupal7 can, with lots of effort, serve somewhat clean, responsive
HTML(5) and CSS3. But after implementing 80% of my design (and
development of an entire theme-engine just for this), I decided that this
is nonsense. So I decided to look for something better, that gives me
full control over the layout.&lt;/p&gt;

&lt;h2&gt;Rails?&lt;/h2&gt;

&lt;p&gt;I had converted my entire site in &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;.
The content migration was finished, a pretty secure commenting system
was done. And it was full of fun gadgets (like Twitter, Reddit and
Facebook scraper: copy the comments posted there onto my blog). And it
even performed nearly as good as Drupal7. With some tweaking even better
then Drupal 5. Just finish the last 20% and release it.&lt;/p&gt;

&lt;p&gt;Then I made a few steps backwards, looked at it from a distance: a rather
large, self-written CMS on Rails, just to publish a super simple blog. I
must be mad: even that last 20% probably costs more work than a few
evenings of Jekyll hacking.&lt;/p&gt;

&lt;h2&gt;There is why. Jekyll.&lt;/h2&gt;

&lt;p&gt;And now some more blogging.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ultimaker 3D printer. </title>
   <link href="http://berk.es/2012/04/02/ultimaker-3d-printer"/>
   <updated>2012-04-02T00:00:00+02:00</updated>
   <id>http://berk.es/2012/04/02/ultimaker-3d-printer</id>
   <content type="html">&lt;p&gt;Yes! Hij is binnen, hij werkt en ik ben dolgelukkig: Mijn &lt;a href=&quot;https://shop.ultimaker.com/&quot;&gt;Ultimaker&lt;/a&gt; 3D-printer.&lt;/p&gt;

&lt;p&gt;[&lt;img src=&quot;http://berkes.openphoto.me/photo/12/create/68f27/600x950.jpg&quot; title=&quot;Ultimaker in actie&quot; alt=&quot;Ultimaker printing black lines of plastic as bottom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://berkes.openphoto.me/photos/tags-ultimaker/list?size=440x292xCR&quot;&gt;Meer Foto's »&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voor diegenen die het concept helemaal niet kennen: dit zijn zelfbouw-apparaten waarmee je (vooral) plastic dingen kun printen. Daadwerkelijke, fysieke dingen. Ik ervan overtuigd dat we aan het begin van een tweede revolutie staan; en ik wil daar uiteraard dolgraag bijzijn.&lt;/p&gt;

&lt;p&gt;Vandaar dus deze aankoop. Na lang zoeken bleek vooral vanwege importheffingen, en mijn zeer geringe ervaring met de materie. de bovengenoemde Ultimaker de beste koop. Bekender is de Amerikaanse &lt;a href=&quot;http://store.makerbot.com/&quot;&gt;Makerbot&lt;/a&gt;, maar die is alles bij elkaar duurder om naar Nederland te krijgen dat onze eigen Ultimaker. De goedkoopste, mooiste, maar ook meest gedurfde viriant printer is de &lt;a href=&quot;http://reprap.org/wiki/Mendel&quot;&gt;Mendel&lt;/a&gt;, uit de series van echte zelfbouwprinters. Gedurfd, want je koopt vooral losse onderdelen (pijpen, schroeven, draadjes, motoren enzovoort) en print dan de printer zélf uit!&lt;/p&gt;

&lt;p&gt;Maargoed. Mijn Ultimaker print. Het zwakste stuk is vooralsnog de software waarmee je alles aanstuurt en converteert; dat blijkt behoorlijk foutgevoelig, heeft versie-problemen, en werkt eigenlijk gewoon niet lekker. Gelukkig heb ik juist daar redelijk wat kennis, dus daar is voor mij nog een taak weggelegd.&lt;/p&gt;

&lt;p&gt;Ik heb nog geen concreet plan. Genoeg ideeën om uit te zoeken, uit te proberen en mee te spelen. Al ben ik juist vooral op zoek naar andermans ideeën. Bijvoorbeeld het koppelen aan e-commerce-software. Of direct de verpakking, met verzendlabels om het &quot;product&quot; heen printen. Misschien software inrichten waarmee je maatwerk kunt printen. Zoals namen of logo's direct vanuit een webshop in het 3Dmodel verwerken. En Windmolens. Fucking zelfprintbare windmolens. Natuurlijk. Waar ik echter vooral naar zoek, zijn nóg meer ideeën. En dan bedoel ik niet meteen een idee voor de zoveelste &lt;a href=&quot;http://www.thingiverse.com/search?q=opener&quot;&gt;leuke flesopener&lt;/a&gt; (mag natuurlijk ook), maar vooral &lt;a href=&quot;http://vimeo.com/16106427&quot;&gt;breder, groter&lt;/a&gt;! &lt;a href=&quot;http://artinfo.com/news/story/761597/redesigning-reality-how-3-d-printing-is-shaping-the-future-of-art-engineering-and-everything-else&quot;&gt;Nicemarkten&lt;/a&gt;, &lt;a href=&quot;http://www.thingiverse.com/search?q=opener&quot;&gt;alimme bedrijfsmodellen&lt;/a&gt;; handige inzet; vooral dingen die door deze 3D-&lt;a href=&quot;http://tpb.piratenpartij.nl/browse/605&quot;&gt;printerrevolutie&lt;/a&gt; opeens wél kunnen, maar die eerst niet konden, niet toegankelijk waren, of gewoon onbetaalbaar.&lt;/p&gt;

&lt;p&gt;Voor al deze ideeën staat mijn printer (en mijn hulp en dus tijd) ook tot jou beschikking. Nu nog gewoon bij mij thuis, maar bij wat animo ga ik op zoek naar een wat meer openbare ruimte. Dus stuur me je idee, of kom het langsbrengen. Of kom gewoon even spelen :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why not to use -dev versions of Drupal-modules.</title>
   <link href="http://berk.es/2012/03/23/why-not-to-use-dev-versions-of-drupal-modules"/>
   <updated>2012-03-23T00:00:00+01:00</updated>
   <id>http://berk.es/2012/03/23/why-not-to-use-dev-versions-of-drupal-modules</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/drupal/comments/r8p2b/to_drupal_newbies_if_youre_not_yet_using_boost_do/&quot;&gt;Cross post from a Reddit Thread&lt;/a&gt;. Comments are most welcome &lt;a href=&quot;http://www.reddit.com/r/drupal/comments/r8p2b/to_drupal_newbies_if_youre_not_yet_using_boost_do/c43zghj?context=3&quot;&gt;there&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us assume that a release is some form of agreement between the developers and her users. Usually a release indicates that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The releasable version is considered in a certain state. A state that can be communicated with the users (stable, beta, alpha, security-fix etceteras).&lt;/li&gt;
&lt;li&gt;The release indicates an immutable point in time and development. Even twenty years from now, you can rewind to release XYZ and find it in the exact same state.&lt;/li&gt;
&lt;li&gt;A release is typically kept forever. Unless, off course, the entire project is removed, that release will exist, with the exactly predictable (and often documented) bugs, shortcomings and other incompatibility. In most complex software projects (and your Drupal-core + 30 contribs is such a project) you will always choose predictability over newness.&lt;/li&gt;
&lt;li&gt;A release often runs trough test-cycles. This will be stated in the projects documentation. Most often trough simple &quot;we are beta, please install and report back&quot;, but sometimes trough entire &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Continuous Integration&lt;/a&gt; cycles.&lt;/li&gt;
&lt;li&gt;Documentation, Readme's, third-party dependencies are most often developed parallel. A release is a point where they are all brought together and synchronised. This can, indeed, easily mean that a -dev version has less bugs then a release. In most situations that is very logical: you make a release. It contains 6 bugs, 3 are solved, not enough for a new release. Now the -dev release contains 3 bugs and the released version 6. To many people this is an indication that the -dev release is &quot;better&quot; then the released version.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Dev versions may (and often are) be end of line versions. I have, for example, worked on a fully OOP, for users entirely backwards compatible, replacement for Tagadelic. (It is on hold, mostly due to my lessening Drupal involvement). If it is released, there will be an upgrade path from the various releases to the new version. But not from each and every nightly-build -dev. This is part of that &quot;agreement&quot;. Dev versions might stop working from one day to another. Often large refactorings mean that features have to pulled out for a few commits, or that entire subsets stop working. A rewrite will break compatibility with other modules for a while, at least. So even if it works now, you simply never know if it will tomorrow. Dev versions are aimed at developers. So all the nice tools to lower the barrier for the larger public, such as installers, integration, end-users documentation and so on, are often neglected during this period. &quot;It does not work -what does not work? -it shows nothing on the installer? -what does the debug-log show you? -the what, I don't know how to look at the log&quot;. Such tickets and emails are all too common and are utter time-wasters. If you don't know how to read and debug code, then a -dev version, being for developers, is not for you. You may try it, but certainly should not expect a smooth ride. And definitely not consume precious developers-time by filing already known- or duplicate bugs :).&lt;/p&gt;

&lt;p&gt;A few more practical reasons not to use -dev versions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have not pinned a point in time and development: there is nothing more time-consuming and infuriating then attempting to find the exact time and date for some arbitrary -dev module in some arbitrary three year old Drupalsite that is handed to you.&lt;/li&gt;
&lt;li&gt;You cannot be certain of proper database updates. They are (or should be) guaranteed between releases, but not between -dev versions. chances are that some untested database change between -dev versions spoils your entire database. And if it can happen, it will happen.&lt;/li&gt;
&lt;li&gt;The state is uncertain: whereas a release has known issues and bugs, a -dev version is in a state of brokenness (or else it could be a release, now, shouldn't it?) which is entirely unknown. Installing a -dev version is a little like trial-and-error debugging and coding: it might get you a working environment. But if you have no idea why it works, you are probably worse off then when you had a none-working environment but knew exactly why it did not work.&lt;/li&gt;
&lt;li&gt;The userbase is small and spread out very thin. There is only one Latest Release, making it the most used version. But there are new -dev version rolled out every night, making the amount of users who run the exact same version as you, very small. This fact, is actually the whole concept behind the &quot;agreement-thing&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt; You know exactly what you get when you pick a released version. You never know what you get or where it may take you, when you pick a -dev.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Several reasons why I prefer Github over Drupal for Hosting my Drupal Projects.</title>
   <link href="http://berk.es/2012/03/23/several-reasons-why-i-prefer-github-over-drupal-for-hosting-my-drupal-projects"/>
   <updated>2012-03-23T00:00:00+01:00</updated>
   <id>http://berk.es/2012/03/23/several-reasons-why-i-prefer-github-over-drupal-for-hosting-my-drupal-projects</id>
   <content type="html">&lt;p&gt;Why I prefer Github over Drupal, a crosspost from &lt;a href=&quot;https://drupal.org/node/1494882#comment-5769558&quot;&gt;an issue on Drupal.org&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I do more then &quot;only Drupal&quot;. Github allows me to maintain all these none-Drupal modules in the same environment. Just another angle to look at the &quot;but it's good to have everything centralised&quot;. It is now centralised for me, the developer; arguably the most important person in a project.&lt;/li&gt;
&lt;li&gt;Collaboration is far easier on Github trough its &lt;a href=&quot;http://help.github.com/send-pull-requests/&quot;&gt;forking and pulling mechanism&lt;/a&gt;. No fiddling with patches, continuous re-rolling them and so forth. The entire experience is just simply a lot better worked out on Github. &quot;It's all about the details&quot;&lt;sup&gt;1.&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;I firmly believe that Drupal should ditch the entire project-hosting. And leave it to the community members to choose where they host: On their own (companies') servers, on Github, Bitbucket, launchpad, whatever rocks your boat. And no, you can &lt;a href=&quot;https://www.ruby-toolbox.com/&quot;&gt;still have&lt;/a&gt; central places to find your modules then. In my believe: when there is a competition between hosters and contrib-search-engines, they will be a lot better then what we have now. ^2&lt;/li&gt;
&lt;li&gt;I care for developers, not users. Users give me little in return (other then high-usage rates and self-esteem). Developers are my main target, for they have the tools and skills to help improve my work. Their &quot;payment&quot; comes in patches, bugfixes, performance-improvements, refactorings and so on. For me, the most valuable payment. Obviously, most developers are users themselves. And many user can become a developer. But in the end, I choose a &lt;a href=&quot;https://github.com/about&quot;&gt;project-manangement-environment aimed at developers&lt;/a&gt;, because they are my main target audience, because in my Open Source Projects, they &quot;pay&quot; best. And so, I prefer to lower the barrier to make such a payment.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the end, It should be for the best for all of us.&lt;/p&gt;

&lt;p&gt;Obviously, Github lacks a few things, most of which are easily solvable due to the distributed nature of Git. Depending on how much Drupal projects I will continue to maintain (I am evaluating that right now), I might release some of my tools which help me here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drupal automatically builds releases. You now need to push to two remotes if you wish nightly builds (the -dev version).&lt;/li&gt;
&lt;li&gt;Update and security infrastructure is built around hosting and maintaining on Drupal.org entirely. You host elsewhere? You won't be able to push out new security releases to your users.&lt;/li&gt;
&lt;li&gt;Drupal has a really strange (and anoyingly &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;incompatible with de-facto standards&lt;/a&gt;) workflow and branching model. Aliasing and simply ignoring most Drupal standards helps a lot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BUT IF IT IS NOT ON DRUPLA.OGR IT IS NOT OFFICIAL!!11onone.&lt;/strong&gt; Sadly a module has to be released on Drupal.org to be taken in consideration in most projects. Personally, I find that smallminded. Since there are &lt;a href=&quot;https://twitter.com/#!/github_drupal&quot;&gt;great projects not on Drupal.org&lt;/a&gt;. But facing the facts: a module has to be on drupal.org, so if you host elsewhere, you still need to host on Drupal.org too. Meaning two environments, twice the fiddling and thrice the amount of Description/readme/changelog copypastig. By hosting on Drupal.org alone, you avoid most of this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1: The most hilarious and sad example is the fact that when I decided to move my tickets over from Drupal.org to Github, I closed the ticket-feature on Tagadelic; you should no longer be able to post tickets there.. But due to some bug, this feature does not work: So now I have to keep replying on tickets on drupal.org, telling people the tickets are closed there. Sigh.&lt;/p&gt;

&lt;p&gt;2: It will also solve another rediculous problem: that of &quot;too much modules&quot;. Right now, the solution to this is to hold back module-development! Hah! Because the mechanism to find The Best Contribs is broken, you simply say: we will stall creation of new contribs: because then people can find the oldest ones best. Edit: due to excessive spamming (my server almost crashed, recieving over a million! spam POSTS per day) comments can be posted &lt;a href=&quot;http://www.reddit.com/r/drupal/comments/r9sjz/several_reasons_why_i_prefer_github_over_drupal/&quot;&gt;over at reddit&lt;/a&gt;. I will reply there.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How the Code Consultant Bot tought me about a potential solution to Drupals' deployment horrors.</title>
   <link href="http://berk.es/2012/03/15/how-the-code-consultant-bot-tought-me-about-a-potential-solution-to-drupals-deployment-horrors"/>
   <updated>2012-03-15T00:00:00+01:00</updated>
   <id>http://berk.es/2012/03/15/how-the-code-consultant-bot-tought-me-about-a-potential-solution-to-drupals-deployment-horrors</id>
   <content type="html">&lt;p&gt;I just learned about the &lt;a href=&quot;https://code-consultant.appspot.com/&quot;&gt;Code Consultant Bot&lt;/a&gt;, a chat-bot version of the &lt;a href=&quot;http://www.codinghorror.com/blog/2012/03/rubber-duck-problem-solving.html&quot;&gt;Rubber Duck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The gist is that by explaining your question to someone (or on Stackoverflow, or to a Duck, or a chat-bot), you think about the question in more abstract, simpler or different ways. It very often solves my problem.&lt;/p&gt;

&lt;p&gt;I took the bot out for a test-drive. Posing my favorite problem to it: &lt;strong&gt;How to properly deploy Drupal without downtime and tedious manual configuration&lt;/strong&gt; (answer: you cannot). Here is the transcript:&lt;/p&gt;

&lt;pre&gt;
berkes@jabber.org 11:20:28
Hello   

code-consultant@appspot.com 11:20:32
Hello, I'm your Code Consulatant
Ever notice how just talking through an issue with a co-worker is enough to help you solve a problem, even if they don't say a word? 11:20:32
Let me help you with your problems so they can keep working. 11:20:33
How do you do.  Please state your problem. 11:20:33
 
berkes@jabber.org 11:20:49
I want to deploy Drupal without downtime.   

code-consultant@appspot.com 11:20:49
What would it mean to you if you got to deploy drupal without downtime  ?   

berkes@jabber.org 11:21:10
then I would not need to take the site offline while rolling out a new release  

code-consultant@appspot.com 11:21:10
You say then you would not need to take the site offline while rolling out a new release  ? 

berkes@jabber.org 11:21:18
yes 

code-consultant@appspot.com 11:21:18
You seem to be quite positive.  

berkes@jabber.org 11:21:43
how would I release a drupalsite without taking the site offline?   

code-consultant@appspot.com 11:21:44
Why do you ask ?    

berkes@jabber.org 11:22:26
because Drupal stores its configuration in the database. The same database that contains the content.   

code-consultant@appspot.com 11:23:09
What database are you using ?   

berkes@jabber.org 11:23:16
MySQL   

code-consultant@appspot.com 11:23:16
You're going to have to tell me more.   

berkes@jabber.org 11:23:32
MySQL relational database   

code-consultant@appspot.com 11:23:32
Is your database well normalized ?  

berkes@jabber.org 11:23:37
yes, it is. 

code-consultant@appspot.com 11:23:37
You are sure.   

berkes@jabber.org 11:23:55
Well, no. You are right, that is part of the proble,    

code-consultant@appspot.com 11:23:56
Are you saying no just to be negative?  

berkes@jabber.org 11:24:27
how would I normalise Drupals database? 

code-consultant@appspot.com 11:24:27
Liquibase would help you manage your database better.
&lt;/pre&gt;


&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LiquiBase&quot;&gt;LiquiBase&lt;/a&gt;. I am not sure about the practical application of this tool, and if it will fit well into a Drupal workflow. But from the description, it tries to solve &lt;em&gt;exactly&lt;/em&gt; the &lt;em&gt;Drupal Deployment Problem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the very least, it helps. &lt;strong&gt;a lot&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rollback database to &quot;tag&quot;&lt;/strong&gt;. Woa. If your deployment fails, whether or not you did that with any of the tools such as &lt;strong&gt;hook_update_N&lt;/strong&gt;, &lt;strong&gt;Features&lt;/strong&gt;, or whatever, there is still no rollback. Yet. Here it is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database diff changelog generation&lt;/strong&gt;. Especially usefull on your development machine: it allows you to record all the changes you made while developing the new release for your site. Even if such a changelog helps you to write a release-script manually, it is very helpful. Did you never forget to set that one checkbox on live, because you forgot you had it checked on your development machine? Causing a Giant Shipment of Fail?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Funny. To learn a new tool from a bot. What is next? &lt;a href=&quot;http://www.goingfaster.com/term2029/skynet.html&quot;&gt;Bots solving our actual solutions for us&lt;/a&gt;?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A better way to variable_get() and t() in Drupal.</title>
   <link href="http://berk.es/2012/03/01/a-better-way-to-variable_get-and-t-in-drupal"/>
   <updated>2012-03-01T00:00:00+01:00</updated>
   <id>http://berk.es/2012/03/01/a-better-way-to-variable_get-and-t-in-drupal</id>
   <content type="html">&lt;p&gt;When programming in Drupal, &lt;a href=&quot;http://drupal.stackexchange.com/questions/23162/using-variable-get-in-multiple-places-without-duplicating-default&quot;&gt;repeating default values in variable_get&lt;/a&gt; and repeating strings in translations, all over the place, is a very strong &lt;a href=&quot;http://martinfowler.com/bliki/CodeSmell.html&quot;&gt;codesmell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been playing with solutions for this, and during my last project decided to take these attempts and make it into a very simple system. A pattern.&lt;/p&gt;

&lt;p&gt;But, first, let us identify the problems.&lt;/p&gt;

&lt;h2&gt;Persistent variables&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Showing &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mymodule_amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pager_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SELECT * FROM {mymodule_items}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mymodule_amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mymodule_amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;there are more&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Not only is there the &lt;em&gt;magic number 20&lt;/em&gt; all over the place, it is a DRY violation all over the place.
In above example, that DRY violation is not very visible, yet, but imagine a module called &lt;em&gt;project_magician_message_center&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;project_magician_message_center_amount_for_&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;project_magician_message_center_request_limit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Just open up your average &lt;em&gt;variables&lt;/em&gt; table in larger Drupalproject and look around. The horror! (And maybe you have been bitten by the length limit of 128 characters?). There is no pattern; just a list of unpredicable names.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;magic number&lt;/em&gt; problem often gets solved by Drupal developers with constants. But as the name suggests,
a constant is constant. And a variable is variable. It is very confusing to read this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MYMODULE_AMOUNT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pager_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SELECT * FROM {mymodule_items}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mymodule_amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MYMODULE_AMOUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Especially when you clearly get 30 items in some list. Which is what happens when a variable gets another value. Suddenly the constant is no longer
used; it acts like a variable. Naming your constants &lt;em&gt;MYMODULE_AMOUNT_DEFAULT&lt;/em&gt; is slightly better, but no real solution.&lt;/p&gt;

&lt;h2&gt;Translations, screentexts.&lt;/h2&gt;

&lt;p&gt;Translations, through &lt;em&gt;t()&lt;/em&gt; act even worse. Some examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World, today is %date&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world, today is %date&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#note the intentional erronous lowercase world.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$actor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Marsellus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Antwone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Look, just because I don&amp;#39;t be givin&amp;#39; no man a foot massage don&amp;#39;t make it right for %actor to throw %subject into a glass motherfuckin&amp;#39; house, fuckin&amp;#39; up the way the nigger talks. Motherfucker do that shit to me, he better paralyze my ass, &amp;#39;cause I&amp;#39;ll kill the motherfucker, know what I&amp;#39;m sayin&amp;#39;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%actor&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%subject&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&amp;lt;MESS&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Well, the way they make shows is, they make one show. That show&amp;#39;s called a pilot. &lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;Then they show that show to the people who make shows, and on the strength of that one show they decide if they&amp;#39;re going to make more shows. Some pilots get picked and become television programs.&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;Some don&amp;#39;t, become nothing. She starred in one of the ones that became nothing.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;MESS&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_mymodule_message_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;First and foremost problem with this is that it is not prefixed, namespaced if you will. Your &lt;em&gt;t(&quot;Submit&quot;)&lt;/em&gt; is the same as that other &lt;em&gt;t(&quot;Submit&quot;)&lt;/em&gt;. Translate this once to &quot;Create new&quot; and suddenly all sorts of labels, tabs, titles and links show the text &quot;Create new&quot;. We have all been, there, just admit it, already.&lt;/p&gt;

&lt;p&gt;But The first two examples pose an ever greater problem, too many such sentences are very alike. Strings like &quot;A new %type was created&quot; show up next to &quot;New %type created!&quot;. Especially when there are many modules, built over time, by many different developers.&lt;/p&gt;

&lt;p&gt;Then the larger texts become an even bigger issue, they range from plain ugly to cluttering and convoluted.&lt;/p&gt;

&lt;p&gt;Mixing screentexts and logic, which is what we all do, is arguably as bad as mixing code and presentation.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;Imagine you could say:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Showing &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;Showing &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;core.amount_per_page&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;core.hello_world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ecommerce.payment.thank_you&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;core.thank_you&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;footmassage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%actor&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%subject&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Where all your defaults are nicely set in a central place, your screen-texts are in single place, or even file. And everything gets prefixed with your modulename, unless you define it differently.&lt;/p&gt;

&lt;p&gt;The solution is OOP. Just a little, don't fret, and nicely tuck away so that you won't need to program everything OOP suddenly. First a generic class, which we will built upon in our modules.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrupalHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;core&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;absolute_or_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$translated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;absolute_or_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol_to_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$untranslated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$untranslated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$untranslated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;absolute_or_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol_to_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;t_&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/\./&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With the module, I inherit this helper:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyModuleHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DrupalHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mymodule&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#defaults:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#translations:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t_hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In your module, you use this as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mymodule_form_alter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$helper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyModuleHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;#type&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;textfield&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;#title&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello_world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;#length&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;length&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The usage-example does not load the library files, but delegating code to separate files is not hard in Drupal, with helpers like &lt;em&gt;module_load_include()&lt;/em&gt;. This example assumes the file is already loaded, or that some autoloader is in place.
This example-code does not yet handle the variable_del and variable_set functionality for variables, but that is left to the reader to implement.&lt;/p&gt;

&lt;p&gt;Also note that I have simplified the code a little for readability. Like
leaving out the variable_set and the very much simplified
&lt;code&gt;symbol_to_function()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some other todo's on my list are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce a fallback for core strings, we now have to either call &lt;em&gt;$helper-&gt;t(&quot;foo&quot;)&lt;/em&gt; for our symbol based translations, or &lt;em&gt;t(&quot;foo&quot;)&lt;/em&gt; for core or 3rd party module strings. Core messages need to be callable with symbols too.&lt;/li&gt;
&lt;li&gt;Allow passing variables into t() instead of an keyed array. Like &lt;em&gt;t(&quot;footmassage&quot;, $actor, $subject)&lt;/em&gt;; parsing and cleaning should use sane defaults but would need to be overridable.&lt;/li&gt;
&lt;li&gt;Format_plural implementation. I hardly ever need it, but it should be callable like *plural(&quot;footmassage&quot;, $actor, $subject, $count);&lt;/li&gt;
&lt;li&gt;Make it easier to place all screen texts in a separate file.&lt;/li&gt;
&lt;li&gt;More consistency. Maybe defaults for variables should be defined just like texts, with a private &lt;em&gt;v_var_name()&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A real simple pattern, which requires a little understanding of OOP, but has almost only benefits in usage. And as far as I can see only one downside: it is &quot;Un-Drupal-ish&quot;; but that is not a reason, in itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;comments on &lt;a href=&quot;http://www.reddit.com/r/drupal/comments/qcuqa/a_better_way_to_variable_get_and_t_in_drupal/&quot;&gt;Reddit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wat kan wel en niet met Drupal: enkele vuistregels</title>
   <link href="http://berk.es/2012/01/11/wat-kan-wel-en-niet-met-drupal-enkele-vuistregels"/>
   <updated>2012-01-11T00:00:00+01:00</updated>
   <id>http://berk.es/2012/01/11/wat-kan-wel-en-niet-met-drupal-enkele-vuistregels</id>
   <content type="html">&lt;p&gt;Recent ontving ik weer twee mails met daarin de Gouden Vraag: &quot;Wanneer moet ik Drupal nu gebruiken, en wanneer niet&quot;. Van de laatste kreeg ik toestemming om de vraag en mijn antwoorden uit te werken tot deze blogpost; anoniem uiteraard.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ik werk zelf al enige jaren met X [Een bekend ander CMS, of &quot;ons eigen systeem&quot;; BK] en dat systeem ken ik nu redelijk goed.&lt;/p&gt;

&lt;p&gt;Door vragen van klanten/ontevredenheid met doorontwikkeling/zoektocht naar meer flexibiliteit ben ik eens naar Drupal gaan kijken.&lt;/p&gt;

&lt;p&gt;Ik denk er daarom aan om over te stappen maar daarvoor zou ik &lt;em&gt;graag willen weten wat niet kan met Drupal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wie dat weet, en kan toepassen, heeft goud in handen en kan makkelijkprijzen van boven de $300/uur vragen. Ofwel: dat weet niemand.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ik ben daarom op zoek naar de concrete restricties/beperkingen van Drupal.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Die zijn er niet!&lt;/p&gt;

&lt;p&gt;Voor iedere restrictie die je aanbrengt, brengt iemandanders een oplossing aan. En iedere beperking die ergens is beschreven, wordt door iemand andersbeschreven als ofwel een bewuste keuze (Y kan niet, maar dat is juist goed. Jij zou Y eigenlijk helemaal niet moeten willen) ofwel wordt er een uitbreiding, module of truukje uitgelegd waarmee, met wat werk, deze beperking omzeild wordt. Meestal vind je allebei.&lt;/p&gt;

&lt;p&gt;Maar zelf hanteer ik enkele vuistregels, helaas niet erg concreet;&lt;/p&gt;

&lt;h2&gt;Drupal is een CMS, geen framework of zelfbouw.&lt;/h2&gt;

&lt;p&gt;Drupal is een CMS, geen &lt;a href=&quot;http://www.riehle.org/computer-science/research/dissertation/diss-a4.pdf&quot;&gt;framework (pdf)&lt;/a&gt;. Helaas is &quot;&lt;a href=&quot;http://stackoverflow.com/questions/301240/whats-a-php-framework-and-whats-a-good-one&quot;&gt;framework&lt;/a&gt;&quot; een vage term, daarom enkele stellingen:&lt;/p&gt;

&lt;p&gt;Een framework doet geen aannames over het gedrag, de look en de feel van het te bouwen eindproduct.&lt;/p&gt;

&lt;p&gt;Een framework heeft een duidelijke doelgroep: de bouwers van applicaties, zoals websites (niet persé programmeurs).&lt;/p&gt;

&lt;p&gt;Een framework biedt een technische basis en infrastructuur.&lt;/p&gt;

&lt;p&gt;Een framework biedt een technische infrastructuur die het bouwen en/of programmeren efficiënter maakt.&lt;/p&gt;

&lt;p&gt;Drupal voldoet hier niet écht aan; het is niet alleen opnionated over hoe je moet ontwikkelen, het is vooral opinionated over hoe het gebouwde resultaat zal werken en er zal uitzien.&lt;/p&gt;

&lt;p&gt;Vergeleken met een CMS als Joomla! voldoet Drupal hier wel meer aan. En is daarom meer een framework dan Joomla!Maar vergeleken met Codeignitor, Symfony, Rails of Django is het véél minder een framework. Drupal valt dan veel meer in decategorie bij Joomla! Typo3 en Wordpress, dan bij Symfony of Django.&lt;/p&gt;

&lt;p&gt;Omdat een CMS al volledig functioneel is (na installatie kun je meteen aan de slag, is het een werkende site), heeft het vastgestelde &quot;manieren&quot;.&lt;/p&gt;

&lt;p&gt;Immers, na installatie heb je een werkend CMS. Hoe dat CMS je content benaderd, de workflow heeft bepaald, menusystemen ingeregeld heeft en wat de look en de feel is, liggen vast in de basis van dit systeem.&lt;/p&gt;

&lt;p&gt;Drupal heeft dus een eigen wijze. En je moet dus je projectmanagement, wireframes, designs en workflows inrichten volgens hoe Drupal dat &quot;wil&quot;. Niet andersom.&lt;/p&gt;

&lt;p&gt;Wil je een CMS, Drupal, &lt;em&gt;exact&lt;/em&gt; laten gedragen zoals in je functioneel ontwerpen of technisch ontwerpen is vastgelegd, dan moet je twee keer zoveel ontwikkelen en eindig je met een drie keer zo complex systeem. Core doet manier-A. Uitbreiding X wordt ontwikkeld om manier-A ongedaan te maken. Uitbreiding Y wordt ontwikkeld om manier-B te implementeren.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ben in je in de positie om de TO's, FO's, wireframes en designs te maken met kennis van Drupal's &quot;eigen wijze&quot;, dan zul je vooral mét Drupal kunnen werken, in plaats van tégen Drupal te moet werken.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Database-geörienteerd, geen abstractie.&lt;/h2&gt;

&lt;p&gt;Drupal is zeer &lt;a href=&quot;http://upsitesweb.com/sites/upsites.co/files/drupal7_model_0.png&quot;&gt;dicht op de Database gebouwd&lt;/a&gt;. Dit is in Drupal 7 in theorie verbeterd, de praktijk moet nog uitwijzen of dit ook écht een verbetering is. Helaas is over Drupal 7 nog veel onbekend en zijn er weinig casestudies te vinden.&lt;/p&gt;

&lt;p&gt;In de praktijk moet dus alles in een door Drupal bepaalde MySQL Database, volgens een doorDrupal bepaalde Databaseopzet (DBA) opgeslagen worden. Wil je informatie elders vanbetrekken, of elders opslaan (legacy databases, zelfgedefinieerde databasestructuren, webservices, NoSQL, XML-files,etc.) dan zul je een groot deel van je budget/tijd opzij moetenzetten voor complexe synchronisaties, cron-scripts, en diverse hooks. Een centrale API, layer of zelfs een aangeraden design pattern, ontbreekt geheel.&lt;/p&gt;

&lt;p&gt;Ook zul je vooraf duidelijk moeten hebben dat zulke koppelingen daarom, in praktijk, altijd uitdraaien op een groot houtje-touwtje ducktape-en-paperclips systeem: het werkt, maar is verre van stabiel en overzichtelijk. Met bijkomende operationele risico's.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moet je koppelingen maken met externe systemen, bijvoorbeeld om daaruit content te halen of juist om daar data in te stoppen? Dan zit Drupal zeer waarschijnlijk vooral in de weg. Maak dan een duidelijke afweging of deze extra investering en complexiteit opweegt tegen de voordelen van Drupal.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Een module voor alles versus het gevaar van onhandelbare complexiteit.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://isthereamoduleforthat.com&quot;&gt;There is a module for that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Voor een middelmatig complexe site heb je al snel over de vijftigmodules nodig. Om bijvoorbeeld de functionaliteit waarmee Wordpressstandaard komt na te bouwen in een Drupalblogsite kun je rekenen opdertig modules of meer. Dat is een enorme payload die mede beheerd,geüpdate en geconfigureerd moet worden. Daargelaten dat een groterehoeveelheid modules bijna altijd een negatief effect op de performanceheeft. Hou hier rekening mee bij het ramen van de lopende kosten: eengrotere server, een tijdrovende upgrade, update en beheerprocedure eneen toenemende complexiteit bij het (door)ontwikkelen.&lt;/p&gt;

&lt;p&gt;Uiteraard is de correcte oplossing om simpelweg &quot;niet een exacte Wordpress te willen nabouwen&quot;. Waar Drupal standaard mee komt, is al genoeg om te kunnen gaan bloggen.&lt;/p&gt;

&lt;p&gt;Ondanks dat dit een bekende vuistregel is, heeft het merendeel van de Drupalsites waar ik inzage in gehad heb veel meer dan die vijftig modules. Eerder rond de 100 modules, dan rond de 10.&lt;/p&gt;

&lt;p&gt;Ook hier draait het weer om essentiële keuzes maken: je kunt heel goed bloggen met een Drupal zonder énige extra module. Pas als je allerlei eisen aan je workflow gaat stellen heb je modules nodig. Pas als je allerlei toeters en bellen erbij wilt, moet je enkele tientallen modules integreren, opmaken en doorontwikkelen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ben je in de positie om structurele en functionele keuzes te maken? Dan kun je het functioneel ontwerp goed bijsturen aan hoe Drupal dingen &quot;standaard doet en kan&quot;. En zijn weinig extra modules nodig. En wordt het project veel overzichtelijker en makkelijker beheerbaar.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Het enorme grijze gebied dat Themen heet.&lt;/h2&gt;

&lt;p&gt;Een Theme is, in theorie, niet veel werk, maar in de praktijk meestal de grootste klus van het bouwen van een site.&lt;/p&gt;

&lt;p&gt;Veel hangt af van je eigen projectmatige inrichting van het enorme grijze gebied dat Drupal heeft tussen de&quot;View&quot;(de eigenlijke theme-files, de code), de configuratie (inregelen vancontenttypes, settings, views, panels, blokken enzovoort) en degebruikte modules. Zo kun je bijvoorbeeld kiezen om de &quot;Posted by&quot; opeen artikel in de configuratie uit te zetten, of om deze in de&lt;code&gt;node-article.tpl.php&lt;/code&gt; template file eenvoudigweg niet te renderen. Of om daarvoor een set modules in te zetten die dit op een zeer krachtige manier configureerbaar maken.&lt;/p&gt;

&lt;p&gt;Een typisch maatwerk-theme, waarbij het design al rekening houd metDrupal, kost een ervaren themer op zijn minst drie volle werkdagen om tebouwen. Meestal veel meer, omdat behalve het bouwen van het theme, dezethemer continue moet wisselen tussen het inregelen en configureren vanonderdelen van Drupal en het bouwen van het theme en de CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beperk je het themen enkel en alleen tot het aanpassen van de code in je theme? Dan ben je welliswaar beperkt in de mogelijkheden, maar is de klus zeer overzichtelijk en weinig werk. Maar betrek je het introduceren van allerlei functionaliteit erbij; of wil je in het theme ook bepalen hoe zaken zich gedragen, dan wordt het veruit de grootste klus van het bouwen van je website.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Met een houten kano de oceaan oversteken.&lt;/h2&gt;

&lt;p&gt;Verder wil ik met nadruk wijzen op het feit dat dit vuistregels zijn, geen wetten van Meden en Perzen.&lt;/p&gt;

&lt;p&gt;Ik weet ook wel dat er altijd ergens een voorbeeld te vinden is van eensite die mijn ongelijk &quot;bewijst&quot;.&lt;/p&gt;

&lt;p&gt;Maar als iemand in een houten kano de Atlantische oceaan overgestoken is,bewijst dat alleen maar dat je met een houten kano die oceaan over kunt steken. Het is geenszins eenbewijs tegen een algemene stelling zoals &quot;een houten kano is geen geschikt vaartuig om de oceaan over te steken&quot;.&lt;/p&gt;

&lt;p&gt;Meer concreet: uiteraard zijn er mooie Drupalsites gebouwd die externe databases gebruiken voor hun content; maar daarmeeis nog niet gezegd dat &lt;em&gt;over het algemeen&lt;/em&gt;  het integreren van externe bronnen, een zeer moeilijke klus is, in Drupal.&lt;/p&gt;

&lt;p&gt;Heb ik wat vuistregels over het hoofd gezien? Wat zijn jou vuistregels? Zijn er dingen die Drupal volgens jou absoluut niet kan? Of zijn er gebieden of cases waar Drupal juist het allerbeste inzetbaar blijkt?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CDPATH, add paths to your &quot;cd&quot; which are accessible from anywhere on your system for autocopletion.</title>
   <link href="http://berk.es/2012/01/03/cdpath-add-paths-to-your-cd-which-are-accessible-from-anywhere-on-your-system-for-autocopletion"/>
   <updated>2012-01-03T00:00:00+01:00</updated>
   <id>http://berk.es/2012/01/03/cdpath-add-paths-to-your-cd-which-are-accessible-from-anywhere-on-your-system-for-autocopletion</id>
   <content type="html">&lt;p&gt;Whenever you use the commandline a lot, you will be browsing to certain directories a lot. Most graphical filebrowsers offer some sort of bookmarking system. So that you can browse to the place where you have your invoices with only two clicks, instead of clicking all trough Documents » Administration » Finance » 2012 » 01.&lt;/p&gt;

&lt;p&gt;Bash has something similar, but as always with the commandline, more powerfull: &lt;a href=&quot;http://www.caliban.org/bash/#bashtips&quot;&gt;CDPATH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have several CDPATH entries set, for example on my desktop machine:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export CDPATH=~/Documenten:~/Documenten/Administratie/Facturen/huidig_jaar/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And on my webservers:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export CDPATH=/var/www&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first, for example allows me, regardless of the current active directory, to type &lt;code&gt;cd &amp;lt;tab&amp;gt;&lt;/code&gt; to show all active projects. Typing &lt;code&gt;cd MCD_&amp;lt;tab&amp;gt;&amp;lt;enter&amp;gt;&lt;/code&gt; will expand to the project &lt;code&gt;cd MCD_my_current_drupal&lt;/code&gt; and open the directory &lt;code&gt;/home/ber/Documenten/MCD_my_current_drupal/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One of those tiny settings that make a small thing a little more efficient. And because I type that several hundreds of times each week, it's overall benefit is rather large.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HJKL cheatsheet</title>
   <link href="http://berk.es/2011/12/08/hjkl-cheatsheet"/>
   <updated>2011-12-08T00:00:00+01:00</updated>
   <id>http://berk.es/2011/12/08/hjkl-cheatsheet</id>
   <content type="html">&lt;p&gt;Because I &lt;a href=&quot;https://twitter.com/#!/jkreeftmeijer/status/144406665779888128&quot;&gt;too&lt;/a&gt; always forget about &lt;em&gt;hjkl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://webschuur.com/files/hjkl_cheatsheet.png&quot; alt=&quot;hjkl, Motherfucker. Do you type it?&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I was wrong: It was not a leak in a Drupalsite.</title>
   <link href="http://berk.es/2011/09/18/i-was-wrong-it-was-not-a-leak-in-a-drupalsite"/>
   <updated>2011-09-18T00:00:00+02:00</updated>
   <id>http://berk.es/2011/09/18/i-was-wrong-it-was-not-a-leak-in-a-drupalsite</id>
   <content type="html">&lt;p&gt;I &lt;a href=&quot;https://twitter.com/#!/berkes/status/114399800132255744&quot;&gt;tweeted&lt;/a&gt; too fast, and wrong:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Site were the Dutch Government accidentally leaked its 2012 budget, is a Drupalsite. Yes #Drupal does not secure its files. Drupal for govs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The mayor news outlets in the Netherlands did not link to the leaking site, but instead to the site that carried (a mirror of the) PDFS that were leaked as well as background information. I followed these links, without researching if these sites were the actual leaking sites. This site they, instead, linked to, is a &lt;a href=&quot;http://www.cpb.nl/sites/all/modules/cck/CHANGELOG.txt&quot;&gt;Drupalsite&lt;/a&gt;. The one with the unprotected files was not.&lt;/p&gt;

&lt;p&gt;So much for not investigating a little myself! The site that leaked the file, was an ASP (.net?) site.&lt;/p&gt;

&lt;p&gt;I am sorry for this misinformation. And as said, tweeted too fast, did too little investigation and that makes me look stupid. I am glad for those that told me my mistake. And because I got married the next morning, writing this errata took more time then is appropriate. Sorry for that too.&lt;/p&gt;

&lt;p&gt;As a bonus, and to make things up a little, some common Drupal leakages that I helped fix in clients projects. Obviously I have responsibilities (and even a few NDAs) so I don't give names and urls.&lt;/p&gt;

&lt;!--break--&gt;


&lt;h3&gt;The avatar-fiasco.&lt;/h3&gt;

&lt;p&gt;A group of people partook in a grassroots campaign, backed up by a closed (the permission access-content was only given to hand-picked people) forum.
The party who the grassroots took action against new about that forum, but could not access it. They, however, wrote a silly script that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scanned URL patterns for user-profiles: if they gave a 404, that user did not exist, if they got a 401, they still could not access the content, but new the person existed.&lt;/li&gt;
&lt;li&gt;fetched avatars for all users that had one and used that to intimidate the partakers.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I did three things: migrated existing users and added some pseudorandom numbers to their uid. I hacked core, so it sent a 404 for access-denied pages too. I disabled avatars.
And explained the users that their Drupalsite was not hacked, but instead leaking some minor privacy-information.&lt;/p&gt;

&lt;p&gt;This was minor. But imagine this happening on a sexual-diversity, and/or civil-rights forum in, say, Iran?&lt;/p&gt;

&lt;h3&gt;The video-file settlement.&lt;/h3&gt;

&lt;p&gt;A none-drupalsite ran a (very interesting) documentary on a person with a mental illness. After a Preliminary injunction they had to take the video offline (or pay a fine of X for each day it remained online). The publishers took the article offline, but some journalists/bloggers found that the video could still be accessed, by giving the urls to the video-file. Luckily a settlement was reached and the publishers did not have to pay the fine for all the days the video had remained active.&lt;/p&gt;

&lt;p&gt;We were just then planning to migrate this site to Drupal. The incident caused us to find a solution for this in Drupal: when a node gets unpublished the attached files should no longer be servable. We decided upon a custom-built module with a hook_node that acted upon &quot;unpublishing&quot; and simply renamed the files to some obscure salted-hash-name. Yes, that is security-by-obscurity, but the only affordable solution here.&lt;/p&gt;

&lt;h3&gt;The imagecache downloads&lt;/h3&gt;

&lt;p&gt;A site that (re)sold images used imagecache to watermark the images, resize them and only present small resolutions to users.
Someone found this out, probably new Drupal, and fiddled with the urls to fetch the original files. Those were &gt;5MB JPEGs, copyrighted and by contract, not allowed to be distributed. Ever.&lt;/p&gt;

&lt;p&gt;My client was warned (luckily) and hired me to write a (very ugly) imagemagick hack that moved the original files to a place outside the web-root, but accessible for re-building of the derivatives.&lt;/p&gt;

&lt;h3&gt;The Multisite jokes&lt;/h3&gt;

&lt;p&gt;Back when I ran our &lt;a href=&quot;http://web.archive.org/web/20060202131110/http://sympal.nl/&quot;&gt;Drupal-hoster&lt;/a&gt; we thought that multisite was a good solution for hosting. It is not, for many reasons, but one is most interesting here.&lt;/p&gt;

&lt;p&gt;Two domains, for the sake of the example: upload-your-xxx.com and some-brochureware-about-us.nl were multisites&lt;/p&gt;

&lt;p&gt;Some funny people found out that by switching the urls, one could present images uploaded on upload-your-xxx.com on the domain of some-brochureware-about-us.nl: and posted that on some forums:
http://some-brochureware-about-us.nl/files/upload-your-xxx.com/hardcore.jpg with the messages: look company Y us dealing in pr0n. Embarrassing, in this case, but potentially harmfull, especially when one of both sites has user-generated-content, or when sites are tough opponents and involved in smear-campaigning.
Also potentially harmfull when &quot;good&quot; sites get blocked on schools and in libraries, for &quot;having none-complient or adult content&quot;. Or when a multisite acts as a proxy to pass in disallowed content.&lt;/p&gt;

&lt;p&gt;Our solution was to nuke multisite with a thousand flames.&lt;/p&gt;

&lt;h3&gt;But, private-files?&lt;/h3&gt;

&lt;p&gt;Drupal has a private-file modus. That is fine for small sites, but it does not scale. You cannot deliver (very) large files that way, and certainly cannot deliver large amount of files concurrently that way.&lt;/p&gt;

&lt;p&gt;I see no solution; And earlier research has made me believe this is simply not possible with a classic LAMP (Apache and PHP) stack. One needs a real document-management server, or application (things like Alfresco). Most probably a Java-based solution. Or some thin proxy that knows about who can access what files in front of the app.&lt;/p&gt;

&lt;p&gt;When you need to deliver large (amounts of) files, keep away from simple asp, lamp and such solutions, including Drupal. Maybe, but I have never tested it, Alfresco behind Drupal can offer a real solution?&lt;/p&gt;

&lt;h2&gt;Again, sorry.&lt;/h2&gt;

&lt;p&gt;As you know, I was wrong in my conclusion that (a badly configured) Drupal was leaking governmental information.
But as you can see, it happens a lot. And it requires quite some effort to avoid Drupal leaking information. Including core hacks if you are really serious.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin inbraak,</title>
   <link href="http://berk.es/2011/06/21/bitcoin-inbraak"/>
   <updated>2011-06-21T00:00:00+02:00</updated>
   <id>http://berk.es/2011/06/21/bitcoin-inbraak</id>
   <content type="html">&lt;p&gt;Afgelopen weekeind, &lt;a href=&quot;(http://ftalphaville.ft.com/blog/2011/06/21/600441/george-clooney-roils-the-bitcoin-market&quot;&gt;werd ingebroken&lt;/a&gt; in het grootste wisselkantoor en handelsplatform mtGox. Een aantal mensen vroeg mij wat ik daarvan dacht, gezien mijn recente positieve verhalen over die BitCoin. Ik trek enkele conclusies, maar eerst wat achtergrondDe inbraak en crash is mooi te zien in een &quot;live verslag&quot; van een handelaar.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;349&quot; src=&quot;http://www.youtube.com/embed/T1X6qQt9ONg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;In het kort: er werd ingebroken en de inbreker heeft bitcoins ter waarde van anderhalf miljoen Dollars vér onder de prijs verkocht. Waarmee deze persoon de hele beurs heeft laten crashen. Deze bitcoins stonden óp een of twee rekeningen in het handelskantoor opgeslagen.&lt;/p&gt;

&lt;p&gt;MtGox heeft meteen het platform gesloten en aangegeven iedereen een nieuw wachtwoord te geven. Ze hebben ook aangegeven alle in- en verkoopacties terug te draaien. Balen voor veel mensen die tijdens de crash bitcoins inkochten voor minder dan één dollar. Maar aangezien het illegale handel was, wel zo eerlijk voor alle andere handelaars op het platform.&lt;/p&gt;

&lt;p&gt;Over de wijze van inbreken is nog wat onduidelijkheid, maar alles wijst erop dat een database van de computer van één van de ontwikkelaars is gestolen en de inhoud van die database is gebruikt om in te breken.&lt;/p&gt;

&lt;p&gt;Een aantal dingen kan ik nu concluderen:
1. De Computers van de ontwikkelaars zijn een erg zwak punt in de beveiliging van websystemen. Ik ken genoeg webdevelopers met brakke operating systemen, slecht- of nietversleutelde hardeschijven, laffe wachtwoorden enzovoort. Ontwikkelaars die wél databases met tienduizenden gebruikersaccounts op hun laptopje in hun rugzak hebben zitten. Waarschijnlijk ook jou gegevens.
2. Bitcoin is nog erg onzeker. Beloftevol en technisch goed in orde, maar als economie en gemeenschap nog onervaren en zoekende. Een handelskantoor dat na een overval de hele economie doet crashen, is vergelijkbaar met een volledige crash van de Nederlandse economie na een kraak en enorme diefstal bij de Rabobank. Dat mág en kan niet gebeuren. De BitCoin economie mist nog allerlei veiligheidsnetten en mechanieken om dit te voorkomen.
3. Bitcoin is toch sterk. Want de beurzen die openblijven zijn weliswaar flink in het rood gedoken, maar inmiddels stabiel en weer opkrabbelend. We moeten nog zien wat er gebeurt als mtGox weer open gaat. Mogelijk dat heel veel mensen direct al hun bitcoins proberen te verkopen voor Euro's of Dollars omdat ze geen vertrouwen meer in Bitcoin hebben. Maar ook goed mogelijk dat na een flinke waardedaling, diegenen die er nog wel in geloven (en er vaak veel in geïnvesteerd hebben) weer de goedkope bitcoins inkopen. Vooralsnog ziet het er niet erg slecht uit, en is &quot;het einde van de Bitcoin&quot; zeker nog niet in zicht.
4. De Cloud is gevaarlijk. Mensen die hun bitcoins op de site van mtGox bewaarden en niet thuis, op een veilige (versleutelde of afkoppelbare USB) schijf vertrouwen op een extern bedrijf. Een bedrijf dat enerzijds juist vanwege die grote waarde in kas een belangrijk doelwit is voor overvallers en tegelijk haar veiligheid blijkbaar niet goed op orde had. Dat is de &quot;Cloud&quot; waar vooral marketeers zo lyrisch over zijn: je mail, je documenten, je administratie en dus nu ook je geld, niet tuis op een veilige computer bewaard maar bij allerlei hippe &quot;Cloud&quot; diensten op hun online computers. BitCoin is in principe decentraal, maar als we allemaal één centrale database kiezen om het geld op te slaan, is het gewoon weer centraal.
5. BitCoin is spannend. Wat afgelopen weekeind gebeurde leest als het script van de James Bondfilm Goldfinger. Waarin Auric Goldfinger probeert al het Amerikaanse goud (de grootste hoeveelheid ter wereld) nucleair te besmetten, waarna het waardeloos wordt. En daarmee het goud van Auric Goldfinger zelf ineens meer waard is.
6. BitCoin is voor mij vooral een langetermijn plan. Over twee, die of zelfs vier jaar kunnen we zeggen of het een success was, of is. Tot die tijd is het vooral enorm spannend. En zullen de voor- en tegenstanders bij iedere grote gebeurtenis meteen concluderen dat het &quot;dus&quot; prima - of juist nooit kan werken.&lt;/p&gt;

&lt;p&gt;Dus is het vooralsnog niet te concluderen dat BitCoin ten einde is of dat de waarde helemaal gecrashd is. We weten meer nadat de grootste beurs weer open gaat. Het is in ieder geval een belangrijk moment voor die Bitcoin. Wordt zeker vervolgd.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mijn bitcoin avontuur, deel twee: handelen en accepteren (op marktplaats) als betaalmiddel.</title>
   <link href="http://berk.es/2011/06/02/mijn-bitcoin-avontuur-deel-twee-handelen-en-accepteren-op-marktplaats-als-betaalmiddel"/>
   <updated>2011-06-02T00:00:00+02:00</updated>
   <id>http://berk.es/2011/06/02/mijn-bitcoin-avontuur-deel-twee-handelen-en-accepteren-op-marktplaats-als-betaalmiddel</id>
   <content type="html">&lt;p&gt;Zoals eerder beschreven &lt;a href=&quot;http://bler.webschuur.com/bitcoins_de_revolutionaire_valuta_met_een_potentie_voor_de_teloorgang_van_ons_banksysteem&quot;&gt;ben ik in de bitcoin wereld gedoken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En heb ik daar ook meteen al geld mee verdiend (jawel mijnheer de belastingmijnheer die dit ook misschien leest: ik voer dat gewoon netjes bij mijn inkomsten op). En zijn er een heleboel onduidelijkheden boven komen borrelen, de meeste worden besproken op het &lt;a href=&quot;http://webchat.freenode.net/?channels=bitcoin-nederland&amp;amp;uio=d4&quot;&gt;Nederlandse bitcoin IRC kanaal #bitcoin-nederland&lt;/a&gt;. Zaken als facturering, BTW, omrekentarieven enzovoort.&lt;a href=&quot;http://bitcoincharts.com/markets/&quot;&gt;Valutahandel met bitcoins&lt;/a&gt; is niet moeilijk en ook niet onduidelijk. Door de omhoogschietende prijs, heb ik met mijn relatief kleine investering na een paar dagen al een royale waardevermeerdering gezien. Als ik het nu zou opnemen, heb ik een heel royale winst gemaakt. Zonder jullie meteen alle details over mijn inkomen te geven: ik zou daar een paar jaar google advertenties op mijn sties voor moeten draaien. Ik kijk de kat nog even uit de boom, hoop dat het nog meer waard wordt. En loop dus het risico dat het als een mooie ballon knapt, en mijn geld ineens niks meer waar is.&lt;/p&gt;

&lt;p&gt;Dat is ook het grootste risico op dit moment. De buzz is overal, iedereen probeert aan bitcoins te komen, dus hun waarde zoeft omhoog. Het is dus belangrijk dat er ook daadwerkelijke &quot;echte wereld&quot; goederen voor te koop zijn. Gelukkig zijn er al veel winkels te vinden, maar op wereldschaal gezien stelt dat nog bijna niks voor. Want als mensen ze accepteren, hebben ze een verankerde waarde. Als je voor 1 bitcoin een kop koffie kunt kopen, zou dat nu (2 juni 2011, 15:20) een duur bakkie zijn, met een wisselkoers van $10/1Btc. Maar is er een garantie dat je altijd nog kopjes koffie ter waarde van omgeveer €2 kunt krijgen. Dus dat de bitcoin verankerd is aan die €2 waarde.&lt;/p&gt;

&lt;p&gt;Je moet echter ergens beginnen. Want in Nederland kun je nog nauwelijks ergens met bitcoins betalen. Ik heb &lt;a href=&quot;http://kopen.marktplaats.nl/search.php?tab_adcount=3&amp;amp;ds=to%3A%3Bpu%3A0%3Bdi%3A%3Bpp%3A0%3Blt%3Azip%3Bsfds%3A1%3Bpt%3A0%3Bmp%3Anumeric%3Blx%3A186308%3Bly%3A428440%3Bkw%3Abitcoin%3Bosi%3A2&amp;amp;srt=dd&amp;amp;u=&amp;amp;g=&amp;amp;f=0&amp;amp;pp=0&amp;amp;ts_category_default=&amp;amp;pts=1&amp;amp;t=&amp;amp;p=1&amp;amp;stop_force_description_search=&amp;amp;s=&amp;amp;show_thumbnails=1&amp;amp;show_summary=1&amp;amp;from_searchbox_advanced=1&amp;amp;q=bitcoin&amp;amp;g=nol1&amp;amp;qsf=0&amp;amp;postcode=&amp;amp;distance=&amp;amp;ts=on&quot;&gt;mijn zolder opgeruimd en wat spul op markplaats gezet&lt;/a&gt;. Ik accepteer daar bitcoins voor. En Euros, want ik verwacht niet dat iemand met BTC gaat betalen: immers tegen de tijd dat je naar mijn huis gelopen bent om de fiets te bekijken is de afgesproken prijs in bitcoins alweer gestegen door die omhoog knallende koers.&lt;/p&gt;

&lt;p&gt;Ik hoop dat ik van markplaats hier iets over te horen krijg. Er staat niks in hun voorwaarde over het accepteren van andere valuta (of ik heb eroverheen gelezen). Dus het lijkt gewoon te mogen. Maar laten we het experiment vooral doorzetten en zien wat ze er bij marktplaats van denken.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mailcatcher for Drupal and other PHP-applications - The simple version</title>
   <link href="http://berk.es/2011/05/29/mailcatcher-for-drupal-and-other-php-applications-the-simple-version"/>
   <updated>2011-05-29T00:00:00+02:00</updated>
   <id>http://berk.es/2011/05/29/mailcatcher-for-drupal-and-other-php-applications-the-simple-version</id>
   <content type="html">&lt;p&gt;This is an updated version of my &lt;a href=&quot;http://berk.es/2011/05/28/mailcatcher-for-drupal-and-other-php-applications/&quot;&gt;earlier post&lt;/a&gt;. Since msmtp is no longer needed, things are a lot simpler, hence the new article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; on development (and test) you don't want to send out mail. But you &lt;em&gt;do&lt;/em&gt; want to test it. You certainly don't want to be in my shoes when a client called me, telling she recieved dozens of confused and angry mails from users on her site, after I fired up cron on my local development machine. And sent out approximately 3000 notification mails to users, with stuff like &quot;new post for you: &quot;W000t, fieldz0rz developmentz in CCK is workinggggg!&quot; (I am making this up now. Allthough.... ;) )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; when debugging mail, you want to inspect the headers and often (in case of multipart or HTML mail) the source too. Most emailclients are crap for that (and right so: who other then the odd mail/webdeveloper needs to inspect the source of a mail. ever?)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; the brilliant Ruby application named &lt;a href=&quot;https://github.com/sj26/mailcatcher&quot;&gt;mailcatcher&lt;/a&gt;. This is a simple SMTP server and sendmail replacement that shows the mails sent to it in a handy webapplication. The webapplication features debug-tools such as headers, and source displaying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/inline/mailcatcher_031.png&quot; alt=&quot;Screenshot of a Drupal password recorvery mail in Mailcatcher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aside: Windows. It is probably possible, but since using even the most basic proper commandline on there requires lots of hassle, all this is far from as trivial as Mac and Linux. I am sorry, but please use the comments if you go mailcatcher running with PHP on Windows.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Mac comes with ruby installed. On Ubuntu Linux you may need to install it still:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo apt-get install ruby rubygems
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Install mailcatcher (Use sudo for installing systemwide).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gem install mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Configure PHP to use mailcatcher for delivering mail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit &lt;code&gt;php.ini&lt;/code&gt; (Depending on your installation where this lives, but on Ubuntu this is &lt;code&gt;/etc/php4/apache2/php.ini&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;[mail function]&lt;/code&gt;, if available, change the &lt;a href=&quot;http://php.net/manual/en/mail.configuration.php#ini.sendmail-path&quot;&gt;sendmail_path&lt;/a&gt; to &lt;code&gt;/usr/bin/env catchmail&lt;/code&gt; and you're set.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;na&quot;&gt;sendmail_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/bin/env /var/lib/gems/1.8/bin/catchmail &amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Find out where catchmail lives by invoking &lt;code&gt;$ which catchmail&lt;/code&gt;. On Ubuntu it was installed at &lt;em&gt;/var/lib/gems/1.8/bin/catchmail&lt;/em&gt;. Make sure you have the gems installed system wide, else apache (or the user running the webserver) does not have access to catcmail and the required libraries.&lt;/p&gt;

&lt;p&gt;And restart apache.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Start up mailcatcher.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Open your browser and visit &lt;a href=&quot;http://localhost:1080&quot;&gt;http://localhost:1080&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Mailcatcher gotcha's and tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Just terminate (&lt;code&gt;^C-c&lt;/code&gt;) mailcatcher and restart it to flush the recieved mail.&lt;/li&gt;
&lt;li&gt;Don´t forget to start up mailcatcher before you start hacking along on your site, If you forget it, mail will not be sent out, but will fail and PHP (Drupal) will give errors on mailing.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt; Happy Mailing on your development machine! &lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoins. De revolutionaire valuta met een potentie voor de teloorgang van ons banksysteem</title>
   <link href="http://berk.es/2011/05/29/bitcoins-de-revolutionaire-valuta-met-een-potentie-voor-de-teloorgang-van-ons-banksysteem"/>
   <updated>2011-05-29T00:00:00+02:00</updated>
   <id>http://berk.es/2011/05/29/bitcoins-de-revolutionaire-valuta-met-een-potentie-voor-de-teloorgang-van-ons-banksysteem</id>
   <content type="html">&lt;p&gt;Al verschillende keren is getracht om alternatieve economiën van de grond te krijgen. Sommigen zijn aardig gelukt. Maar nu, vooral afgelopen maanden, lijkt het dan eindelijk écht te lukken: een geldsysteem dat ons huidige op banken gebaseerde systeem kan vervangen. Klinkt eng? Dat is het ook; voor overheden en bankiers althans. Als je me niet gelooft, lees door en volg ook de links. &lt;a href=&quot;https://en.bitcoin.it/wiki/Introduction&quot;&gt;Bitcoin is een valuta&lt;/a&gt;. Net als de Euro (of de Dollar). In tegenstelling tot die Euro, hebben Bitcoins geen centrale organisatie achter zich staan die de waarde garandeert.     &gt; De peer-to-peer topologie van Bitcoin en het ontbreken van de centrale administratie maakt het praktisch onmogelijk voor een overheid, of ieder ander, om de waarde van Bitcoins te manipuleren of meer inflatie te induceren dan er van tevoren is vastgelegd. Het ontwerp van Bitcoin zorgt voor anoniem eigendom en overdracht van waarde.&lt;/p&gt;

&lt;p&gt;Ook ik ben met bitcoins aan het experimenteren en handelen geslagen.&lt;!--break--&gt;In tegenstelling tot Euro's zijn bitcoins dus ook heel makkelijk &quot;over te maken&quot; en nauwelijks te traceren. Maar is het vooral geld dat &quot;van ons is&quot; en niet &quot;van de overheid&quot;.&lt;/p&gt;

&lt;p&gt;Bitcoins zijn goed &lt;a href=&quot;https://en.bitcoin.it/wiki/Myths#Bitcoins_don_t_solve_any_problems_that_fiat_and/or_gold_doesn_t_solve&quot;&gt;te vergelijken met goud&lt;/a&gt;. Goud is een onpraktisch, onhandig metaal; niemand maakt zijn schoffel, of fiets van goud, als zodanig is het dus nauwelijks waardevol. Maar omdat we met zijn allen hebben afgesproken dat goud iets waard is, ís het dat ook. Het feit dat er vrij moeilijk aan goud te komen is, maakt dat het deze waarde houdt en meestal zelfs meer waard wordt. Het feit dat je het goud vaak ongeregistreerd kunt bewaren maakt dat het een anoniem waardemiddel is. Als ik een fiets koop en dat betaal met goud, is die overdracht nauwelijks te traceren door overheden.&lt;/p&gt;

&lt;p&gt;Momenteel is ongeveer $50 miljoen in het Bitcoin netwerk gestopt. Er is dus ongeveer $50.000.000,- ingewisseld tegen Bitcoins. Er bestaan ongeveer &lt;a href=&quot;http://blockexplorer.com/q/totalbc&quot;&gt;6 miljoen bitcoins&lt;/a&gt; in omloop. Een Bitcoin is dus ongeveer $8 waard. En door de aanwas van geïnteresseerden, zal dit zeer waarschijnlijk enorm toenemen. Het is dus heel eenvoudig: omdat mensen Euro's, Dollars en ander geld omwisselden in bitcoins, zijn die bitcoins wat waard.&lt;/p&gt;

&lt;p&gt;Het aantal nieuw in omloop te brengen bitcoins &lt;a href=&quot;http://forum.bitcoin.org/?topic=3366.msg47522#msg47522&quot;&gt;is vastgesteld&lt;/a&gt;. Dit kan ook niet (meer) worden veranderd. Maar het aantal geïnteresseerden, mensen die &quot;echt&quot; geld inwisselen voor Bitcoins, zal alleen maar toenemen. Er ontstaat een &quot;tekort&quot; waardoor bitcoins meer waard worden.&lt;/p&gt;

&lt;p&gt;Dat blijkt ook uit de korte geschiedenis. Anderhalf jaar geleden werd voor 1000 bitcoins slechts $50 geboden. Dat is $0,005 per bitcoin. Vandaag gaan ze van de hand voor ruim $8. In veertien maanden is de waarde dus &lt;strong&gt;verduizendvoudigd&lt;/strong&gt;. &lt;a href=&quot;http://falkvinge.net/2011/05/29/why-im-putting-all-my-savings-into-bitcoin/&quot;&gt;Als je toen €2.500 had omgezet naar Bitcoins&lt;/a&gt;, waren die nu ruim €2,5 miljoen waard geweest. &lt;a href=&quot;http://www.bitcoinmoney.com/post/3109720916/laszlos-pizza&quot;&gt;Multimiljonair dus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of het zo krankzinnig hard blijft groeien is uiteraard onduidelijk. Er zitten nog &lt;a href=&quot;https://en.bitcoin.it/wiki/FAQ#Economy&quot;&gt;risico's aan&lt;/a&gt;. En het is vooral afwachten wat overheden gaan proberen te doen. Maar interessant is het zeker. Ik heb, om die reden ook al een paarhonderd Euro &lt;a href=&quot;https://www.mtgox.com/support&quot;&gt;omgezet in bitcoins&lt;/a&gt;. Omdat het vanuit mijn &quot;traditionele&quot; bank overgezet moet worden, duurt dat lang, want &quot;zo werkt het nu eenmaal&quot; maar zogauw het geld overgezet is, kan ik gaan handelen. Of het gewoon vasthouden. Ik zal hier beschrijven wat ik ermee ga doen en wat ik zoal tegenkom.&lt;/p&gt;

&lt;p&gt;Maar laten we de risico's een bekijken: Banken en overheden gaan zich roeren en proberen het te verbieden.&lt;/p&gt;

&lt;p&gt;Bitcoin is peer to peer. Tussen jou en mijn computer. En die van tienduizenden anderen. Iedereen die bitcoins heeft is meteen de infrastructuur. Het geld staat op mijn computer (in de vorm van een versleuteld bestand, mijn &quot;wallet&quot;) en niet op een &quot;bankrekening&quot;. Vergelijk het met DSB en een matras. DSB kan door de overheden afgeschaft worden, waarna het geld dat bij DSB in beheer was, verdwenen is. Geld in mijn matras blijft daar liggen, ongeacht of banken omvallen. Overheden kunnen (onder druk van banken) best Bitcoin verbieden. Maar ze kunnen niet nagaan of we ons daaraan houden zonder al het internetkeerveer met enorme supercomputers af te luisteren. Alleen zo kunnen ze bitcoin-gebruikers afsluiten of bitcoinverkeer afknijpen. Net zomin als het overheden en film- en muziekindustrie lukt om bestandsdeling (filmpje downloaden) te verbieden of zelfs maar te verminderen, zal het ze lukken om dit de kop in te drukken.&lt;/p&gt;

&lt;p&gt;Het cryptografische algoritme achter het netwerk blijkt een zwakheid te hebben.&lt;/p&gt;

&lt;p&gt;Als het een diepliggende fout is, eentje die ingrijpt op de basis van hoe dit systeem werkt, zal het vertrouwen wegvallen, zullen mensen hun bitcoins verkopen en stort het in. Vergelijkbaar met wanneer een bank fouten blijkt te maken en iedereen als een gek zijn spaargeld opneemt. Vooralsnog zijn er geen tekenen dat zo'n fout gevonden gaat worden. En zijn er veel wiskundigen en theoretici die beweren dat dit ook niet gevonden kán worden. en zijn er veel mensen als een gek aan het zoeken naar zulke lekken (om het systeem plat te gooien, of om enorm veel geld te verdienen met zo'n zwakheid).&lt;/p&gt;

&lt;p&gt;Mensen verliezen interesse. Als de interesse wegebt en mensen hun bitcoins weer inruilen tegen Dollars of Euro's zal het netwerk uitgehold raken: bitcoins worden weer minder waard en diensten eromheen verdwijnen. De meest voor de hand liggende oorzaak van zo'n verminderde aandacht is bijvoorbeeld een alternatief systeem. Vergelijk het met peer-to-peer muziekuitwisseling. iTunes en meer recent spotify bieden betaalde, legale muziekdownloads aan. Omdat dit goede alternatieven zijn, met grote namen erachter, haalt het veel mensen weg uit het bestandsdeling-netwerk. Waardoor dit illegale aanbod zelfs kan krimpen (in werkelijkheid groeit het iets minder hard).&lt;/p&gt;

&lt;p&gt;Wanneer bijvoorbeeld amazon, of paypal of zelfs de grote creditcard maatschappijen met alternatieven komen, die dezelfde voordelen bieden, kan het zijn dat mensen massaal weglopen uit het bitcoin netwerk. Wanneer echter een kritieke massa in dat bitcoin netwerk zit, zal dit risico klein zijn. Andere onbekenden. Bitcoin is nieuw. Een heel nieuw concept. Met een geheel nieuwe dynamiek. Niemand kan voorspellen wat er gebeuren kan, dus kan het meest onverwachte zomaar opeens dit netwerk onderuit halen. Enkele voorbeelden die critici al opvoerden, zijn: massadeflatie: met de kleinste betaaleenheid (een tiende cent) kun je enkel nog een huis kopen. Internet valt om door grote externe veranderingen (onrust of oorlog in de westerse wereld, energiecrisis et cetera). Iemand koopt ala &lt;a href=&quot;http://www.jamesbondwiki.com/page/Goldfinger&quot;&gt;goldfinger&lt;/a&gt; alle bitcoins op. Enzovoort.&lt;/p&gt;

&lt;p&gt;Maar voorlopig zie ik een enorme potentie. Een (mogelijke) revolutie vergelijkbaar met het ontstaan van de banken in de renaissance. En de mogelijkheid om geld te verhandelen, bewaren en investeren, zonder mee te hoeven doen aan het, door velen verachtte, banksysteem dat we nu hebben.&lt;/p&gt;

&lt;p&gt;Wil je ook meedoen: installeer dan de &lt;a href=&quot;&quot;&gt;bitcoin client&lt;/a&gt;, en vraag &lt;a href=&quot;http://freebitcoins.appspot.com/&quot;&gt;gratis een piepkleine hoeveelheid bitcoins aan&lt;/a&gt;. Wil je bitcoins verdienen, dan heb je al &lt;a href=&quot;https://en.bitcoin.it/wiki/FAQ#How_can_I_get_Bitcoins?&quot;&gt;een hele serie opties&lt;/a&gt;. Waaronder ze gewoon kopen. En als je dit verhaaltje interessant vond, maak doneer dan, in bitcoins, op mijn rekening: &lt;em&gt;1Hga5LMhjrfSjwtwxhFQnUmfPNmCRpaVvX&lt;/em&gt; :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mailcatcher for Drupal and other PHP-applications</title>
   <link href="http://berk.es/2011/05/28/mailcatcher-for-drupal-and-other-php-applications"/>
   <updated>2011-05-28T00:00:00+02:00</updated>
   <id>http://berk.es/2011/05/28/mailcatcher-for-drupal-and-other-php-applications</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; Please see the &lt;a href=&quot;/2011/05/29/mailcatcher-for-drupal-and-other-php-applications-the-simple-version/&quot;&gt;newer version of this article&lt;/a&gt;, the latest malcatcher has its own sendmail replacement, making installation for PHP a lot simpler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; on development (and test) you don't want to send out mail. But you /do/ want to test it. You certainly don't want to be in my shoes when a client called me, telling she recieved dozens of confused and angry mails from users on her site, after I fired up cron on my local development machine. And sent out approximately 3000 notification mails to users, with stuff like &quot;new post for you: &quot;W000t, fieldz0rz developmentz in CCK is workinggggg!&quot;. Not cool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; when debugging mail, you want to inspect the headers and the source (in case of multipart or HTML mail). Most emailclients are crap for that (and right so: who other then the odd mail/webdeveloper needs to inspect the source of a mail. ever?)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; the brilliant Ruby application named &lt;a href=&quot;https://github.com/sj26/mailcatcher&quot;&gt;mailcatcher&lt;/a&gt;. This is a simple SMTP server, which shows the mails sent to it, in a handy webapplication. The webapplication features debug-tools such as headers, and source displaying.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/inline/mailcatcher.png&quot; alt=&quot;Screenshot of a Drupal password recorvery mail in Mailcatcher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additional problem: PHP on none-windows machines, cannot deliver mail to an arbitrary SMTP server. It requires a sendmail program being invoked somewhere. Drupal does not allow sending mail to any smtp server without additional configuration. Solution for that is the ultralight sendmail alternative &lt;a href=&quot;http://msmtp.sourceforge.net&quot;&gt;msmtp&lt;/a&gt;. If we configure msmtp to act as sendmail and deliver mail to mailcatcher, we are fine: &lt;em&gt;Drupal » PHP mail() » /bin/msmtp --foo --bar » Mailcatcher&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Aside: Windows. It is probably possible, but since using even the most basic proper commandline on there requires lots of hassle, all this is far from as trivial as Mac and Linux. I am sorry, but please use the comments if you go mailcatcher running with PHP on Windows.&lt;/p&gt;

&lt;h2&gt;Mac&lt;/h2&gt;

&lt;p&gt;Install mailcatcher (Use sudo for installing systemwide).
&lt;code&gt;$ gem install mailcatcher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install msmtp, using MacPorts.
&lt;code&gt;$ sudo port install msmtp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Configure PHP to use msmtp for delivering mail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit &lt;em&gt;php.ini&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;em&gt;[mail function]&lt;/em&gt;, if available, change the &lt;em&gt;sendmail_path&lt;/em&gt; variable. Else just add it to
&lt;em&gt;php.ini&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;  sendmail_path = &quot;/usr/bin/msmtp -t &quot;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And restart apache.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://masterleep.com/2010/configuring-msmtp-on-osx-snow-leopard-to-send-through-gmail&quot;&gt;Configure msmtp&lt;/a&gt; with some defaults (this file should probably be named &lt;em&gt;/etc/msmtprc&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;account mailcatcher
host localhost  
port 1025       # MailCatcher will tell you the port it listens to.
# Enable logfile for additional troubleshooting.
# logfile /var/log/msmtp.log
auto_from on    # From does not work 100% with me, yet, because the envolope-from 
                # is still wrong. But leaving this out makes msmtp fail with PHP.

account default: mailcatcher 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start up mailcatcher
&lt;code&gt;$ mailcatcher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open your browser and visit http://localhost:1080&lt;/p&gt;

&lt;h2&gt;Linux (Ubuntu, Debian and derivatives)&lt;/h2&gt;

&lt;p&gt;install ruby and rubygems first (if you don't already have it)
&lt;code&gt;$ sudo apt-get install ruby rubygems&lt;/code&gt;
Then install mailcatcher.
&lt;code&gt;$ gem install mailcatcher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install msmtp.
&lt;code&gt;$ sudo port install msmtp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Configure PHP to use msmtp for delivering mail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit &lt;em&gt;/etc/php5/apache2/php.ini&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;em&gt;[mail function]&lt;/em&gt;, change the &lt;em&gt;sendmail_path&lt;/em&gt; variable.&lt;/p&gt;

&lt;p&gt;  sendmail_path = &quot;/usr/bin/msmtp -t &quot;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And restart apache (&lt;em&gt;$sudo service apache2 restart&lt;/em&gt;) to load the new php.ini.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://serverfault.com/questions/235723/testing-php-mail-in-localhost-problem&quot;&gt;Configure msmtp so it accepts PHPs sendmail calls&lt;/a&gt; with some defaults. Edit &lt;em&gt;/etc/msmtprc&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;account mailcatcher
host localhost  
port 1025       # MailCatcher will tell you the port it listens to.
auto_from on    # From does not work 100% with me, yet, because the envolope-from 
                # is still wrong. But leaving this out makes msmtp fail with PHP.

account default: mailcatcher 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start up mailcatcher
&lt;code&gt;$ mailcatcher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open your browser and visit http://localhost:1080&lt;/p&gt;

&lt;h2&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If things don't work out, check the main apache error log. Errors by msmtp will show up there and tell you what went wrong. Use the Logs Luke, use the logs!&lt;/p&gt;

&lt;p&gt;You can turn on msmtp logging with &lt;em&gt;logfile /var/log/msmtp.log&lt;/em&gt; in &lt;em&gt;msmtprc&lt;/em&gt;. No need to restart apache for that. Msmtp will tell you what calls it recieved and what parameters it got.&lt;/p&gt;

&lt;p&gt;Cut out PHP and &lt;a href=&quot;http://serverfault.com/questions/235723/testing-php-mail-in-localhost-problem&quot;&gt;send a mail with msmtp&lt;/a&gt; to mailcatcher on the commandline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo -e &quot;Subject: Test Mail\r\n\r\nThis is a test mail&quot; |msmtp --debug --from=default -t me@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that works, then the problem is between Drupal/PHP and msmtp, and the apache-logs should give a hint (see above).&lt;/p&gt;

&lt;h2&gt;Mailcatcher gotcha's and tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Just terminate (&lt;sup&gt;C-c)&lt;/sup&gt; mailcatcher and restart it to flush the recieved mail.&lt;/li&gt;
&lt;li&gt;On firefox (4) the web interface from mailcatcher did not look that well. Chrome(ium) rendered it fine, though.&lt;/li&gt;
&lt;li&gt;Don´t forget to start up mailcatcher before you start hacking along on your site, If you forget it, mail will not be sent out, but will fail and PHP (Drupal) will give errors on mailing.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Happy Mailing on your development machine!&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>&quot;Ruby-on-rails is minder goed dan PHP want het is moeilijk te hosten&quot;</title>
   <link href="http://berk.es/2011/03/31/ruby-on-rails-is-minder-goed-dan-php-want-het-is-moeilijk-te-hosten"/>
   <updated>2011-03-31T00:00:00+02:00</updated>
   <id>http://berk.es/2011/03/31/ruby-on-rails-is-minder-goed-dan-php-want-het-is-moeilijk-te-hosten</id>
   <content type="html">&lt;p&gt;Op mijn diverse artikelen over de geschikheid van Drupal ook veel reacties van mensen die de plank helemaal misslaan. Zoals &quot;Kan wel zijn, dat je in Rails makkelijker kan bouwen, maar Rails is moeilijk te hosten&quot;. Sidenote: Ik heb slechts heel weinig ervaring met Python-hosting (enkel trac projectmanagement), dus durft hoogstens te zeggen dat ik verwacht dat onderstaand daar ook voor geldt.&lt;/p&gt;

&lt;p&gt;Ten eerste: Ja! Voor je Ruby on Rails project is minder hosting te vinden.&lt;/p&gt;

&lt;p&gt;Ten tweede: Dat is volledig irrelevant voor de projecten waar we het over hadden.&lt;!--break--&gt;We praten niet over een site van de bakker op de hoek, maar over sites en projecten waar best een werkdag voor hosting uitgetrokken kan worden. Waar meestal zelfs gewoon professionele hostingpartijen betrokken zijn. Met hosting van enkele duizenden euro's per jaar. De 1-eurohost.biz hoster ondersteunt trouwens meestal ook gewoon Rails, want dat komt al jaren standaard met plesk mee. Dus die bakker op de hoek kan ook heel goed een site in Rails opgeleverd krijgen.&lt;/p&gt;

&lt;p&gt;De grootste uitdaging zit bij organisaties en bedrijven die al hostingomgevingen hebben ingeregeld. Meestal voor Java en/of PHP+MySQL. Zelden voor Ruby of Python. Vooral als de beheerders van die omgeving inflexibel zijn, kunnen ze Ruby of Python nogal eens buiten de deur houden. Afhankelijk van de situatie (zoals windows-only hosting), volgens mij overigens volledig terecht, vaak; maar dat is een heel andere discussie. Voor een intranet kan het dan heel goed zijn, dat vanwege deze beperkingen Ruby of Python al direct afvallen. Terzijde: daarmee is de geschiktheid voor ontwikkelen in &quot;een framework&quot; niet minder, alleen de keuze aan frameworks is kleiner. Aan de andere kant heeft de Rubygemeenschap bijvoorbeeld een omgeving als &lt;a href=&quot;http://heroku.com/&quot;&gt;heroku&lt;/a&gt;. Voor Drupalmensen: stel je voor:   - &quot;drush hosting create bakkerophoek&quot;
 - &quot;git push hosting&quot;
 - &quot;drush hosting online&quot;
 - &quot;drush hosting domains add bakkerophoek.nl&quot;
 - de factuur volgt enkele minuten later per mail
(patent pending... :) )Op heroku zet je voor een paar euro een SOLR aan bij je site (stel je voor dat &quot;drush hosting solr enable&quot; alles is dat je moet doen voor SOLR!). Voor een paar euro per maand wat extra CPU-power of draai je voor enkele tientjes per jaar volledige master-slave database omgevingen achter je site. En deploy je met enkele commando's, geïntegreerd in je revisiebeheersysteem. Hosting is nog nooit zo makkelijk en betaalbaar geweest. Ik wou dat dit &lt;a href=&quot;https://phpfog.com/&quot;&gt;voor PHP zo makkelijk kon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wanneer mensen dus roepen dat bijvoorbeeld &lt;a href=&quot;https://joindiaspora.com/&quot;&gt;Diaspora&lt;/a&gt; nooit iets kan worden, omdat het in Ruby gebouwd is en dus moeilijk de deployen, klopt dat maar deels. Het soort mensen dat Diaspora zal deployen, is bekend met hosting en servers. Dat zijn niet de mensen die al vastlopen op het installeren van FileZilla, maar de geeks die het leuk vinden om met ngix of apache-proxies te prutsen. Diaspora is eigenlijk eerder gericht op &quot;kleine&quot; lokale community-sites dan op &quot;iedereen en zijn moeder&quot; een eigen Diaspora: Eerder Hyves die op Diaspora haar community bouwt, dan op &quot;je neefje en zijn twee vrienden van de Geheime Piratenclub&quot;. Het probleem is inderdaad dat een Ruby-project als &lt;a href=&quot;http://rstat.us/&quot;&gt;rstat.us&lt;/a&gt; daarmee een nadeel heeft ten opzichte van het op PHP en MySQL gebaseerde &lt;a href=&quot;http://status.net&quot;&gt;status.net&lt;/a&gt;. Die laatste is op iedere 1-eurohost te installeren, door iedereen met een basiskennis webmastering of webdevelopment. Een grotere doelgroep, maar mogelijk niet de juiste doelgroep. Het bereik door het aantal installaties is groter, maar dat zegt (vooralsnog) niets over het bereik van gebruikers ervan.&lt;/p&gt;

&lt;p&gt;Die Railsprojecten vereisen op zijn minst enige ervaring met de commandline. Maar eigenlijk gewoon kennis van (web)serverbeheer. Dat hoeft geen dure zeldzame ontwikkelaar te zijn, maar kan iedereen zijn die op een zondagmiddag een vps kan inregelen, voor enkele tientjes. Of iemand die bij een hoster werkt en voor jou de goede omgeving klaarzet.&lt;/p&gt;

&lt;p&gt;Teruggrijpend op mijn eerdere betogen: een professioneel project heeft zo iemand erbij betrokken. Óók voor PHP-projecten, anders, zo durf ik te stellen, is het simpelweg geen professioneel of groot project.&lt;/p&gt;

&lt;p&gt;Iemand die met moeite een goede Drupal- of wordpress-omgeving kan inrichten zal inderdaad erg teleurgesteld zijn in wat vereist wordt om een Django- of Rails- product uit te rollen. Maar zo iemand is nooit maatgevend voor de geschiktheid van die producten in een professioneel, groter project: zo iemand huurt dan iemand in die kennis van het uitrollen van servers heeft.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simplest authentication in Rails: Basic Authentication with a logged_in? helper.</title>
   <link href="http://berk.es/2011/03/29/simplest-authentication-in-rails-basic-authentication-with-a-logged_in-helper"/>
   <updated>2011-03-29T00:00:00+02:00</updated>
   <id>http://berk.es/2011/03/29/simplest-authentication-in-rails-basic-authentication-with-a-logged_in-helper</id>
   <content type="html">&lt;p&gt;The, by far, simplest solution to add some form of authentication in Rails is basic authentication. It has a lot of downsides, but the simplicity is such a benefit that it may just outweight.&lt;/p&gt;

&lt;p&gt;Downsides are, amongst others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No users, no user-manangement.&lt;/li&gt;
&lt;li&gt;Your username and password are hardcoded in the application.&lt;/li&gt;
&lt;li&gt;No fancy or good looking login screens: just the basic HTTP login provided by your browser.&lt;/li&gt;
&lt;li&gt;No logout, other then closing the browser.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here is a simple implementation for a simple app I needed. Since I am the only editor, there is no need to introduce session controllers, user models and so on. If you are relatively new to Rails (like me) you may miss this most simple solution and dive right into &lt;em&gt;devise&lt;/em&gt; or &lt;em&gt;authlogic&lt;/em&gt; or start &lt;a href=&quot;http://ruby.railstutorial.org/chapters/sign-in-sign-out&quot;&gt;writing your own&lt;/a&gt;. And miss out that 10-minutes-and-you're-done solution.&lt;/p&gt;

&lt;p&gt;First, we introduce a basic authenticate method, that can be used troughout our controllers.
This method uses the Rails/Rack helper &lt;a href=&quot;http://apidock.com/rails/ActionController/HttpAuthentication/Basic/ControllerMethods/authenticate_or_request_with_http_basic&quot;&gt;authenticate_or_request_with_http_basic&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;protect_from_forgery&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;authenticate_or_request_with_http_basic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;USER_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In a controller, we can then add a &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html#security&quot;&gt;before_filter&lt;/a&gt; to require authentication for all methods but the &lt;em&gt;index&lt;/em&gt; and the &lt;em&gt;show&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImagesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:except&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A new file under &lt;em&gt;config/initializers&lt;/em&gt;, named &lt;em&gt;user.rb&lt;/em&gt; or anything else you want, contains the hardcoded username or password. Putting it in a separate file allows you to leave it out of your version-control, for example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;USER_ID&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Sauron&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;s3cr3t&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Furhtermore, we define a &lt;em&gt;logged_in?&lt;/em&gt; helper, usefull in our views. This checks if the authorization is a string (it is set) or &lt;em&gt;nil&lt;/em&gt; (user is not authorized):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logged_in?&lt;/span&gt;
   &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Using that helper is simple too. E.g. &lt;em&gt;show.html.erb&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logged_in?&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Edit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_image_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I am not certain if this evaluation of &lt;em&gt;request.authorization.nil?&lt;/em&gt; performs all that well, but I would say, it being simple as possible, that the overhead is minimal.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Enkele goede reacties op mijn stelling &quot;Drupal verkeerde keus voor overheidssites&quot; uitgelicht</title>
   <link href="http://berk.es/2011/03/22/enkele-goede-reacties-op-mijn-stelling-drupal-verkeerde-keus-voor-overheidssites-uitgelicht"/>
   <updated>2011-03-22T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/22/enkele-goede-reacties-op-mijn-stelling-drupal-verkeerde-keus-voor-overheidssites-uitgelicht</id>
   <content type="html">&lt;p&gt;Behalve de vele reacties zonder enige onderbouwing, of zelfs enkele &lt;a href=&quot;http://twitter.com/#!/bertboerland/status/49933911840657410&quot;&gt;ad-hominem&lt;/a&gt; drogredenen, kreeg mijn &lt;a href=&quot;http://webwereld.nl/opinie/106086/drupal-verkeerde-keus-voor-overheidssites--opinie-.html&quot;&gt;http://webwereld.nl/opinie/106086/drupal-verkeerde-keus-voor-overheidssites--opinie-.html&lt;/a&gt; artikel op webwereld ook een paar heel goede argumenten.&lt;/p&gt;

&lt;p&gt;De meerderheid, was, tegen verwachting, positief. Tegen verwachting, omdat olifanten in porseleinkasten meestal weggejaagd worden :).&lt;/p&gt;

&lt;p&gt;De enige inhoudelijke reactie waar ik niet meteen een antwoord op heb, is van &lt;a href=&quot;http://webwereld.nl/article/comments/id/106086&quot;&gt;MexMast op Maandag 21 Maart 2011 17:07&lt;/a&gt; (helaas kan ik niet direct linken naar webwereld reacties, dus even zelf zoeken.)&lt;/p&gt;

&lt;!--break--&gt;


&lt;blockquote&gt;&lt;p&gt;mja lijkt mij een gevaarlijke veralgemening [zie hieronder, BK], als wanhoopsargument. dat het om veel geld gaat veranderd weinig aan het geheel. Tuurlijk kom je er niet door je neef 50 euro te geven voor een zondagje werk.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Je zegt letterlijk dat alle overheids websites die drupal gebruiken de verkeerde keuze hebben gemaakt. En dat is vrees ik, uw persoonlijke voorkeur ten spijt, manifest onjuist.&lt;/p&gt;

&lt;p&gt;De voorbeelden van overheids websites die op drupal draaien zijn veelvuldig aanwezig, tenzij je een paar voorbeelden kan aanhalen van drupal websites en vergelijkbare websites waar de drupal variant veel duurder uitdraaide qua total cost of ownership of functionaliteit. Ik betwijfel het ten zeerste.&lt;/p&gt;

&lt;p&gt;Dat ik &lt;em&gt;letterlijk&lt;/em&gt; zeg dat alle overheids websites die Drupal gebruiken een verkeerde keus maakten is niet waar. Ik insinueer dat wél, maar  blijf telkens terugkomen op &quot;grote Drupalprojecten&quot;. Mijn oorspronkelijke titel was ook &lt;strong&gt;Er zijn betere alternatieven voor Drupal&lt;/strong&gt;. De Webwereld redactie heeft dat wat aangescherpt; omdat ik dat toch in het artikel zélf goed onderbouw en nuanceer.&lt;/p&gt;

&lt;p&gt;Ik zeg zeker niet dat overheden verre van Drupal moeten blijven. Ik herhaal: voor veel grote Drupalprojecten kan beter een andere omgeving worden gekozen. Wat ik verder onderbouw.&lt;/p&gt;

&lt;p&gt;Dat er daarmee dus ook veel overheids-website successvol op Drupal draaien is eenvoudig bewezen en herhaaldelijk aangekaart in reacties. Deze reacties hebben het artikel selectief gelezen, of eenvoudigweg niet gelezen. Want dan hadden ze zeker begrepen dat ik nergens beweer dat &lt;em&gt;ieder&lt;/em&gt; overheidsproject &lt;em&gt;bij Drupal vandaan moet blijven&lt;/em&gt;. Maar dat ik stel dat &lt;em&gt;grote, bouw-intensieve projecten beter af zijn met andere omgevingen dan Drupal&lt;/em&gt;. Deze nuance kan ik schijnbaar niet vaak genoeg herhalen.&lt;/p&gt;

&lt;p&gt;De &lt;em&gt;veralgemening&lt;/em&gt; slaat op mijn eerdere reactie:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Helaas zijn dit soort projecten altijd voor het grootste deel &quot;ontwikkel&quot;-klussen. Minstends de helft van het budget gaat op aan development. En zelden hebben deze klussen budgetten met minder dan vier nullen.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;En dat is veel te kort door de bocht en verdient verdieping.&lt;/p&gt;

&lt;p&gt;Ik heb heel veel offertes gezien en geëvalueerd. Het merendeel Drupalprojecten. Ik ken geen project waarin het geöffreerde bedrag voor &lt;strong&gt;development&lt;/strong&gt; onder de 80% komt of kwam. Het dichtbij komt een offerte waarbij het gevraagde bedrijf ook alle TO en FO's moest schrijven, de designs moest opleveren en mee-deed met de brainstorms. Daarbij was het opstartbedrag zó substantieel dat het ontwikkelbudget slechts 60% van het geheel uitmaakte uiteindelijk. Een project om een site te bouwen, zal altijd een substantieel bedrag voor het bouwen van de site bevatten. Wanneer in een web-project van twee ton slechts vijfduizend Euro vrijgemaakt is voor het bouwen van de site (97,5% overhead) is er iets &lt;strong&gt;grondig&lt;/strong&gt; mis met het project, en maakt de gekozen techniek inderdaad niet uit.&lt;/p&gt;

&lt;p&gt;Voor de tweede kamer staat een vacature online waarin een Drupalontwikkelaar gevraagd wordt. Een duidelijkere hint dat er in dit specifieke project ontwikkeld gaat worden kan ik niet bedenken.&lt;/p&gt;

&lt;p&gt;Ik kan vertrouwelijke informatie niet vrijgeven (en wil dat ook niet) maar het voldoet om te zeggen dat het budget voor deze tweedekamer-site &quot;groot&quot; is. Openbare informatie over andere gemeenteprojecten met Drupal laten allemaal zien dat daarin honderden uren is ontwikkeld.&lt;/p&gt;

&lt;p&gt;Overheden en gemeentes hebben inderdaad met veel meer te maken dan een klein ontwikkelklusje:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;@berkes &lt;a href=&quot;http://twitter.com/#!/SqyD/status/49864730847870976&quot;&gt;The issues you mention&lt;/a&gt; could be about any cms/fw package. Imho most problems with governments sites lie in OSI-layer 8: politics&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maar ook met veel complexe omgevingen. Met legacy-databases, ingewikkelde koppelingen, single sign-on, elder of eerder geïmplementeerde diensten enzovoort:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/KrishnaKurvers/status/49944483000881152&quot;&gt;Krishna Kurvers&lt;/a&gt;@berkes @bertboerland binnen mijn sector worden diverse open source #CMS overwogen. past niet bij deze tijd van #nora en #sga. Mijn mening&lt;img src=&quot;http://twitter.com/#!/KrishnaKurvers/status/50073427574398976&quot; alt=&quot;Krishna Kurvers&quot; /&gt;@berkes #OSS voorstander van, maar #CMS is achterhaalt. Werkt niet goed bij gekoppelde overheden met modulaire bouw en hergebruik data.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nogmaals: hiermee is niet gezegd dat automatisch alle overheidsprojecten hiermee te maken hebben. Overheden zetten ook regelmatig tijdelijke, kleine of ingekapselde sites in. Voor wijkinformatie, evenementen, PR, acties, bouwprojecten enzovoort. In dit soort projecten kan veel vaker wel dan niet, een CMS ideaal ingezet worden. Voor de &lt;a href=&quot;http://www.nieuwevoorstad.nl&quot;&gt;site van het bouwproject naast mijn deur&lt;/a&gt;, bijvoorbeeld, is een CMS misschien zelfs al te groot en complex. Laat staan dat een raamwerk daar efficient ingezet kon worden.&lt;/p&gt;

&lt;p&gt;Kortom: eenieder die roept dat ik specs moet kennen, of dat een overheidsproject meer is dan ontwikkeling alleen, vraag ik te reageren. Geef me voorbeelden, indicaties, projecten en sites waarbij:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Er niet, of minimaal ontwikkeld is. Waar Drupal als eenvoudige blokkendoos is ingezet, met een leuk theme erbij en misschien een enkel custom module-tje. Kortom: dat Drupal is ingezet in een project waar het optimaal voor is. En of het totale budget hiervoor minder dan 4 nullen had.&lt;/li&gt;
&lt;li&gt;Het ontwikkelen, optuigen, migreren en ander development-werk uiteindelijk minder dan 30% van het totale budget opneemt. Waar het, als geheel, om een groot project ging, maar het inzetten van Drupal slechts een klein onderdeeltje is. Waarbij binnen een &quot;groot&quot; project dus toch nauwelijks ontwikkeld is.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Voor die projecten zou inderdaad van de buitenkant lijken dat Drupal niet het goede systeem is, want teveel ontwikkeling. Maar zal bij nader inzien Drupal toch zeer geschikt blijken.&lt;/p&gt;

&lt;p&gt;Voor alle andere projecten is het veilig om heel kort door de bocht te stellen dat ze &quot;Substantiële ontwikkeltijd en -budget&quot; vergden. Dus dat het ontwikkelen een groot onderdeel was. Dus dat de keuze van het onderliggende ontwikkelplatform belangrijk is.&lt;/p&gt;

&lt;p&gt;Ik heb namelijk, niet verbazend, geen enkele reactie gehad die het tegendeel beweerde van mijn stelling dat &lt;strong&gt;Drupal voor development niet optimaal is&lt;/strong&gt; en dat daar &lt;strong&gt;veel betere omgevingen voor zijn, zoals frameworks&lt;/strong&gt;. Dat is niet verbazend, omdat zelfs de meest verstokte Drupal-gelovers ook inzien dat een CMS hierin niet sterk is. Dat dat ook helemaal niet erg is: een CMS heeft immers niet tot doel een ontwikkelplatform te zijn.&lt;/p&gt;

&lt;p&gt;Ik hoop te horen van alle mensen die het niet eens zijn met mijn stelling, en voorbeelden of argumenten aandragen waarbij overheidssites wel degelijk gebaat zijn bij een &quot;kant-en-klaar&quot; product als Drupal, en met een ontwikkelomgeving slechter af zijn.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Val ik daar Drupal aan of af?</title>
   <link href="http://berk.es/2011/03/21/val-ik-daar-drupal-aan-of-af"/>
   <updated>2011-03-21T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/21/val-ik-daar-drupal-aan-of-af</id>
   <content type="html">&lt;p&gt;Nee. Dat doe ik niet. Reacties die ik kreeg (sommigen samengevat)&gt; Je gooit je eigen ruiten in!(Achtergrond: Ik ben vooral Drupalontwikkelaar, dus is het niet handig om het product dat brood op mijn plank brengt af te vallen.)&gt; ik vind het jammer dat je &lt;a href=&quot;http://bler.webschuur.com/drupal_is_ook_minder_geschikt_voor_afwijkende_custom_interactie_en_functionele_ontwerpen#comment-7478&quot;&gt;concreet Drupal noemt en niet 'CMS in het algemeen'&lt;/a&gt;. Wat jij beschrijft is inherent aan een CMS. Elke CMS kent haar manier van workflows en registratieafhandelijk en dus kost het maatwerk om hiervan af te wijken.&lt;/p&gt;

&lt;p&gt;Of &gt; Als jij het project zo belicht, is dat ook slecht voor de Drupalgemeenschap.(Achtergrond: De Drupalcommunity is misschien wel het belangrijkste onderdeel van Drupal. Mogelijk belangrijker dan het product zélf).&gt; Jammer, want nu vallen gemeentes misschien weer terug op hun oude vertrouwde Closed Source CMSen.&lt;/p&gt;

&lt;p&gt;Dit is allemaal, deels, waar. En heeft ook zeker meegespeeld bij het schrijven van deze artikelen en het herschrijven van het verhaal voor Webwereld.&lt;/p&gt;

&lt;p&gt;Zoals iemand anders &lt;a href=&quot;http://bler.webschuur.com/geen_cms_en_al_zeker_geen_drupal_voor_grote_webprojecten_zoals_gemeentesites&quot;&gt;reageerde&lt;/a&gt;: &lt;em&gt;een gedurfd artikel waar je vast een tijd op hebt gebroed.&lt;/em&gt;. Inderdaad ik heb al diverse malen op het punt gestaan dit te publiceren en telkens afgezien daarvan, omdat ik teveel mogelijk negatief effect zag. Laat ik daarom mijn persoonlijke drijfveren van het voeren van mijn onderneming opvoeren, in willekeurige volgorde.&lt;em&gt; Geld verdienen (middellange termijn drijfveer).&lt;/em&gt; Mooie, succesvolle en prettige projecten afronden.(dagelijkse, kortetermijn drijfveer).* (het gebruik van) Open Source, (daarmee) Transparantie en Open Standaarden bevorderen (ideologische en langetermijn drijfveer).&lt;/p&gt;

&lt;p&gt;Beginnend met waarom ik &lt;strong&gt;concreet Drupal noem&lt;/strong&gt; en niet &lt;strong&gt;het concept CMS&lt;/strong&gt;. Drupal is momenteel de keuze bij steeds grotere (overheids) projecten. Overal, niet alleen in Nederland. Alle andere Open Source projecten lijken van de radar te verdwijnen. Tot ik gewezen werd op &lt;a href=&quot;http://twitter.com/#!/JoGnet/status/44715902809284608&quot;&gt;DevCMS&lt;/a&gt;. Dat systeem raakte precies de kern van Het Stuk Dat Ik Niet Durfde Te Plaatsen. DevCMS is mogelijk (maar mogelijk ook niet) een veel betere oplossing. Waar het mij echter vooral om gaat is dat deze &lt;strong&gt;werkwijze&lt;/strong&gt; van DevCMS, precies is wat ik mis zie gaan in zoveel Drupal projecten. De Open Source community is beter gebaad bij low-level oplossingen dan eindproducten: Aan het design van gemeente-kerkstraaaten.nl heeft niemand in de Drupalgemeenschap iets. Aan de exacte configuratie ook niet. Maar aan DigiD bibliotheken, aan geavanceerde workflow en dergelijke wél. Wanneer Drupal als framework ingezet wordt, is dat laatste ook het resultaat voor de gemeenschap. Ik ben van mening dat op dit moment, veel van deze &quot;enterprice Drupalprojecten&quot; niks opleveren voor de Drupal gemeenschap. Het enige dat ik zie is een heel mooie Rijkshuisstijl theme en een DigiD module. Als je uitrekent dat, heel grove schatting, er ruim een miljoen budget aan Drupalontwikkeling van overheidssites doorheen is gejaagd, is het resultaat voor de community abominabel. Het netto effect van zulke grote projecten, is dus enkel &lt;em&gt;naamsvermelding&lt;/em&gt; een &lt;em&gt;beeldvorming&lt;/em&gt;. Drupal heeft een natuurlijke habitat waar het zich goed voelt: projecten waar Drupal helemaal voor geschikt is. En Drupal heeft een habitat waar het maar moeizaam kan overleven. Wanneer we Drupal te vaak in die laatste omgeving inzetten, ontstaat er frictie. Klanten worden ontevreden (vaak terecht) over Drupal, of de site die met Drupal gebouwd werd. Het publiek ziet veel gerotzooi, en gaat &lt;a href=&quot;http://www.geenstijl.nl/mt/archieven/2011/01/de_wat_kostte_deze_website_qui.html&quot;&gt;FUD&lt;/a&gt;, verspreiden. De schuld wordt bij Drupal neergelegd. Dan blijkt die &lt;em&gt;naamsvermelding&lt;/em&gt; en &lt;em&gt;beeldvorming&lt;/em&gt; opeens vaak negatief. Ik moet er niet aan denken dat we de kop te lezen krijgen:  &lt;strong&gt;Noord Holland breekt Drupal-infrastructuur af, wegens budget en kostenoverschrijdingen&lt;/strong&gt; Dan is het netto resultaat helemaal negatief. Noord Holland doet, overigens, zover ik weet, niets met Drupal.&lt;/p&gt;

&lt;p&gt;Wanneer Drupal vaker de schuld krijgt van minder geslaagde projecten is dat vervelend voor Drupal. Maar nóg vervelender voor Open Source. Als we blijven roepen dat The Gimp het beste is wat Open Source heeft voortgebracht, kan ik me heel goed voorstellen dat zovelen zo geweldig negatief zijn over Open Source (in het algemeen). The Gimp is een heel complex, geavanceerd en goed fotobewerkingsprogramma. Maar het is niet voor de leek. En vergt ook enorme aanpassingen van de graficus die van Photoshop komt. Voor bepaalde omgevingen, is the Gimp ideaal. Maar voor veel omgevingen ook helemaal niet.&lt;/p&gt;

&lt;p&gt;Als we van Drupal een soort tweede Gimp maken, door het overal in te zetten waar het negatief afstraalt op Open Source, zie ik bijna nog liever, helemaal geen Drupal meer ingezet worden. Omdat ik mijn drie drijfveren in balans wil houden, vertel ik klanten vaak dat ze niet Drupal moeten gebruiken: liever geen project dan een frustrerend, te duur, lelijk project. Maar wil ik ook alles in het werk stellen om Open Source goed en succesvol ingezet te zien worden. En hoop ik dat Drupal daarmee sterke kanten veel beter gebruikt ziet worden, in plaats van zich ingezet ziet worden in projecten waar het geen fatsoenlijke kans van slagen heeft, enkel omdat een Drupalontwikkelaar niet durft te zeggen dat Drupal hier ongeschikt voor is.&lt;/p&gt;

&lt;p&gt;Liever tweehonderd kleinere, tevreden Drupalgebruikers, dan één duur overheidsproject waar Drupal zich niet in thuisvoelt.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Minor sidenotes for Tagadelic users, regarding SA-CONTRIB-2011-013</title>
   <link href="http://berk.es/2011/03/16/minor-sidenotes-for-tagadelic-users-regarding-sa-contrib-2011-013"/>
   <updated>2011-03-16T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/16/minor-sidenotes-for-tagadelic-users-regarding-sa-contrib-2011-013</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://drupal.org/project/tagadelic&quot;&gt;Tagadelic&lt;/a&gt;, Drupals tag-cloud module, was found with a security vulnerability. From the &lt;a href=&quot;http://drupal.org/node/1095030&quot;&gt;advisory&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The module does not sanitize some of the user-supplied data before
displaying it on abovementioned cloud pages, leading to a Cross Site
Scripting &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;
vulnerability that may lead to a malicious user gaining full
administrative access.&lt;/p&gt;

&lt;p&gt;This vulnerability is mitigated by the fact that the attacker must have
a role with the 'administer taxonomy' permission which should generally
only be granted to trusted roles.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://drupalcode.org/project/tagadelic.git/commitdiff/da68e63&quot;&gt;The fix simply escapes&lt;/a&gt; the description and the title before they are passed along.&lt;/p&gt;

&lt;p&gt;This may cause problems to the people who &quot;abused&quot; this vulnerability. Admins who, for example, had embedded video, HTMl markup or javascript in the description of their tag cloud page, will no longer see this after upgrading.&lt;/p&gt;

&lt;p&gt;For them, there is no simple solution, other then the strongly discouraged &quot;solution&quot; of not upgrading. I discourage this not only for security reasons, but also, because any future release will re-introduce this issue.&lt;/p&gt;

&lt;p&gt;Taxonomy descriptions and titles were never meant to hold any markup in the first place, so if this upgrade hits people, they were abusing a Drupal-non-feature in the first place.&lt;/p&gt;

&lt;p&gt;A better solution would be to place such markup in a block and embed that in the theme (in a region). That way you use the proper Drupal-tools for the proper job.&lt;/p&gt;

&lt;p&gt;Also note that the &lt;strong&gt;unreleased Drupal 7 branch is not yet fixed&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal is ook minder geschikt voor afwijkende, custom interactie en functionele ontwerpen</title>
   <link href="http://berk.es/2011/03/10/drupal-is-ook-minder-geschikt-voor-afwijkende-custom-interactie-en-functionele-ontwerpen"/>
   <updated>2011-03-10T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/10/drupal-is-ook-minder-geschikt-voor-afwijkende-custom-interactie-en-functionele-ontwerpen</id>
   <content type="html">&lt;p&gt;Op mijn artikel over &lt;a href=&quot;http://bler.webschuur.com/geen_cms_en_al_zeker_geen_drupal_voor_grote_webprojecten_zoals_gemeentesites&quot;&gt;waarom Drupal voor grote projecten niet de meest geschikte tool is&lt;/a&gt;, kreeg ik ook wat reacties in de trant van&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Jij bekijkt het alleen vanuit de technische kant. En vergeet het designen, functioneel ontwerpen en het beheer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Dit ben ik niet vergeten, maar heb ik expres weggelaten om het verhaal niet nóg langer te maken.&lt;/p&gt;

&lt;!--break--&gt;


&lt;p&gt;Ter volledigheid: Functioneel ontwerp, interaction design en natuurlijk het grafisch ontwerpen zijn zaken die allemaal vooraf gaan aan het bouwen van een site.&lt;/p&gt;

&lt;p&gt;Hier doet zich in het geval van een CMS een interessant gegeven voor, namelijk dat het CMS erg beperkend werkt op de mogelijkheden binnen zo een ontwerp. Zo roep ik bij bijna alle Drupal-projecten:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Er moet dan wel een techneut bijzitten die kan bijsturen, zodat we Drupal optimaal gebruiken en geen zaken gaan bouwen die in Drupal heel moeilijk blijken.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Klinkt redelijk: dat de gebruikte techniek optimaal ingezet wordt. Dat je al tijdens de eerste ideeënfase Drupals ins- en outs leert kennen en je daardoor laat leiden, is geen verkeerde werkwijze.&lt;/p&gt;

&lt;p&gt;En zo voorkom je honderden uren ontwikkelen van een detail, dat, achter bezien, die honderden uren helemaal niet waard blijkt.&lt;/p&gt;

&lt;p&gt;Ook een goed idee: om zaken die al voor jou uitgewerk werden gratis in te zetten: scheelt geld.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Als je uit gaat van &quot;standaard waar het kan, maatwerk als het echt moet&quot; en je bent als klant al tevreden met hetgeen out of the box kan worden geconfigureerd (verwachtingen-management!) dan ben je een framework of custom code al tonnen verder om na te bouwen wat je met Drupal en alle contribs al hebt.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Een meer concreet voorbeeld:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Gebruik gewoon de standaard Drupal login- en registratieprocedure, dan hoeven we daar niet eens over na te denken en ook niets voor te ontwikkelen (en te onderhouden).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maar wat nu als je wél die vrijheid van ontwerpen wilt? Om dat login-verhaal erbij te halen: een goede businesscase, waarmee je conversie-ratio omhoog schijnt te schieten is: &lt;em&gt;mensen kunnen anoniem een comment posten en krijgen pas daarná een login- of registreer scherm. Met de optie om met openid, twitter, facebook enzovoort te registreren.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dan verdwijnt al het voordeel van een gratis, al uitgedacht systeem. En dat is precies wat ik overal zie gebeuren: duizenden euro's in een offerte voor een systeem dat afwijkt van hoe het CMS het &quot;al deed&quot;.&lt;/p&gt;

&lt;p&gt;Het argument &quot;standaard waar het kan, maatwerk als het echt moet&quot; onderschrijft daarmee mijn betoog alleen maar: een standaardproduct is simpel, goedkoop en snel uit te rollen (en als &lt;em&gt;dat&lt;/em&gt; al niet zo is, is er its anders, grondig, mis). Dan is een budget van enkele tonnen niet te verantwoorden: Die tonnen zitten in de praktijk altijd in dat &quot;maatwerk als het echt moet&quot;. En is de cirkel rond: &quot;standaard waar het kan, (een klein beetje) maatwerk als het echt moet en anders een tool die veel geschikter is voor maatwerk&quot;. Waarbij Drupal dus vooral ingezet kan worden voor kleinere, goedkopere projecten en de grote projecten (zoals overheids- of enterpricesites) meer geschikte tools moeten hebben.&lt;/p&gt;

&lt;p&gt;Men zegt niet voor niets dat &lt;a href=&quot;http://developmentseed.org/blog/2009/oct/28/smallcore-manifesto-help-us-build-better-teddy-bear&quot;&gt;A large portion of time spent building [...] is spent undoing the assumptions that Drupal has baked into core directly.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En daarmee hebben we design, ontwerp, en beheer ook meteen te pakken.&lt;/p&gt;

&lt;h2&gt;Design:&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Designers moeten zich confirmeren naar het CMS en hoe daarin zaken gedaan worden.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nu moet gezegd worden dat Drupal misschien niet het makkelijkst te leren is voor ontwerpers (themers), maar zeker een van de (zo niet de aller-) flexibelste qua design.&lt;/p&gt;

&lt;p&gt;Overigens heerst onder Drupal-ontwerpers ook veel ongenoegen over dat themen. Dat heeft voor een groot deel een architectuur-technische oorzaak: Drupal is niet MVC, heeft geen &quot;ontworpen&quot; theme-laag, maar grotendeels een organisch gegroeid &quot;gebied&quot;. Dat resulteerde in een inconsistente en rommelige &quot;interface&quot;, waarbij interface de gereedschapskist is, waarmee de ontwerper/themer aan de slag gaat.&lt;/p&gt;

&lt;h2&gt;(Interactie) Ontwerp&lt;/h2&gt;

&lt;p&gt;Een framework doet veel minder (tot geen) aannames over interactieontwerp. Een CMS doet dat wél. Een CMS biedt (duidelijk) afgebakende grenzen aan: zo doen we het en niet anders.&lt;/p&gt;

&lt;p&gt;Wanneer in het CMS deze interactie heel goed voor een bepaald doel op maat gemaakt is, heb je, wat ik eerder noemde, een &lt;strong&gt;hyper gefocused CMS&lt;/strong&gt;. PHPBB, een forum-tool, hoeft ook bijna geen aangepast interactieontwerp: het is immers al helemaal geöptimaliseerd voor het beheren van forums. Dat PHPBB je beperkt in de vrijheid zelf je admin- interfaces, workflows en dergelijke te ontwerpen, is nauwelijks van belang.&lt;/p&gt;

&lt;p&gt;Maar een CMS dat fungeert als generieke blokkendoos, vereist dat wél. Daar moet je de vrijheid hebben om zélf je menu-structuren helemaal in te richten, om zélf optimale workflows op te zetten. Kortom, precies het interaction-design, de wireframes of het funcitoneel ontwerp te kunnen volgen.&lt;/p&gt;

&lt;p&gt;Dan is &quot;Drupal optimaal gebruiken&quot; opeens veel minder waardevol, omdat je gewoon het ontwerp wilt kunnen volgen en niet rekening te moeten houden met de niet-passende ideeën van een modulebouwer.&lt;/p&gt;

&lt;h2&gt;Beheer.&lt;/h2&gt;

&lt;p&gt;Wanneer je zo een site bouwt, waarin je heel veel moet &quot;undo-en&quot;, eindig je niet zelden met honderd, hondervijftig modules. Waarvan een groot deel heel, project- of casespecifiek gebouwd is.&lt;/p&gt;

&lt;p&gt;Overigens kent het gemiddelde Rails-project waarmee ik bekend ben, ook ongeveer 50 externe, vereiste bibliotheken (gems). Maar vijftig bibliotheken is iets heel anders dan hondervijftig modules. Mijn ervaring met Django, Symfony, of .&lt;/p&gt;

&lt;p&gt;NET projecten is te gering om hier een generieke uitspraak over te kunnen doen, maar ik verwacht ongeveer hetzelfde. Een recent CakePHP project dat ik bouwde had twee zulke bilbiotheken: een PDF-library en een Twitter-libary. Niks meer.&lt;/p&gt;

&lt;p&gt;In Drupalprojecten kom ik niet zelden het volgende patroon tegen:
* Core doet X1
* Contrib module maakt daarvan X3
* Eigen module maakt deel van contrib module ongedaan en maakt het gewenste resultaat X2
* Het theme en theme-preprocessors bouwen daarvan X2'.&lt;/p&gt;

&lt;p&gt;Dat is ook wat developmentseed bedoelde met &quot;undoing&quot;. En er zit dus twee keer zoveel code en twee keer zoveel features in dan nodig: eerst de features en daarvoor nodige code die niet gebruikt gaan worden. En vervolgens code om die features weer te verbergen.&lt;/p&gt;

&lt;p&gt;Een ander, veelvoorkomend patroon is:
* Contrib A doet X op zijn eigen maniertje, niet helemaal passend bij het interactieontwerp.
* Contrib B doet Y op een ander, eigen maniertje.
* Eigen module zorgt dat X en Y consistent zijn en samenwerken volgens het interactieontwerp.
* Theme gebruikt deze data, verwerkt en past ze aan, tot een custom-interface.&lt;/p&gt;

&lt;p&gt;Dat heet in Drupal meestal &quot;gluecode&quot;. Omdat het een CMS is, en geen framework, hebben modules (en core) deze &quot;maniertjes&quot;. Een (goede) bibliotheek heeft geen maniertjes, maar is hoogstends &quot;opinionated&quot;; wat betekent dat het technische aannames doet, zoals bijvoorbeeld de naamgeving van je database.&lt;/p&gt;

&lt;p&gt;Dit patroon veroorzaakt ook een zogenaamde &quot;tight coupling&quot; tussen het theme en de implementatie. Een theme kan niet werken zonder dat alledrie modules beschikbaar zijn, én exact volgens een patroon ingeregeld. En andersom zal zonder het theme (of met een ander theme) de site heel anders (of helemaal niet) werken. &quot;Tight coupling&quot; is een bekende oorzaak van veel beheerproblemen en van enorm veel bugs.&lt;/p&gt;

&lt;p&gt;Een Drupalmodule is echter bibliotheek, implementatie en vaak nog design daarvan, in één. Een bibliotheek is enkel bibliotheek. De implementatie, en al helemaal het design is aan de bouwer. Er is dus geen undoing nodig. En geen gluecode (of: iemand zei me ooit: bouwen met Django is alléén maar gluecode schrijven).&lt;/p&gt;

&lt;p&gt;Wanneer je in Django een paar &lt;a href=&quot;http://djangopackages.com/&quot;&gt;Packages&lt;/a&gt; (bibliotheken) binnenhaalt, of in Rails een paar Gems opneemt, is het patroon heel anders:
* Core doet niets.
* Gem X biedt een aantal, geabstraheerde, helpers aan.
* Jou Rails app gebruikt die helpers om, met custom code, het gewenste resultaat te krijgen.&lt;/p&gt;

&lt;p&gt;Een voorbeeld:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails heeft van zichzelf geen uploadfunctionaliteit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jnicklas/carrierwave&quot;&gt;Carrierwave&lt;/a&gt; bied de mogelijkheid om heel eenvoudig files aan &quot;objecten&quot; toe te voegen.&lt;/li&gt;
&lt;li&gt;Het door jou ontwikkelde &quot;article&quot; model, gebruikt enkele regels code om plaatjes aan artikelen toe te voegen, deze te bewerken (thumbnails, watermarks enzovoort) en de resultaten beschikbaar te maken en weer te geven.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Voor beheer is dus belangrijk dat, om het gewenste &quot;ontwerp&quot; te bereiken, met een CMS vaak erg veel extra modules, addons of eigen code meegeleverd moet worden. Die veelal erg uiteenloopt qua implementatie, veiligheid en kwaliteit. 150 modules beheren is een hel. En helemaal als een groot deel daarvan gluecode en ondoing is.&lt;/p&gt;

&lt;p&gt;Bij een framework kunnen bibliotheken net zoveel uiteenlopen qua veiligheid en kwaliteit, maar de manier van inzetten is zodanig anders, dat beheer van deze bibliotheken nauwelijks moeite kost. De manier van inzetten volgt ook altijd heel duidelijk beschreven patronen, want dat is vastgelegd in het framework. Waardoor een willekeurige (nette) rails app door iedere rails-ontwikkelaar binnen enkele uren te begrijpen is.&lt;/p&gt;

&lt;p&gt;Bovendien zijn frameworks in essentie eigenlijk niet meer dan tools om al die bibliotheken te beheren en te implementeren. Bij een CMS is beheer van modules of addons vaak slechts een bijzaak, het is immers een Content management systeem en geen Code management systeem. In Drupal is dit welliswaar aan het veranderen met tools als &lt;a href=&quot;http://mustardseedmedia.com/podcast/episode43&quot;&gt;features&lt;/a&gt;, en drush. Maar het komt nog altijd niet in de buurt van een tool als &lt;a href=&quot;http://gembundler.com/rationale.html&quot;&gt;bundler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wanneer je je confirmeert aan het CMS heb je dus niet alleen veel minder ontwikkel- en denkwerk te verrichten, het beheer wordt ook nog eens stukken goedkoper.&lt;/strong&gt; Maar een project waarbij je nauwelijks ontwikkelt, je functioneel ontwerp helemaal laat leiden door de conventies van het CMS en het beheer een fluitje van een cent is, kost toch ook bijna niets?! Zo een site is in een week gemaakt. Kost een paarduizend euro aan design en themeing en kan per definitie nooit honderden uren werk kosten, want dat werk voorkwam je nu juist door alles standaard te doen!&lt;/p&gt;

&lt;p&gt;Waarom kost een Drupalsite dan toch vaak enkele (tien)duizenden euro's? Mis ik een belangrijke kostenpost? Of zijn we vooral &quot;Maatwerk waar het moet&quot; aan het bouwen met Drupal?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maar in praktijk valt dat toch allemaal wel mee, wordt Drupal toch erg vaak succesvol ingezet?</title>
   <link href="http://berk.es/2011/03/08/maar-in-praktijk-valt-dat-toch-allemaal-wel-mee-wordt-drupal-toch-erg-vaak-succesvol-ingezet"/>
   <updated>2011-03-08T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/08/maar-in-praktijk-valt-dat-toch-allemaal-wel-mee-wordt-drupal-toch-erg-vaak-succesvol-ingezet</id>
   <content type="html">&lt;p&gt;Een aantal mensen op twitter of per mail, vonden mijn &lt;a href=&quot;http://bler.webschuur.com/geen_cms_en_al_zeker_geen_drupal_voor_grote_webprojecten_zoals_gemeentesites&quot;&gt;artikel over waarom Drupal geen goede optie is voor grote projecten als gemeentesites&lt;/a&gt; niet erg concreet. Een reactie:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Er zijn recentelijk een aantal successvolle sites voor gemeentes gebouwd met Drupal. Dat is toch het bewijs dat je ongelijk hebt?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uiteraard! Deze sites bewijzen dat Drupal wel degelijk gebruikt kan worden voor zulke projecten. Ik zeg ook nergens dat het niet kan. Daarom eerst nog eens de essentie van mijn betoog:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drupal is een fijn platform om sites mee te bouwen. Ook grote sites. Maar Drupal is zeker niet het meest geschikte platform om die grote sites mee te bouwen. Drupal zal altijd duurder uitpakken (en mogelijk minder goede projecten afleveren) dan een meer geschikte tool. Frameworks als Django, Rails of Symfony zijn geschiktere tools.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En dan dat practische deel. Ik heb inmiddels wat tijd gehad om met &lt;a href=&quot;http://www.devcms.nl&quot;&gt;DevCMS&lt;/a&gt; te spelen. Merk op dat dit geen Drupal versus DevCMS artikel is, maar dat ik DevCMS opvoer als &lt;em&gt;een product dat een team kan bouwen met een framework&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Zoals alle Drupalontwikkelaars weten, is een accessmodel in Drupal erg lastig. Het is enorm ingewikkeld om een strak ingeregelde redactionele workflow te maken, waarbij artikelen enkel zichtbaar zijn nadat ze door een administratieve molen gehaald zijn. Iets schijnbaar simpels als (door mij vereenvoudigd citaat uit een recente offerteaanvraag): &lt;em&gt;Een groep artikelen wordt door de redactie in draft geschreven, dan geredigeerd, gaat dan naar afdeling Juridische zaken[...], bij goedkeuring naar eindverantwoordelijke en bij afkeuring terug naar de auteur(s)[...]. De eindverantwoordelijke kan de groep artikelen publiceren, waarna oude revisies bewaard blijven en de goedgekeurde revisieset online komt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ik zou, écht niet weten hoe ik dat makkelijk in Drupal gedaan kan worden. Ik schat, natte vingerwerk, voor deze feature minimaal 100 uur ontwikkeling in (maar zou een echte inschatting pas na een proof of concept durven geven). De crux zit hem overigens in het detail &quot;groep artikelen&quot;; wat een artikel met subartikeltjes zou kunnen zijn. En in &quot;strak ingeregelde&quot;, want iets wat hier ongeveer op lijkt is vrij eenvoudig in Drupal.&lt;/p&gt;

&lt;p&gt;DevCMS heeft dat dus wél. Ik weet uiteraard niet hoelang dat team daaraan heeft gebouwd, maar ik weet uit ervaring dat met Rails' statemachine addons zulk soort workflows niet enorm veel werk en tijd kosten. Uit de handleiding:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Nodes in the tree can be in several states, which is stored in the node’s status attribute:• unapproved: The node has been created or changed by an editor and is waiting for approval.• approved: The node has been approved, created or updated by an administrator or final editor. A new version of the content node is recorded.• rejected: An unapproved node has explicitly been rejected by an administrator or final editor. The editor responsiblefor the change will be notified when a node enters this state.• drafted: The node (unapproved or approved) is drafted, meaning a user has not finished changing this node andshould therefore not be shown on the website. The node will not be listed for approval.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When a content node is created by an administrator or final editor, it is automatically considered to be approved and therefore a new version of this node is recorded. [....] Conclusively, when an editor makes a change, the table of the content type will contain the new, unapproved version and the website should show the yaml-ized, approved version until the unapproved version has been approved by an administrator or final editor.&lt;/p&gt;

&lt;p&gt;Ze merken in de handleiding zélf nog op dat hier nog veel werk voor e DevMCS ontwikkelaars ligt. Dat ze dit nog lang niet naar eigen wens hebben afgerond. Maar mijn eerste indruk is dat dit al véle malen beter is dan welke redactionele workflow ik in Drupal ooit geïmplementeerd heb zien worden.&lt;/p&gt;

&lt;p&gt;Drupal kan iets essentieels als redactionele workflows best, maar vraagt een oplossing die zo goed als &lt;em&gt;van scratch&lt;/em&gt; opgebouwd moet worden: honderden uren bijelkaar klikken van standaardcomponenten en stukjes custom code, die ieder project telkens weer moet neertellen: voor iedere te implementeren Drupalsite weer opnieuw. En blijkt dna erg vaak op details slecht afgewerkt te zijn; resulterend in workflows die meestal wel redelijk, maar zelden &lt;em&gt;precies&lt;/em&gt; passen in een organisatie.&lt;/p&gt;

&lt;p&gt;Terwijl in een framework vrij eenvoudig gebruik gemaakt wordt van componenten als een statemachine om een workflow te bouwen die &lt;em&gt;exact&lt;/em&gt; past bij het project. Die dus &lt;em&gt;ook&lt;/em&gt; van scratch gebouwd moet worden, maar die, vanwege veel geschikter hergebruik van anderssoortige bibliotheken, zowel veel nauwkeuriger ingebed kan worden in een bestaande workflow, alsook veel sneller en makkelijker te implementeren is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Een CMS vraagt eigenlijk altijd dat de organisatie zich aanpast aan de redactionele workflow die ingebakken is in dat CMS, terwijl een framework de ontwikkelaars bouwstenen geeft om een precies passende workflow te ontwikkelen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En dat is slechts één klein practisch voorbeeld. Ik weet zeker dat we met veel meer zulke voorbeelden kunnen komen.&lt;/p&gt;

&lt;p&gt;Wat voor ogenschijnlijk simpel probleem heeft jou in Drupal uren uitzoek- en ontwikkeltijd gekost?&lt;/p&gt;

&lt;p&gt;Wat Doet Drupal, of een ander CMS out of the box (zonder enig werk) waar je uren ontwikkelen in een framework voor nodig hebt?
&lt;strong&gt;edit: tweede vraag toegevoegd&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Geen CMS en al zeker geen Drupal voor grote web-projecten zoals gemeentesites.</title>
   <link href="http://berk.es/2011/03/07/geen-cms-en-al-zeker-geen-drupal-voor-grote-web-projecten-zoals-gemeentesites"/>
   <updated>2011-03-07T00:00:00+01:00</updated>
   <id>http://berk.es/2011/03/07/geen-cms-en-al-zeker-geen-drupal-voor-grote-web-projecten-zoals-gemeentesites</id>
   <content type="html">&lt;p&gt;Gemeentes en overheden zouden hun sites niet met Drupal moeten bouwen.&lt;/p&gt;

&lt;h2&gt;Achtergrond.&lt;/h2&gt;

&lt;p&gt;Ik ben een fan van Drupal, ontwikkel er al jaren mee en heb veel ervaring met succesvolle en evenzovele gefaalde Drupalprojecten. Dat laatste vooral door mijn functie als &quot;probleemoplosser&quot; bij Drupalprojecten. Mensen huren mij vooral in om hun vastgelopen, of uitlopende Drupalprojecten te redden. Ik ben (misschien juist daardóór) ook een Drupal-scepticus. Drupal wordt teveel en te vaak ingezet voor projecten waar het helemaal niet geschikt voor is. Drupal mist ook zo ongeveer alles wat een goede &quot;architectuur&quot; vraagt. Het ontbeert een uitgekristalliseerd veiligheidsmodel, abstractie is geheel afwezig, rommel en broddelwerk in de community (de modules) zijn eerder regel dan uitzondering, enzovoort.&lt;/p&gt;

&lt;p&gt;Ik ben ook pragmatist; werk moet af (binnen de deadline). Sites moeten mooi zijn (en niet te duur). Software moet gewoon werken (voor de eindgebruiker) enzovoort. Goede academische opzet is leuk, maar nooit het doel: een goed opgezet project is juist zo goed opgezet omdat daarmee bovenstaande doelen gehaald kunnen worden! En nooit om het &quot;goed opzetten&quot; an Sich. Drupal moet dus ingezet worden waar het succesvol kan zijn. Waar het goed tot zijn recht komt. En het moet vooral niet ingezet worden voor projecten waar het ongeschikt voor is.&lt;/p&gt;

&lt;h2&gt;CMSen en hun alternatieven.&lt;/h2&gt;

&lt;p&gt;Grofweg zijn er drie groepen software waarmee sites gemaakt kunnen worden: CMS, Framework of Barebones.&lt;/p&gt;

&lt;p&gt;Een CMS is een kant-en klaar pakket, welke zonder programmeerwerk ingezet kan worden om content te beheren. Voor het gemak wordt de C van Content meestal zeer breed gerekt: ook software om een webwinkel mee te draaien of pakketten om klanten in te beheren worden onder deze groep geschaard: zo lang het maar inzetbaar is zonder programmeerwerk.&lt;/p&gt;

&lt;p&gt;Een framework is een omgeving, of platform, of softwarepakket, waarmee programmeurs sites kunnen bouwen. Vaak hebben frameworks allerlei complexe zaken al voor de programmeurs geabstraheerd en is programmeren nauwelijks meer dan het correct instellen van allerlei instellingen, en het verder uitwerken van voorgebakken code.&lt;/p&gt;

&lt;p&gt;Het is een enorm brede categorie, dus beperk ik, vanaf hier, tot enkele moderne, veelgebruikte frameworks: Symfony, Django en Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Een barebone is eigenlijk geen systeem, platform of omgeving, maar juist het ontbreken ervan. Gewoon van de grond af, iets zelf bouwen. Welhaast ieder &quot;webdesignburo&quot; heeft zo zijn eigen CMS gebouwd. Bijna alle grote &quot;enterpriceomgevingen&quot; zijn op deze manier gebouwd.&lt;/p&gt;

&lt;h2&gt;Open Source&lt;/h2&gt;

&lt;p&gt;«Gemeente Grootezee heeft nu DuurBetaaldCMS X, dus Drupal is Open Source, dus beter.» Is een veelgehoord argument. Laat vooropstaan dat juist voor publieke diensten zoals gemeentesites twee dingen enorm belangrijk zijn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Voor bezoekers en gebruikers: Toegankelijkheid en voldoen aan standaarden.&lt;/li&gt;
&lt;li&gt;Voor overheden: Onafhankelijk zijn van bedrijven, contracten en licenties.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Maar Drupal is zeker niet de enige oplossing die &lt;a href=&quot;http://isoc.nl/consultatie/resultaten.odt&quot;&gt;hieraan kan voldoen&lt;/a&gt;. Open Source betekent ook niet, dat iets als Open Source ingekocht moet worden. Een gemeente kan best een bestaand closed source pakket opkopen of iets geheel van de grond af aan laten ontwikkelen en het dan Open Source vrijgeven!Ik zie zelfs veel overheidsprojecten waar men Drupal modules heeft laten ontwikkelen die niet vrijgegeven zijn!Gelukkig blijken ook enkele projecten &lt;a href=&quot;http://drupal.org/project/rijkshuisstijl&quot;&gt;wel&lt;/a&gt; het &lt;a href=&quot;https://drupal.org/project/digid&quot;&gt;geval&lt;/a&gt;. In elk geval is het gebruiken van Open Source nog geen garantie dat de investering ook bij de gemeenschap terugkomt.&lt;/p&gt;

&lt;p&gt;Bij het gebruik van een framework is dat precies zo: het gebruiken van Open Source technologie garandeert niet dat het eindproduct ook aan de gemeenschap teruggegeven wordt. Maar dat kan wel, zie het voor Deventer op maat gemaakte CMS &lt;a href=&quot;http://www.devcms.nl/&quot;&gt;devCMS&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Return on Investment: Effectief bouwen van een site.&lt;/h2&gt;

&lt;p&gt;Het belangrijkste argument blijft echter dat Drupal, als CMS, nauwelijks geschikt is om grote complexe maatwerk-projecten mee te bouwen. Dat heeft grotendeels met de technische opzet van deze CMSen te maken.&lt;/p&gt;

&lt;p&gt;Daarvoor zijn hieronder enkele grafieken opgenomen. Ze geven een globaal inzicht van hoeveel offert men moet steken in ontwikkeling van een site na een X-tal uren.&lt;/p&gt;

&lt;p&gt;De y-as geeft de &quot;effectiviteit&quot; aan. Het aantal uren dat met per delivery nodig heeft. 100% effectief betekent géén effort en toch iets opgeleverd (en bestaat dus niet). De onderkant is 0%: enorm veel werk gedaan en niets kunnen leveren. De grafieken gaan uit van ervaren ontwikkelaars. Dus de initiële leertijd (om een taal, of raamwerk te leren gebruiken is buiten beschouwing gelaten).&lt;/p&gt;

&lt;p&gt;De X-as geeft het aantal uren dat besteed is aan het gehele project. Bijvoorbeeld: na 100 uur Drupal-ontwikkelen wordt dóórontwikkelen steeds duurder. De ontwikkelaar geraakt dan in een domein waar hij of zij alles zelf moet doen, zelf modules moet bouwen en steeds minder makkelijk toegankelijke kennis nodig heeft (bij ontwikkelaars bekend als: de hele broncode van Views moeten lezen om dat stomme cartesiaans product op te lossen).
&lt;img src=&quot;http://bler.webschuur.com/sites/bler.webschuur.com/files/Drupal_vs_frameworks_0.png&quot; alt=&quot;Grafiek van effectiviteit uitgezet tegen investering&quot; /&gt;
Overigens blijkt hier ook al meteen een ander veelgemaakte denkfout uit: een groot project is een project met lange doorlooptijd, veel manuren en grote budgetten. Het zegt niks over het uiteindelijke gebruik van een site. Drupal kan goed ingezet worden voor een site met miljoenen bezoekers. Precies andersom, kan een intranetomgeving voor slechts enkele tientallen onderzoekers mogelijk duizenden manuren opslorpen en daarmee een heel groot project zijn.&lt;/p&gt;

&lt;h3&gt;Wordpress, of de hypergefocuste CMSen&lt;/h3&gt;

&lt;p&gt;Wordpress is een CMS dat ontwikkeld werd voor één doel: Bloggen. Het is daarmee super geoptimaliseerd voor deze taak: gebruiksvriendelijk, doelgericht, afgestemd op de doelgroep enzovoort. Daarmee is ook meteen aangegeven wat het allemaal niet kan: namelijk: al het andere. Dit geldt uiteraard ook voor ontwikkelaars: zij bouwen met Wordpress altijd blog-achtige sites. Iets anders kán gewoon niet. Deze vorm van software opzetten heet ook wel &lt;a href=&quot;http://gettingreal.37signals.com/ch04_Make_Opinionated_Software.php&quot;&gt;opinionated software&lt;/a&gt;. Andere voorbeelden zijn PHPBB, het bekende forumsysteem, mediaWiki (software achter onder meer Wikipedia) of Status.net (je eigen twitter-community opzetten).&lt;/p&gt;

&lt;p&gt;In enkele uurtjes heb je een site draaien, maar écht maatwerk aanpassingen buiten het duidelijke kader en doel van het CMS kosten enorm veel werk.&lt;/p&gt;

&lt;h3&gt;Drupal, of de blokkendozen.&lt;/h3&gt;

&lt;p&gt;Drupal wordt vaak, ten onrechte, een content management framework genoemd, waarmee men probeert aan te geven dat Drupal best aardig kan meekomen als framework. De oorzaak van deze verwarring is dat Drupal eigenlijk meer een soort blokkendoos is. In tegenstelling tot een CMS als Wordpress met maar één doel, heeft Drupal die focus juist helemaal niet. Drupal is daarmee niet gebruiksvriendelijk (vriendelijk te gebruiken waarvóór?) niet geöptimaliseerd en niet afgestemd op een doelgroep. Dat geeft flexibiliteit en vrijheid. Ontwikkelaars kunnen er veel meer mee bouwen dan alleen datgene waarvoor het ooit bedoeld werd.&lt;/p&gt;

&lt;p&gt;Maar het is met nadruk géén framework, omdat het juist voor programmeurs weinig biedt: het is niet Object Georiënteerd, kent nauwelijks abstractie, vereist enorm veel duplicaatcode voor simpele aanpassingen, ontbeert iedere vorm van een ontwikkelomgeving, kent nauwelijks een migratiesysteem (Uitrollen van een site via een testomgeving naar de live omgeving). Enzovoort.&lt;/p&gt;

&lt;p&gt;Voor de oorspronkelijke doelgroep is dat ook helemaal niet erg: Een kleine site heeft helemaal geen OTAP straat nodig. Mijn persoonlijke blog via een ISO9002, ITIL-gecertificeerde workflow prubliceren? Kom nou!Maar als je dit juist wél wilt? Als je juist je systeem wilt koppelen aan andere processen, tools of systemen?Dan moet je alles zelf bouwen, met nauwelijks enige technische infrastructuur. De effectiviteit van al dat extra werk is dan meestal nog lager dan wanneer alles &quot;barebone&quot; van scratch gebouwd werd. Drupal blijkt dan vaak meer &quot;in de weg&quot; te lopen dan dat het &quot;meehelpt&quot;. Dit is onafhankelijk van de ervaring en kennis van Drupal: iemand met veel ervaring spendeert net zo goed 100+ uren aan een eenvoudige Create Read Update Delete omgeving van custom &quot;dingen&quot; zoals, zeg, betalingen. Drupal biedt hier nauwelijks tools voor: alle pagina's, lijstweergaves, workflows moeten met de hand geprogrammeerd worden, alsof het in een barebone PHP-omgeving gebouwd werd.&lt;/p&gt;

&lt;p&gt;Drupal kent een steile leercurve, veel steiler dan de doelgerichte CMSen. Binnen een tiental uren staat er een basissite. Binnen anderhalve week is met standaardcomponenten een heel aardige maatwerk site op te zetten. Maar daarna zakt alle productiviteit in: Buiten het gebruik van standaardcomponenten is Drupal een slecht ontwikkelplatform.&lt;/p&gt;

&lt;h3&gt;De frameworks&lt;/h3&gt;

&lt;p&gt;Deze kennen een redelijk lange opstarttijd, welke eigenlijk vooral bepaald wordt door de ervaring die men ermee heeft.&lt;/p&gt;

&lt;p&gt;Iemand die al enkele sites in Ruby on Rails bouwde, heeft binnen enkele uren al een basissite staan, maar een team dat nog nauwelijks ervaring heeft met frameworks, of de taal waarin ze gebouwd zijn (Ruby voor Rails en Python voor Django) zal, uiteraard, eerst de taal en de concepten moeten eigen maken.&lt;/p&gt;

&lt;p&gt;Dat hoeft bij een systeem als Drupal veel minder en bij een gefocust systeem als Wordpress helemaal niet. Iemand kan zonder programmeren een heel aardige site opzetten. Met Django kom je niet ver als &quot;Objecten en Classes&quot; enkel op de todolijst onder: &quot;moet ik nog eens induiken&quot; staan.&lt;/p&gt;

&lt;p&gt;Maar daarna gaat het snel. Wanneer het team, of de ontwikkelaar weet hoe zaken werken, hoe het conceptueel in elkaar steekt en de ontwikkelteams onder de knie heeft, blijft doorontwikkelen en maatwerk dezelfde effort kosten. Eigenlijk ontwikkelt men met een framework een CMS dat in de eerste categorie thuishoort: een hyper gefocust CMS.&lt;/p&gt;

&lt;p&gt;Een framework is ook veel beter geöptimaliseerd om met teams te werken. Drupal biedt nauwelijks abstractie (naar databases, services, diensten enzovoort), kent nauwelijks migraties, testomgevingen en deployment-tools. In frameworks kun je meestal niet eens zónder deze zaken ontwikkelen.&lt;/p&gt;

&lt;p&gt;Bovendien is de literatuur van frameworks ook zeer veel meer gericht op ontwikkelaars. Literatuur legt juist de structuur, filosofie en architectuur uit. Terwijl bij een CMS altijd het gebruik van het eindproduct op de voorgrond staat. De leercurve voor ontwikkelaars en -teams is daarmee meestal stukken lager dan bij een CMS dat eigenlijk niet bedoeld is voor ontwikkelaars maar voor eindgebruikers.&lt;/p&gt;

&lt;p&gt;Verder zak een goed framework ook hergebruik van code toelaten. Meer nog dan een CMS, waar maatwerk juist precies dat is: maatwerk: dus per definitie niet of nauwelijks herbruikbaar. Een framework maakt het juist zo, dat dat maatwerk de minst mogelijke inzet kost. En zorgt voor structuur en standaarden, waardoor zelf ontwikkelde bibliotheken los van het maatwerk gemaakt kunnen worden: een koppeling met een extern systeem bestaat dan bijvoorbeeld uit een abstracte &quot;algemene Python digiD bibliotheek&quot; met een klein sausje maatwerk eroverheen (de integratie van die bibliotheek in je Django-project). Hierdoor is het vrijgeven van werk als Open Source ook veel aantrekkelijker dan bij veel CMSen het geval is. Een Drupal-DigiD-module is enkel in Drupal te gebruiken (waarmee de betreffende overheid zich dus &quot;ingesloten&quot; heeft in Drupal). Terwijl een DigiD Ruby-gem, een Java library, PHP of Python Package veel breder inzetbaar is. Eigenlijk zijn zulke projecten veel waardevoller voor de (open source) gemeenschap.&lt;/p&gt;

&lt;p&gt;Wanneer een site gebouwd wordt door professionals, kan al binnen enkele uren een product klaarstaan. En kost het doorontwikkelen daarvan nauwelijks extra tijd per te ontwikkelen onderdeel. Tot het moment dat men ook buiten de kaders van dat platform wil gaan. Dan moeten plots eigen bibliotheken of diensten ontwikkeld worden. Maar dat geldt precies net zo voor geavanceerde features in een CMS. Ik bedoel dan vooral complexe zaken als worker-queues, load balancing, communicatie met andere systemen enzovoort. Een goed framework zal hier echter zeker niet in de weg lopen en mogelijk al allerlei tools (hooks, plugin-systemen, workflows) hebben klaarstaan om e.e.a. te kunnen integreren.&lt;/p&gt;

&lt;h3&gt;Conclusie&lt;/h3&gt;

&lt;p&gt;Drupal is zeer interessant voor projecten die onder de, ruwweg, tweehonderd uur blijven, projecten die ruwweg minder dan €5000 kosten. Daarboven zal een framework, mits gebruikt door ervaren web-ontwikkelaars, altijd efficiënter blijken. Drupal biedt dan geen enkel voordeel, anders dan dat het &quot;Open Source&quot; is. Maar Open Source kan net zo goed met een framework.&lt;/p&gt;

&lt;p&gt;Overheden en grote projecten zouden dan ook best niet in Drupal gebouwd moeten worden, maar in een daarvoor veel geschikter framework.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I chose to disclose a security issue and not report it to Drupal securty team.</title>
   <link href="http://berk.es/2011/02/03/why-i-chose-to-disclose-a-security-issue-and-not-report-it-to-drupal-securty-team"/>
   <updated>2011-02-03T00:00:00+01:00</updated>
   <id>http://berk.es/2011/02/03/why-i-chose-to-disclose-a-security-issue-and-not-report-it-to-drupal-securty-team</id>
   <content type="html">&lt;p&gt;Okay. So I did not play nice. In fact, I probably brought quite some sites &lt;em&gt;out there&lt;/em&gt; in trouble, by disclosing a Drupal &lt;a href=&quot;http://twitter.com/#!/berkes/status/32125321654312960&quot;&gt;security issue on Twitter&lt;/a&gt;, without mentioning it to the security Team.&lt;/p&gt;

&lt;p&gt;I had several reasons for doing this. * I was frustrated. With this module, its code and it causing several ugly bugs in an already frustrating site. Being frustrated and having access to Twitter is never a good idea. More on this below. * It has been one of many  security issues in contribs I stumbled upon off late. Some I have reported, quite some being hard to reproduce are not worth reporting. I am by no means a security expert. Hence the frustration.&lt;em&gt; It has been one of many, many more project-only security issues I came across off late. Some in custom code, some in themes, many, many more in crappy configuration and even crappier custom-gluecode. Hence the frustration: I often get the idea that it is way to easy to write crappy, insecure or bad-performing Drupal-code. I know of other projects where it is much harder to build insecure code.&lt;/em&gt; This specific issue has been around since December 2007. That was the main point for me to vent my anger and disclose the issue. It is never smart to post such issues when frustrated. And I am very sorry if I brought the Drupalk security team in trouble by this. That was not intended. When I often see the quality of contributions, I get very sad. Or frustrated. I too, often make bad code; I too learn new things about writing proper code every day. And I try to improve my code by not allowing in features, code, or other stuff that misses Good Architecture, fails to fit in the Grand Scheme and so on.&lt;strong&gt; If code is bad, people should not use it! At all. Bad code should not be allowed to exist. &lt;/strong&gt;Bad code will exist. Bugs will creep in. Security holes will open. That is reality. But we should not allow such things to be kept for long. Any software project should have processes in place to weed out bad code, security issues and such. Drupal has such processes; one of them is the security-team.&lt;/p&gt;

&lt;p&gt;However. This hole has existed (at time of writing) for probably over 3 years. No one has reported it, yet over 2000 sites are reportedly using this module. Here something is wrong. Had I reported it to the security team, then some patch would have been brought out. And all 2000 sites would have been patched (you patch, don't you?). At least the choice to either close down the project, fix it, or anything else, whould have been that of the security team, not mine. I understand that fully. However, this time I chose the disclosure. For two (IMO) good reasons: * A project that is actively used, &lt;strong&gt;with a security hole&lt;/strong&gt;, by thousands of users for several years, is wrong. This is the proof that at least some trivial security holes will leak trough in the current process. We must be aware of that fact.* People should know their own responsibility. I am probably very optimistic if I say that all 2000+ reported users of this module have found that hole themselves, fixed it locally, but did not manage to report it to Drupals security team. Realistic to think that hardly any of these reported users have it fixed locally. To me, that is a good indication that many-eyeballs fail to find security holes. This too, must be known.&lt;/p&gt;

&lt;p&gt;I should probably have taken another route to raise such awareness. But in the light of things, I find a full-disclosure a good way to raise this: &lt;strong&gt; Your Drupal (Or wordpress, Joomla! or proprietry) site with 100+ modules and custom code is probably insecure. Unless you have reviewed it and know for sure it is not. &lt;/strong&gt; Be aware of that.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clean and maintainable pattern for blocks development in Drupal 6</title>
   <link href="http://berk.es/2010/12/31/clean-and-maintainable-pattern-for-blocks-development-in-drupal-6"/>
   <updated>2010-12-31T00:00:00+01:00</updated>
   <id>http://berk.es/2010/12/31/clean-and-maintainable-pattern-for-blocks-development-in-drupal-6</id>
   <content type="html">&lt;h1&gt;Clean and maintainable pattern for blocks development in Drupal 6&lt;/h1&gt;

&lt;p&gt;Drupal7, has finally &lt;a href=&quot;http://drupal.org/node/224333#remove_op&quot;&gt;removed the confusing $op parameters&lt;/a&gt; from hooks. And replaced them with a family of related hooks instead; one hook per &lt;em&gt;op&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here is a way to achieve the same in Drupal 6; by building a simple router in &lt;a href=&quot;http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6&quot;&gt;hook_block()&lt;/a&gt;. We use a user function for this, a patter well known in Drupal as &lt;em&gt;hook&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Implementation of hook_block().
 */
function example_block($op = 'list', $delta = '', $edit = array()) {
  if ($op == 'list') {
    return _example_block_list();
  }

  $callback = &quot;_example_block_#{$op}_#{$delta}&quot;;
  if (function_exists($callback)) {
    if ($op == 'save') {
      return call_user_func($callback, $edit);
    }
    else {
      return call_user_func($callback);
    }
  }
  # @TODO remove debug
  # else {
  #   dvm(&quot;block callback not found: #{$callback}&quot;)
  # }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here on, we can implement a simple family of functions, instead of cramping everything in one huge and cluttered multifunctional hook implementation.&lt;/p&gt;

&lt;p&gt;For example, we implement the list callback as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function _example_block_list() {
  # ...build blocks...
  return $blocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the preceding _underscore before the function. This has no special technical meaning, but is a de-facto standard in PHP to indicate a function &lt;a href=&quot;http://drupal.org/node/70335&quot;&gt;should be considered private&lt;/a&gt;. This way, we tell other developers to never even consider using our callbacks; leaving us the freedom to change our functions at will.&lt;/p&gt;

&lt;p&gt;But first, dissecting our hook_block will show what we actually do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($op == 'list') {
  return _example_block_list();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes an exception for list. $op list, is the operator that does not recieve a delta, because it defines those &lt;em&gt;delta's&lt;/em&gt;. A delta, is a severe misnoner in Drupal, because it is simply an identifier. However, Drupal calls it a delta, so should we. Another common misunderstanding, is that a delta must be numeric; beacause that is what the name delta implies. &lt;strong&gt;This implementation works best for simple textual identifiers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;list&lt;/strong&gt; we define the blocks. For example to define two blocks, &lt;em&gt;foo&lt;/em&gt; and &lt;em&gt;bar&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function _example_block_list() {
  $blocks['foo'] = array(
    'info'       =&amp;gt; t('Renders block foo'),
  );
  $blocks['bar'] = array(
    'info'       =&amp;gt; t('Renders block bar'),
  );
  return $blocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a lot more paramters you can define, they are all added in the final example implementation.&lt;/p&gt;

&lt;p&gt;Back to the hook_block, we see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$callback = &quot;_example_block_#{$list}_#{$delta}&quot;;
if (function_exists($callback)) {
  if ($op == 'save') {
    return call_user_func($callback, $edit);
  }
  else {
    return call_user_func($callback);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A function callback is built, code checks if that exists and if so calls that function.
We do make another exception, for save. Save takes another paramter, $edit, which all the others callbacks do not take. To keep things clean, we should only pass parameters to functions that actually have these implemented, hence the exception for save.&lt;/p&gt;

&lt;p&gt;And, finally, adding a little piece of code that learns us of not implemented callbacks, so we can implement these, or ignore them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# @TODO remove debug
# else {
#   dvm(&quot;block callback not found: #{$callback}&quot;)
# }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously to be removed before releasing.&lt;/p&gt;

&lt;p&gt;We can now implement some of the callbacks. To do that, say we want a setting on block &lt;em&gt;foo&lt;/em&gt;, but not in bar. This setting will allow us to toggle a &quot;Read more »&quot;-link on block &lt;em&gt;foo&lt;/em&gt; in the block's configuration. For this, we need a &lt;em&gt;configure&lt;/em&gt; callback and a &lt;em&gt;save&lt;/em&gt; callback.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Block callback for configure op, delta foo.
 *
 * @return Array
 *   Form api array.
 */
function _example_block_configure_foo() {
  $form = array();
  $form['read_more'] = array(
    '#type'          =&amp;gt; 'checkbox',
    '#title'         =&amp;gt; t('Show &quot;Read more »&quot;'),
    '#default_value' =&amp;gt; variable_get('example_foo_read_more', FALSE),
  );
  return $form;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure simply returns a FAPI form, as per &lt;a href=&quot;http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6&quot;&gt;hook_block documentation&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Block callback for save op, delta foo.
 *
 * @param $edit Array
 *   The submitted form values.
 *
 * @return Array
 *   Form api array.
 */
function _example_block_save_foo($edit) {
  ## Save values for block
  variable_set('example_foo_read_more', $edit['read_more']);
  return TRUE;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save simply saves the configure to a variable.&lt;/p&gt;

&lt;p&gt;Finally, we need a &lt;em&gt;view&lt;/em&gt; callback for each block: the function that actually renders the block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Block callback for view op, block foo.
 *
 * @return Array
 *   Block array with content and subject key.
 */
function _example_block_view_foo() {
  $block['subject'] = t('Title of block #1');
  $block['content'] = 'Content of block #1';
  if (variable_get('example_foo_read_more', FALSE)) {
    $block['content'] .= l(t('Read more »'), 'foo/more');
  }
  return $block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A similar &lt;em&gt;view&lt;/em&gt; for &lt;em&gt;bar&lt;/em&gt; is needed, this time without the optional &quot;Read more »&quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Block callback for view op, block bar.
 *
 * @return
 *   Block array with content and subject key.
 */
function _example_block_view_bar() {
  $block['subject'] = t('Title of block #2');
  $block['content'] = 'Content of block #2';
  return $block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you get more and more blocks, you can even split them out over include-files. By using module_load include, we can read a new file for each delta. This becomes only usefull when your module has many different blocks, each block having many helper functions and -libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function example_block($op = 'list', $delta = '', $edit = array()) {
  if ($op == 'list') {
    return _example_block_list();
  }

 $lib_file = &quot;example_#{$delta}&quot;;
  module_load_include('inc', 'example', );
  # ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to move all callbacks to this include. With exception of the &lt;em&gt;list&lt;/em&gt;, that one should remain in the module, since that is the one to define the available blocks. It would be possible to make that dynamic too, to call an info per include-file. The benefit would be, that the includefiles are completely self-contained; have all the information about a single block in a single file. The downside is complexity and overhead.
We use &lt;em&gt;$delta&lt;/em&gt; to group the libraries, so you have one file for each block. The alternative would be to have a library per op. This makes things only worse, since your code will be spread all over the place, and a new block, removal of block or change in a block would often require you to change all four files, instead of just the module and the block-file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The final *example.module* looks like this:

&amp;lt;?php // $Id$
/**
 * Module:      example for blocks pattern
 * Date:        2010-12-31  10:18
 * Author:      ber
 *
 * Description:
 *   Example blocks 
 *
 * License:
 *
 *   Copyright (C) 2010  ber
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.pro See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
 *
 */

/**
 * Implementation of hook_block().
 */
function example_block($op = 'list', $delta = '', $edit = array()) {
  if ($op == 'list') {
    return _example_block_list();
  }

  $callback = &quot;_example_block_{$op}_{$delta}&quot;;
  if (function_exists($callback)) {
    if ($op == 'save') {
      return call_user_func($callback, $edit);
    }
    else {
      return call_user_func($callback);
    }
  }
  #else { #TODO: remove debug!
  #  dvr(&quot;block callback not found: {$callback}&quot;);
  #}
}

/** Renderer lists all blocks.
 *
 * @return
 *   Block description array. see hook_block() documentation for details on array contents.
 */
function _example_block_list() {
  $blocks['foo'] = array(
    'info'       =&amp;gt; t('Renders foo'),
    'cache'       =&amp;gt; BLOCK_CACHE_PER_ROLE, # | BLOCK_CACHE_PER_USER | BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_GLOBAL | BLOCK_NO_CACHE,
    'status'     =&amp;gt; TRUE,
    'weight'     =&amp;gt; 0,
    'region'     =&amp;gt; '',
    'visibility' =&amp;gt; 1,
    'pages'      =&amp;gt; '',
  );
  $blocks['bar'] = array(
    'info'       =&amp;gt; t('Renders bar'),
    'cache'       =&amp;gt; BLOCK_CACHE_PER_ROLE, #| BLOCK_CACHE_PER_USER | BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_GLOBAL | BLOCK_NO_CACHE,
    'status'     =&amp;gt; TRUE,
    'weight'     =&amp;gt; 0,
    'region'     =&amp;gt; '',
    'visibility' =&amp;gt; 1,
    'pages'      =&amp;gt; '',
  );
  return $blocks;
}

/** Block callback for configure op, delta foo.
 *
 * @return Array
 *   Form api array.
 */
function _example_block_configure_foo() {
  $form['read_more'] = array(
    '#type'          =&amp;gt; 'checkbox',
    '#title'         =&amp;gt; t('Show &quot;Read more »&quot;'),
    '#default_value' =&amp;gt; variable_get('example_foo_read_more', FALSE),
  );
  return $form;
}

/** Block callback for save op, delta foo.
 *
 * @param $edit Array
 *   The submitted form values.
 *
 * @return Array
 *   Form api array.
 */
function _example_block_save_foo($edit) {
  variable_set('example_foo_read_more', $edit['read_more']);
  return TRUE;
}

/** Block callback for view op, block foo.
 *
 * @return Array
 *   Block array with content and subject key.
 */
function _example_block_view_foo() {
  $block['subject'] = t('Title of block #1');
  $block['content'] = 'Content of block #1';
  if (variable_get('example_foo_read_more', FALSE)) {
    $block['content'] .= l(t('Read more »'), 'foo/more');
  }
  return $block;
}

/** Block callback for view op, block bar.
 *
 * @return
 *   Block array with content and subject key.
 */
function _example_block_view_bar() {
  $block['subject'] = t('Title of block #2');
  $block['content'] = 'Content of block #2';
  return $block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here on, you can start improving even more, e.g. by splitting out the theme functions that render blocks, the database or parsers that fetch and model the data and so on. But that is for later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lokale klokkenluiderssite Opennu is een farce</title>
   <link href="http://berk.es/2010/12/20/lokale-klokkenluiderssite-opennu-is-een-farce"/>
   <updated>2010-12-20T00:00:00+01:00</updated>
   <id>http://berk.es/2010/12/20/lokale-klokkenluiderssite-opennu-is-een-farce</id>
   <content type="html">&lt;p&gt;Vandaag releaste Michel Spekkers een &quot;&lt;a href=&quot;http://opennu.nl&quot;&gt;Lokale wikileaks&lt;/a&gt;&quot;. Ik ben enorm voorstander van transparantie en van wat wikileaks doet. Ik kan het daarom alleen maar toejuichen als het voorbeeld van wikileaks gevolgd wordt en de beweging Decentraliseert. Dat maakt de beweging alleen maar sterker. Maar wat hier gereleased is, is verre van een wikileaks. Ik durf zelfs te stellen: een farce. Een klokkenluiders-outlet (wikileaks) staat of valt bij één zeer belangrijke voorwaarde: • Anonimiteit moet gegarandeerd zijn. Nu én in de toekomst.&lt;/p&gt;

&lt;p&gt;Die garantie vereist weer drie belangrijke voorwaarden:• De organisatie moet juridisch zeer sterk opgezet zijn• De infrastructuur moet technisch zeer sterk opgezet zijn• De marketing en PR moet goed opgezet zijnDat eerste is mij zeer onduidelijk, dus ik kan er weinig meer over zeggen dan dat het een éénpersoonsactie lijkt te zijn die juridisch helemaal niets uitgewerkt heeft. De reden dat dit belangrijk is, is heel eenvoudig: als justitie met een dwangbevel de servers en administratie komt ophalen, moet dat tegengegaan kunnen worden. Het kán niet zo zijn dat bij de eerste de beste tegenslag alle gelekte informatie in handen van het OM komt. Dat is geen garantie tot anonimiteit, dat is slechts een aardig probeersel.&lt;/p&gt;

&lt;p&gt;Het tweede is mij wél duidelijk. Dat is gewoon enorm slecht. Technisch mist er enorm veel. Een klein onderzoekje leverde met het volgende op: De domeinnaam opennu.nl is beheerd door domein-direct.nl, onderdeel van &lt;a href=&quot;http://www.openkvk.nl/17153162&quot;&gt;web-direct&lt;/a&gt;. De server staat bij &lt;a href=&quot;http://www.openkvk.nl/17153162&quot;&gt;flexwebhosting&lt;/a&gt;, en lijkt op zijn beurt weer onderverhuurd aan &lt;a href=&quot;http://ingento.nl/&quot;&gt;ingento&lt;/a&gt;, die in eerste instantie niet ingeschreven lijkt te zijn bij de KvK. Op deze server draaien, volgens een korte analyse minstens dertien andere sites.&lt;/p&gt;

&lt;p&gt;Ik ken die bedrijven niet, kan er zo snel even geen verdere informatie over vinden, maar dat geeft ook niet. Belangrijk is het simpele feit dat door jou gelekte data in het beste geval op een shared omgeving van een keten goedwillige bedrijven terecht komt. Slechts één van deze bedrijven hoeft een overheid een goede reden te geven om de servers in beslag te nemen, en jou gelekte informatie, inclusief je IP-adres enzovoort, komt precies daar terecht waar je dat niet wilt hebben.&lt;/p&gt;

&lt;p&gt;Een zo mogelijk nóg belangrijkere duiding dat deze zeer waarschijnlijk goedwillende mijnheer Spekkers zijn zaken niet voorelkaar heeft en jou anonimiteit absoluut niet kan garanderen, is het &lt;a href=&quot;https://opennu.nl/&quot;&gt;gebrek aan https&lt;/a&gt;, een veilige verbinding om over te uploaden. Het certificaat is ongeldig, de https site bestaat überhaupt niet, en de mogelijkheid om hierover te uploaden dus ook niet. Zoals het nu staat, kan  (en zal) iedereen op je netwerk en iedereen tussen jou en opennu.nl gewoon meelezen met wat je stuurt. Zelfs als je versleutelde bestandemeern stuurt, kan je IP adres, het gegeven dát jet iets naar opennu stuurt en alle bijbehorende data gewoon afgeluisterd worden. En zover ik weet gebeurt dit ook in iedere (middel)grote organisatie die haar netwerk een beetje beveiligd. Dus vanaf je werk dat ene PDFje uploaden, zorgt bijna direct dat je door de mand valt bij deze opzet. En vanaf thuis, kan nog iedereen tussen jou en opennu afluisteren. ziggo heeft gewoon logs waarin mensen kunnen nalezen dat jij een PDF stuurde in de nacht van N op M. Nee, zoals Spekkers het nu heeft opgezet is het hoogstends een goedwillend, maar erg naïef gebeuren. Een snel aangemaakt hotmail-accountje op naam van Piet Snot, kerkstraat 12, ons dorp, bied nog meer garanties.&lt;/p&gt;

&lt;p&gt;En daarmee eerder een bedreiging voor de wikileaks beweging dan een toevoeging. Ik moet er niet aan denken dat het bijna onontkoombare ontslag van een Nederlandse ambtenaar, na lekken via opennu breed uitgemeten wordt in de pers. Dat doet de wikileaks beweging alleen maar onbetrouwbaar overkomen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Counter queries for complex, none-distinct SQL in Drupals Pager system.</title>
   <link href="http://berk.es/2010/11/10/counter-queries-for-complex-none-distinct-sql-in-drupals-pager-system"/>
   <updated>2010-11-10T00:00:00+01:00</updated>
   <id>http://berk.es/2010/11/10/counter-queries-for-complex-none-distinct-sql-in-drupals-pager-system</id>
   <content type="html">&lt;p&gt;I think everyone knows these moments: You have a problem, a question. And just by asking that question, the answer pops up in your head. It happens to me often, when programming.
It is obvious: by asking the question, you have to analyze and simplify the problem. And by doing so&lt;/p&gt;

&lt;p&gt;Today, there was another great way &lt;a href=&quot;http://stackoverflow.com/users/73673/berkes&quot;&gt;Stackoverflow helped me&lt;/a&gt;: I had a problem with a &lt;em&gt;Drupal pager-query on a none-distinct SQL query&lt;/em&gt;. And right when I was finishing up, the answer struck me. But because I spent so much effort in the question, and I don't want to forget, I decided to share it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Drupal uses &lt;a href=&quot;http://api.drupal.org/api/drupal/includes--pager.inc/function/pager_query/6&quot;&gt;pager_query&lt;/a&gt; if you wish to get a limited result, for used as a paged, list.&lt;/p&gt;

&lt;p&gt;A simple example would be (I am aware of my code not adhering to Drupal standards, done that for simplicity):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$nodes = pager_query('SELECT title, created FROM node WHERE published = 1', 20, 0);
while ($node = db_fetch_object($nodes)) {
   $html .= &quot;$node-&amp;gt;title ($node-&amp;gt;created)&quot;;
}
$html .= theme('pager'); //This collects &quot;magic&quot; variables set by pager_query to build a string containing pagerlinks.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I need to tackle a much more complex query, one that is not distinct as above. &lt;strong&gt;I am not sure if I should solve this in the domain of SQL, or rather in the domain of Drupal/PHP.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;session&lt;-&gt;node is an N:1 relation: any node has_many sessions. A session has_one node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$nodes = pager_query('SELECT node.nid, node.title, node.created, sessions.time, sessions.sid FROM node INNER JOIN sessions ON session.nodes_nid = node.nid WHERE published = 1', 20, 0);
while ($node = db_fetch_object($nodes)) {
   $n-&amp;gt;title = $node-&amp;gt;title;
   $n-&amp;gt;nid = $node-&amp;gt;nid;
   unset($node-&amp;gt;title, $node-&amp;gt;nid);
   $n-&amp;gt;sessions[$node-&amp;gt;sid] = $node;
   $items[$n-&amp;gt;nid] = $n;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above routine allows me to query the database ONCE, fetch nodes that have_many playdates, and collect them in a list that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has one row per $node.&lt;/li&gt;
&lt;li&gt;each $node row has a list of all its associated sessions under $node-&gt;sessions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, pager_query lists one item for each row, instead of using a smarter counter query.&lt;strong&gt;This is where the answer became clear&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;And so, the answer is really simple: counter query&lt;/h2&gt;

&lt;p&gt;the last parameter of pager_query() is an alternative query to be used as counter. In the abovementioned example. that would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = 'SELECT node.nid, node.title, node.created, sessions.time, sessions.sid FROM node INNER JOIN sessions ON session.nodes_nid = node.nid WHERE published = 1';
$counter = 'SELECT COUNT(DISTINCT(node.nid) FROM node INNER JOIN sessions ON session.nodes_nid = node.nid WHERE published = 1';
pager_query($sql, 20, 0, $counter);
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Op Apple kun je geen kritiek hebben.</title>
   <link href="http://berk.es/2010/11/08/op-apple-kun-je-geen-kritiek-hebben"/>
   <updated>2010-11-08T00:00:00+01:00</updated>
   <id>http://berk.es/2010/11/08/op-apple-kun-je-geen-kritiek-hebben</id>
   <content type="html">&lt;p&gt;Open een willekeurig forumtopic of blogpost met &quot;Mac&quot; &quot;gewoon werkt&quot; en &quot;virussen&quot; in de titel, en zie de discussies daar ontvouwen als ware religieuze oorlogen. Ik vermoed dat &lt;a href=&quot;http://www.nrcnext.nl/blog/2010/11/08/kritiek-op-geslotenheid-van-apple-is-gewoon-geneuzel-in-de-marge/&quot;&gt;Niels t Hooft, in zijn stuk in NRC-next&lt;/a&gt; dat voor ogen had, want anders had hij het niet zo vol tegenstellingen, drogredenen en feitelijke onjuistheden neergeschreven. Niels gaat uit van het idee dat virussen binnenkomen met programma's. Daar is eigenlijk zijn hele stuk op gebouwd. Virussen komen alleen niet binnen doordat gebruikers deze installeren, virussen die jezelf binnenhaalt heten Trojaan horses en is een heel ander probleem. Dat is niet semantisch, maar écht een probleem van een heel andere orde. Ook Mac, ook Linux, zijn onveilig voor Trojan horses: als iemand zo dom is zelf de applicatie te installeren, kun je hoogstends beschermen wat zo een trojan horse kan aanrichten. Dat doet BSD en daarmee Mac ook heel goed. En Linux ook, trouwens. Belangrijk is om applicaties te (kunnen) screenen. Het grootste argument tegen de geslotenheid van de Appstore is dan ook dat niemand weet óf Apple eigenlijk wel controleert op Trojans. Blijkbaar niet altijd &lt;a href=&quot;http://www.boingboing.net/2009/11/05/iphone-game-dev-accu.html&quot;&gt;even goed&lt;/a&gt;. Een ander argument is mogelijk nog belangrijker: is geslotenheid eigenlijk wel nodig voor controle? Android, Firefox plugins, de Ubuntu Installer en nog veel meer voorbeelden van weinig tot zeer open systemen zijn bekend, waarbij ook gewoon veiligheidsproblemen onderzocht worden. Deze modellen zijn niet bewezen slechter (of beter), maar in elk geval wel opener. Niels gelóóft graag dat gesloten beter is, net als menig Open Source liefhebber gelóóft dat openheid altijd beter is. Maar daarmee is het nog niet waar. Zover mij bekend, zijn de geleerden het na vele -tig jaar onderzoeken nog altijd niet eens over welk model nu het beste is. Mac weet dat, maar doet alsof haar model het beste is. Zoals ieder commerciëel bedrijf met goede marketing moet doen.&lt;/p&gt;

&lt;p&gt;Niels is op zijn Mac goed tegen virussen (ik bedoel hier dus géén trojans) beschermd door de zeer goed gebouwde basis, het Operating Systeem. Een Open Source Unix variant genaamd BSD. Linux (bekend onder &quot;merknamen&quot; als Ubuntu, Debian, SuSE, Redhat enzovoort) is een andere bekende variant. Windows gebruikt een hele andere &quot;onderkant&quot; die in zichzelf een heel stuk minder veilig is. Dus dat Niels weinig last van virussen heeft, is vooral te danken aan de Open Source wereld. Niet aan de geslotenheid van de Mac. Het andere grote deel van virussen, komt voort uit gaten in (veel) gebruikte software. Adobe (bekend van de PDFs) en Internet Explorer zijn bekende voorbeelden van software met veel veiligheidsproblemen, gaten, via welke virussen binnenkomen. Ook hier is de oplossing van het probleem juist openheid gebleken. In het geval van Internet Explorer (IE), de webbrowser die standaard met Windows meekomt, had Microsoft een monopolie. Iedereen gebruikte deze standaardbrowser, waardoor ze er zelf niet aan doorontwikkelden; een zeer verouderd systeem, waar nauwelijks alternatief voor was werd niet meer verbeterd. De crackers en virusbouwers zaten niet stil, IE wel. Totdat Firefox kwam: veiliger, sneller beter. Dat was ongeveer de slogan waarmee zij het monopolie van IE doorbraken. Microsoft antwoordde met doorontwikkeling: IE7, IE8 en nu bijna 9. Ook met slogans als &quot;veiliger sneller beter&quot; gemarkt. Keuze bleek het medicijn voor de grootste digitale veiligheidsprobleem ooit, te zijn. Gebrek aan keuze, bleek de oorzaak van de kwaal. Adobe's PDF reader problemen zijn van een andere aard en komen ook grotendeels, indirect, uit het gebrek van keuzevrijheid. Mac leverde deze (lekke) software ook gewoon voor haar Macs. Gelukkig hebben Macgebruikers de keuzevrijheid om andere PDF software te gebruiken. Nóg wel. Totdat Mac een deal met Adobe sluit en alle andere PDF-lezers weigert. Nu is dit specifieke voorbeeld haast ondenkbaar: Adobe en Mac hebben juist ruzie. Maar hypothetisch is het probleem enorm. Kiest Mac voor één App om X te doen, dan heeft de gebruiker niet de keuze om het veiligere Y te installeren. Zoals ik al zei: de geleerden zijn het nog altijd niet eens over welk model nu het veiligst is: open of gesloten, het Kapitalisme of Geleidde markt, eco-diversiteit of juist niet, marktwerking of overheidsbemoeienis. (of een van de vele tussenvormen en andere alternatieven). Maar in élk geval is het zo dat in veel gevallen júist keuzevrijheid en openheid tot betere software leidden. Als Niels gelijk had, en minder keuze iets goeds was, dan werkten we nu allemaal op windows95, belden we met een Nokia 3310. Gelukkig kon Niels kiezen en koos hij een Mac met MacOS en een iPhone.&lt;/p&gt;

&lt;p&gt;Dan wordt een derde partij door Niels aan de haren erbij gesleept. Eentje die volledig buiten het hele verhaal van &quot;waarmee houd je het beste virussen buiten de deur&quot; staat, Defective by Design. Die organisatie is opgericht om de strijd met DRM aan te gaan. Dus om kopieerbescherming en aanverwanten te bestrijden. Dat Mac DRM gebruikt om ervoor te zorgen dat u uw Apps niet kan delen met derden, is haar een doorn in het oog. Dat is een heel andere discussie voor een heel ander moment. Niels komt met een klassieke drogreden uit vele religieuze debatten &quot;If you are not with us, you are against us&quot;. Zoals alles is ook hier de wereld een stuk genuanceerder dan Defective by Design en Niels doen vermoeden.&lt;/p&gt;

&lt;p&gt;Ik zal niet ontkennen dat Mac gebruiksvriendelijk is, zaken goed doordenkt en enorm goed weet te marketen. In tegendeel: dat doen ze geweldig. Maar net zoals mijn Philips tandenborstel &quot;gewoon werkt&quot; deed mijn eerdere Braun dat ook; keuzevrijheid staat &quot;gewoon werken&quot; niet in de weg. Die twee sluiten elkaar niet uit. Al doet Mac dat graag zo lijken, want het is hun standaard antwoord op de klacht dat hun model gesloten is. Een drogreden, om de ware reden (gewoon, net als ieder ander gezond bedrijf geld verdienen aan klanten en marktaandeel veroveren) niet te hoeven noemen. Klinkt vriendelijker, maar is daarom nog niet waar.&lt;/p&gt;

&lt;p&gt;Als voorbeeld komt Niels met de Android store. Een winkel die open is. Google voert wel enig toezicht, maar dat is, jaja, vooral om te voorkomen dat onveilige applicaties te weren. Maar daar zijn niet notoir meer onveilige Apps in de Mac winkel te  vinden dan in de Android winkel. Dat zegt Niels gelukkig ook niet, maar hij doet wel alsof dit een oorzaak gevolg is. Dat is het dus niet. De geslotenheid zorgt niet voor beter werkende producten. Op mijn Ubuntu-laptop werken applicaties vele malen beter samen, zijn ze veel beter &quot;usable&quot; dan op menig windowsomgeving. En Ubuntu werkt volgens een nóg veel opener manier dan Android. Niet alleen mag iedereen zijn App bijdragen in de &lt;a href=&quot;http://www.ubuntu.com/desktop/features#apps&quot;&gt;repositories&lt;/a&gt;, maar aan veel applicaties kan ook nog eens iedereen meewerken. Zomaar, zonder een bedrijf ertussen die bepaalt wie meedoet en waarom! Ik wil hier de discussie niet aangaan of Windows danwel Ubuntu beter is op bepaald gebied. Maar wél weerleggen dat het specifieke probleem dat Niels noemt, het onderling samenwerken van Apps, blijkbaar niet met het gesloten model te maken heeft. Waarschijnlijk gebruikt Niels zelf op zijn Mac ook heel veel &lt;a href=&quot;http://www.opensourcemac.org/&quot;&gt;open source software&lt;/a&gt;. De macgebruikers die ik ken, wel in elk geval. En die software werkt heel goed samen met andere software. Software die gebruiksvriendelijk is én goed met andere software samenwerkt. Oh, en die hij overigens niet meer kan gebruiken Niels als hij alleen nog maar via een Appstore software mag installeren.&lt;/p&gt;

&lt;p&gt;Ik hoor je nu al de hele tijd denken: jamaar, de sales, de cijfers? Klopt, Mac verkoopt goed. Mac heeft minder last van virussen dan Windows PCs. Maar Linux, bijvoorbeeld Ubuntu, heeft er nóg minder. Is het daarmee beter? Is daarmee het Ubuntu-model bewezen beter? Ik gelóóf van wel, maar in tegenstelling tot Niels durf ik dat dan niet als bewijs op te voeren.&lt;/p&gt;

&lt;p&gt;Veel mensen roepen dan meteen &quot;dat komt omdat er veel meer windows PCs zijn&quot;. Dat is niet waar, er zijn veel meer Linux Servers en toch zijn er nauwelijks virussen voor geschreven. Bovendien schreef ik in de eerste paragraaf al, zitten Mac (BSD), Linux en Windows gewoon anders in elkaar. Windows Vista heeft relatief gezien véél minder last van virussen dan haar windows 95 voorgangers. Gewoon omdat het technisch veel beter doordacht is. Maar ook dit is een heel andere discussie; wie er hier ook &quot;gelijk&quot; heeft, met Niels zijn argument dat je beter een gesloten model kunt hebben om veiliger software te verdelen, heeft het in elk geval niets van doen.&lt;/p&gt;

&lt;p&gt;En de cijfers dat er meer iPhone Apps verkocht worden dan Android Apps? Zoals Niels stelt?  Mac verkoopt toch veel meer Apps dan Android? Als Niels gelijk had, en keuzevrijheid slecht was voor het gebruiksgemat en de veiligheid, dan was Google toch juist veiliger en beter bruikbaar? Hoe meer applicaties, hoe minder veilig. En hoe minder gebruiksvriendelijkheid. Dat was juist het betoog van Niels. Ik begrijp hem niet meer. Maar dat heb ik wel vaker met religieuze fanatiekelingen. Dat ik ze niet begrijp.&lt;/p&gt;

&lt;p&gt;En als afsluiter de idee dat op een Mac überhaupt alles &quot;gewoon werkt&quot;. Ik houd niet van anekdotische bewijsvoering, maar we hebben hier ook maar één voorbeeld nodig om te bewijzen dat dit onwaar is. Dat een Mac dus hoogstens &quot;veel vaker dan X of Y gewoon werkt&quot;. Maar zeker niet &quot;altijd&quot;. Tijdens de trainingen die ik geef en bij de klanten die ik op weg help, moet ik vaak Macgebruikers helpen. Met computerproblemen. Programma's die niet werken, firewalls die bepaalde applicaties laten crashen. Bestanden die niet geopend kunnen worden. Ach, &lt;a href=&quot;http://macwereld.nl/forum/apple_applicaties/&quot;&gt;kijk zelf maar&lt;/a&gt;, hoeveel gebruikers nog problemen hebben.&lt;strong&gt;Update&lt;/strong&gt; Tijdens het inkorten (jaja het eerdere stuk was nǵ langer) heb ik een belangrijk gegeven weggelaten, maar vergeten elders terug te laten komen: Niels nuanceert &lt;a href=&quot;http://nielsthooft.com/openheid-geslotenheid-vs-integratie-fragmentatie&quot;&gt;op zijn blog&lt;/a&gt; enorm veel van de stellingen. Waardoor hij dáár duidelijk laat merken wel degelijk de nuances te begrijpen en tegenstellingen in zijn artikel onderbouwt. Neemt niet weg dat het stuk dat in de krant verscheen gewoon vol drogreden en tegenstellingen zit.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal filetypes for Ack grep.</title>
   <link href="http://berk.es/2010/10/27/drupal-filetypes-for-ack-grep"/>
   <updated>2010-10-27T00:00:00+02:00</updated>
   <id>http://berk.es/2010/10/27/drupal-filetypes-for-ack-grep</id>
   <content type="html">&lt;p&gt;How often did I not think &quot;sigh, I wish I could just &lt;em&gt;grep&lt;/em&gt; this pile of invoices for that date&quot;. But unfortunately, the all-powerfull search-tool &lt;a href=&quot;http://www.kingcomputerservices.com/unix_101/grep_this.htm&quot;&gt;grep&lt;/a&gt; is not available &lt;acronym title=&quot;In real life&quot;&gt;IRL&lt;/acronym&gt;. But it is available on most unices, including all Linux systems and OSX.&lt;/p&gt;

&lt;p&gt;But life gets even better. With &lt;a href=&quot;http://betterthangrep.com/&quot;&gt;Ack-grep&lt;/a&gt;. A much faster, better and more targeted tool. For example , it will ignore all sorts of files you usually wanted to ignore, when &quot;grepping&quot; trough a pile of files. You know, searching for that line &quot;sent to foo@example.com&quot;, but getting all sorts of results from backup files, revision-databases and what more. Ack does this. And more.&lt;/p&gt;

&lt;p&gt;Ack also allows you to define profiles. Sets of files to be searched trough and sets of files to ignore. It comes with &lt;a href=&quot;http://betterthangrep.com/&quot;&gt;lots of built in sets&lt;/a&gt;, but not with Drupal predefined.&lt;/p&gt;

&lt;p&gt;To get a Drupal profile, just &lt;a href=&quot;http://stackoverflow.com/questions/950755/how-can-i-search-the-contents-of-module-files/950855#950855&quot;&gt;add a .ackrc file to your home directory&lt;/a&gt; and add the profiles there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;--type-set=drupal=.php,.inc,.module,.install,.info,.engine&quot; &amp;gt;&amp;gt; ~/.ackrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can search trough Drupal with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ack &quot;implementation of hook_&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you want to ignore all none-drupal(ish) files, with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ack --drupal &quot;implementation of hook_&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you want to search trough all files, except Drupal-files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ack --nodrupal &quot;Licence&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many additional tools, such as gedit addons, will use ack, when found (over grep). And will benefit from this drupal profile too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Waarom ik spotify meteen alweer gedag zeg.</title>
   <link href="http://berk.es/2010/10/25/waarom-ik-spotify-meteen-alweer-gedag-zeg"/>
   <updated>2010-10-25T00:00:00+02:00</updated>
   <id>http://berk.es/2010/10/25/waarom-ik-spotify-meteen-alweer-gedag-zeg</id>
   <content type="html">&lt;p&gt;Ik ga spotify even een kans. Aangezien ik meer dan €10 per maand aan muziek uitgeef, leek mij het model van spotify ook wel te boeien: voor €10 per maand onbeperkt muziekluisteren. Nieuwe, oude, muziek uit eigen bibliotheek, muziek van vrienden enzovoort. Mooi model. Alleen niet voor mij.&lt;!--break--&gt;  - Met wat crativiteit, is er zeker geen gebrek aan (legale) gratis muziek. Mijn &quot;Nooit beluisterd&quot; playlist bevat voor 4 weken, 2 dagen en 3 uur muziek, nog.
  - Wanneer je jou spotify account opzegt (of het bedrijf spotify verdwijnt) ben je al &quot;jou&quot; muziek kwijt. Niet die al op je hardeschijf staat (eerder gekocht of gedownload), maar alle muziek die van spotify zélf is. Muziek die je koopt, betaal je eenmaal voor en kun je dan blijven luisteren. Of de winkel waar je hem kocht nu falliet gaat of niet, maakt niets uit. In principe kunt je deze muziek zelfs nog doorverkopen (in geval van CDs en LPs enzo, vooral). Muziek is écht van jou.
  - De spotify muziekspeler voor linux is rotzooi. Hij &lt;a href=&quot;http://getsatisfaction.com/spotify/topics/spotify_for_linux_segfaults_under_ubuntu_maverick_beta_upcoming_10_10&quot;&gt;crached&lt;/a&gt;, is traag, past niet in mijn desktop (knopjes zitten allemaal verkeerd), werkt niet met de normale multimedia knoppen op mijn keyboard enzovoort. Als ik betaal voor software, dan moet het gewoon werken. Zónder allerlei trucs en moeilijkdoenderij. Spotify werkt niet &quot;gewoon&quot;, iets wat iedere andere (gratis), OpenSource muziekspeler wél gewoon doet.
  - Als je vanaf een andere computer (of mijn mobiel) luistert, stopt de andere client. Logisch, gezien hun bedrijfsmodel, dat je nooit vanaf meerdere plekken je tegelijk muziek kunt luisteren. Voor mij vervelend, omdat we in de huiskamer een multimedia PCtje hebben staan (IPV een TV), waarop we muziek luisteren, TV kijken enzovoort. Als mijn huisgenoot muziek wil luisteren op die PC moet ze eerst mij uitloggen, op haar spotify inloggen (die heeft ze overigens niet, dus dit is hypotetisch) en dan pas kan ze luisteren. Als ze dat per ongeluk vergeet, stopt bij mij de muziek met spelen. Veel gedoe en verre van ideaal, voor onze situatie.
  - Eigendomsrecht van de luisterdata is vaag. Spotify kan (en moet, deels) alles bijhouden wat ik speel. Dat vind ik niet heel erg, zolang maar duidelijk is wie de eigenaar van die data is. Het is immers (redelijk) vrij privacygevoelige data. Eerlijkheid gebied me te zeggen dat ik al tig jaar mijn muziek-speel informatie naar last.fm stuur en recent ook nog naar libre.fm. Dus in mijn geval maakt het toevallig niet zo veel uit. Last.fm en libre.fm kan ik echter opzeggen (en gewoon mijn muziek blijven luisteren) of verwijderen. Spotify kan ik ook opzeggen, maar, zie boven, dan ben ik wel mijn muziek &quot;kwijt&quot;. Privacy is en blijft een probleem met dit soort diensten.
Dus rest mij niets anders dan Spotify waarwel te zeggen en ooit eens een OpenSource, distributed, vrij en mooi playlist-sharing-systeem op te zetten. Misschien bovenop libre.fm of in een alternatieve versie van Diaspora, wie weet. Mooi zomervakantieproject.&lt;/p&gt;

&lt;p&gt;Even terugkomend op die gratis muziek: Dat zijn veel mixxes van bijvoorbeeld soundcloud, tig podcasts, een paar &quot;herbeluisterde&quot; shows van Studio Brussel, een grote hoeveelheid &lt;a href=&quot;http://www.archive.org/details/netlabels&quot; title=&quot;&quot;&gt;creative commons en andere vrije muziek&lt;/a&gt; en een flinke backlog aan dooie-muziekanten-torrents. Ik weet heus wel dat downloaden van een volledige discography van iemand, op piratebay niet volgens de regels is, maar als Micheal Jackson dood is, voel ik geen enkele scrupules om zijn discografie binnen te halen. Nouja, behalve misschien dan dat hij ook enorm slechte muziek gemaakt heeft :). Aan aanvoer van &quot;nieuwe&quot; muziek bij mij dus geen gebrek. En ik voel me nog minder schuldig omdat ik uiteindelijk wel heel veel muziek &lt;a href=&quot;https://one.ubuntu.com/basic/&quot;&gt;koop&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Four troublesome notes with Drupal module-updates and upgrades.</title>
   <link href="http://berk.es/2010/10/13/four-troublesome-notes-with-drupal-module-updates-and-upgrades"/>
   <updated>2010-10-13T00:00:00+02:00</updated>
   <id>http://berk.es/2010/10/13/four-troublesome-notes-with-drupal-module-updates-and-upgrades</id>
   <content type="html">&lt;p&gt;On &lt;a href=&quot;http://stackoverflow.com/questions/3920629/how-to-upgrade-drupal-modules/3922112#3922112&quot;&gt;stackoverflow&lt;/a&gt;, I wrote an answer to someone having issues with Drupal module-upgrades. Something I thought worth noting down here too. There are many gotcha's in module-upgrades, that people find out sooner or later. Often found out in not-so-nice-ways. :)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not all module developers think the same about dot (minor) releases: sometimes 5.x-1.2 and 5.x-1.3 are major rewrites or come with completely new features, themeable-functions, pages or APIs.&lt;/li&gt;
&lt;li&gt;Not all upgrades are compatible with others. Sometimes you cannot update module B to 6.x-1.4, because of its dependency with A, when A is not compatible with 6.x-1.4 (yet). Drupal does not support dependencies on versions.&lt;/li&gt;
&lt;li&gt;Major releases &lt;em&gt;imply&lt;/em&gt; (but do not guarantee) incompatibility, or even complete rewrites: Upgrading from 5.x-1.4 to 5.x-2.1 might force major rewrites of custom code, including your theme.&lt;/li&gt;
&lt;li&gt;Security updates often are dependent on earlier releases: 6.x-1.2 might introduce new features (that you do not want, or wish to ignore), 6.x-1.3, can be a security-release that requires (some of the) the changes in 6.x-1.2 to be available. You must then either fiddle around with patches, or go trough that feature release anyway.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Off course there are all these other notes to take, such as database-migrations (that might go wrong and destroy or break all your heard-earned data), new-features-come-whith-new-bugs problems, your own, custom code breaking on a new version, etceteras. But you already knew that, did you not? :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Moet je Drupal7 gaan gebruiken voor een nieuwe Drupalsite?</title>
   <link href="http://berk.es/2010/09/27/moet-je-drupal7-gaan-gebruiken-voor-een-nieuwe-drupalsite"/>
   <updated>2010-09-27T00:00:00+02:00</updated>
   <id>http://berk.es/2010/09/27/moet-je-drupal7-gaan-gebruiken-voor-een-nieuwe-drupalsite</id>
   <content type="html">&lt;p&gt;In een recente mailcorrespondentie voorzag ik iemand van wat advies over Drupal 7. Drupal 7 is de Drupal die binnenkort gereleased zal worden als opvolger van Drupal 6. Drupal6 is daarmee niet ten einde, mogelijk blijft deze nog jaren onderhouden. Drupal 5 komt daarmee wél te vervallen. De mail vroeg: &gt; Ik wil eigenlijk gaan beginnen met D7 aangezien deze er nu bijna is en het project sowieso nog wel een 4-tal maanden zal duren.&lt;/p&gt;

&lt;p&gt;Een medewerker van Dries bij Acquia duwde ons ook in deze richting voor onze community site. En ik antwoordde: Eerlijkgezegd geloof ik hier voor geen meter in. Tenzij je concrete voorbeelden boven water kunt krijgen waar Drupal7 &lt;em&gt;nu&lt;/em&gt; al beter is dan Drupal6. Ik zie die voor jullie project nog niet. Je zult hoe dan ook een technisch ontwerp (naar een functioneel ontwerp) moeten opzetten. Als in dat technisch-ontwerp grote problemen boven water komen, die met Drupal7 opgelost zouden worden, is dat natuurlijk een goede optie. Maar als dat niet zo is, is Drupal7 altijd een nadeel:  - &lt;strong&gt;Onbekend&lt;/strong&gt; (reken op maanden, mogelijk een jaar na release voordat er net zoveel experts en developers voor zijn als voor 6).
 - &lt;strong&gt;Onbekend&lt;/strong&gt; (marketeers roepen natuurlijk dat het getest en klaar is, maar dat moet eerst nog bewezen worden).
 - &lt;strong&gt;Onaf&lt;/strong&gt;, third party modules worden grotendeels al vooraf klaargemaakt. Maar wat ik daarvan gezien heb, valt a) het aantal modules dat voor 7 klaat is tegen, maar is vooral b) de kwaliteit van die ports erg (erg) slecht vaak. Verwacht dat in het eerste half jaar van Drupal7 de helft van die modules vervangen wordt door alternatieven.
Als je zo vroeg op de trein springt is dat uiteraard niet te voorkomen in geval drupal 7 nieuwe features heeft die in 6 niet te krijgen zijn, maar heel onverstandig, omdat je écht in de voorhoede meedraaft, en dus veel zelf moet uitvinden (in plaats van gebaande paden te volgen) en daarmee vaak doodlopende paden bewandelt, met onvermijdelijke pijnlijke migraties voor de boeg. Mijn advies, kortom was, om voorlopig nog niets met Drupal 7 te gaan doen. Het betreft hier een groot project (4 maanden ontwikkeling) en dus niet De Blog Van Mien. Voor een klein, goed te overzien project is Drupal 7 precies net zo goed als Drupal 6. En zijn kleine voordelen als &quot;Maar Drupal 7 heeft een heel coole interface&quot; geldige argumenten om ervoor te kiezen. Maar voor ieder groter project moet je je richten op de technische eisen en wensen. En daarvan heeft Drupal 7 mogelijk enkele kant-en-klaar, terwijl 6 die niet heeft. Maar andersom is de kans even zo groot, of groter, dat vor Drupal6 daar al een goed getestte en uitgewerkte oplossing is, terwijl in de wereld van Drupal 7 nog niets uitgewerkt is voor dat specifieke probleem.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal needs you to conform, a framework will conform to you.</title>
   <link href="http://berk.es/2010/09/13/drupal-needs-you-to-conform-a-framework-will-conform-to-you"/>
   <updated>2010-09-13T00:00:00+02:00</updated>
   <id>http://berk.es/2010/09/13/drupal-needs-you-to-conform-a-framework-will-conform-to-you</id>
   <content type="html">&lt;p&gt;An answer on &lt;a href=&quot;http://stackoverflow.com/questions/3697789/why-use-symfony-not-drupal/3698456#3698456&quot;&gt;stackoverflow&lt;/a&gt; to the endless question &quot;should I choose Drupal or Foo&quot; gets the whole problem with many Drupalprojects in one sentence:&lt;/p&gt;

&lt;blockquote&gt;
  Drupal needs you to conform, symfony will conform to you - choose whichever you want.
&lt;/blockquote&gt;


&lt;p&gt;I would refrase that as:&lt;/p&gt;

&lt;blockquote&gt;
  Drupal needs you to conform, a framework will conform to you - choose whichever you want.
&lt;/blockquote&gt;


&lt;p&gt;Now, that would not be a big problem, if you have that freedom: the &lt;strong&gt;freedom to conform&lt;/strong&gt;. But many projects (clients) have certain demands, or expectations.&lt;/p&gt;

&lt;p&gt;On those projects, you often cannot conform. And even if you can conform, you often should not conform; not every case is best served with The Drupal Way[tm].&lt;/p&gt;

&lt;p&gt;Ask yourself these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do I want to conform to The Drupal Way?&lt;/li&gt;
&lt;li&gt;Can I conform to The Way of The Drupal?&lt;/li&gt;
&lt;li&gt;Will my client allow us to conform to the Drupal Way?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the answer to any of these is &lt;em&gt;yes&lt;/em&gt;, the next step would be to find out, what That Drupal Way[tm] is; that Drupal Way often needs to be found out and described to in great detail.&lt;/p&gt;

&lt;p&gt;If the answer to any of these questions is &lt;em&gt;no, certainly not&lt;/em&gt;, you might want to not use Drupal at all. Or, more correct, not use a CMS at all, but learn a real framework.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Toggle your webservers' production environment by using symlinks</title>
   <link href="http://berk.es/2010/09/08/toggle-your-webservers-production-environment-by-using-symlinks"/>
   <updated>2010-09-08T00:00:00+02:00</updated>
   <id>http://berk.es/2010/09/08/toggle-your-webservers-production-environment-by-using-symlinks</id>
   <content type="html">&lt;p&gt;I love simple. If I can do something in a simple way, that, is the way I will do it. Releasing new features, updates or upgrades of sites can be a PIASS, even when you use the whole shebang of version-control systems, release-management environments and what more.&lt;/p&gt;

&lt;p&gt;I think it can be done very simple (okay, I don't run bank-applications that are critical to the world economy, but still) with symlinks.&lt;/p&gt;

&lt;p&gt;Say, I have a tool called &quot;foo&quot; that gets a critical update. I know most of you would just fire up ws_ftp (the more savvy would prolly fire up filezilla) and then overwrite the old code with the new code and be done with it.
That, however, is the kind of &lt;em&gt;simple&lt;/em&gt; that is even too simple for me. It is so extremely error-prone, that I don't recommend it for anyone. Not even if you have that site that is only visited by three people and an accidental cat, per week.&lt;/p&gt;

&lt;p&gt;What I do, is keep two direcories for my app, under &lt;em&gt;/var/www&lt;/em&gt;: &lt;em&gt;foo_r&lt;/em&gt; and &lt;em&gt;foo_l&lt;/em&gt;. The _r and _l stand for left and right. You could also call them one and two, or tinky and winky.
One symlink points to them: &lt;em&gt;foo&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ber@luscious:/var/www$ ls -ahl
  lrwxrwxrwx  1 www-data www-data 12 2010-09-08 19:31 foo -&amp;gt; foo_l
  drwxr-xr-x  6 www-data www-data 4,0K 2010-07-20 17:30 foo_l
  drwxr-xr-x  6 www-data www-data 4,0K 2010-09-08 19:29 foo_r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My vhost (&lt;em&gt;/etc/apache2/sites-enabled/foo&lt;/em&gt;) points to &lt;em&gt;foo&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;VirtualHost *:80&amp;gt;
ServerAdmin webmaster@foo.com
    ServerName foo.com
DocumentRoot /var/www/foo
    &amp;lt;Directory /var/www/foo&amp;gt;
     AllowOverride all
     Options -MultiViews
    &amp;lt;/Directory&amp;gt;
  &amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all you have to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;update the code in the folder that is &lt;em&gt;not&lt;/em&gt; symlinked to: foo_r, in the above example.&lt;/li&gt;
&lt;li&gt;optionally test that code. (but you had your tests done on the test-environment, not?)&lt;/li&gt;
&lt;li&gt;switch the symlink: &lt;code&gt;rm /var/www/foo &amp;amp;&amp;amp; ln -s /var/www/foo_r /var/www/foo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This way, you solve many problems, without brining in heavy shots, such as capistrano, or whatever-release-tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;During overwriting the code with new code, your users could (and will) hit a situation where half of the code is new, and the other half is old.&lt;/li&gt;
&lt;li&gt;If you work with a revision-controlsystem, you can solve merge conflicts before people get hit by them.&lt;/li&gt;
&lt;li&gt;You can test-drive your unreleased code, by introducing a vhost that uses the foo_r (or the other one, at least the one unused at that moment) as documentRoot.&lt;/li&gt;
&lt;li&gt;If you have your code spread over multiple servers, you can distribute it first, then switch the simlinks on all the servers at once, instead of waiting for code to be distributed and having a period during which parts of the balanced servers serve old code and parts serve the new stuff.&lt;/li&gt;
&lt;li&gt;This is /so/ simple, that it can be integrated in about every script and adminstrative frontend.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Uitgevers: maak van mij geen boekenpiraat</title>
   <link href="http://berk.es/2010/08/11/uitgevers-maak-van-mij-geen-boekenpiraat"/>
   <updated>2010-08-11T00:00:00+02:00</updated>
   <id>http://berk.es/2010/08/11/uitgevers-maak-van-mij-geen-boekenpiraat</id>
   <content type="html">&lt;p&gt;De Nederlandse e-book gaat hard de mp3 achterna. De volgende industrie, dit keer regionaal, staat op het punt kapotgepiraat te worden. Jammer? Nee, eigen schuld. Vandaag in de de Pers een &lt;a href=&quot;http://www.depers.nl/cultuur/500993/Waar-blijft-ons-digitale-boek.html&quot;&gt;zuur stuk over het uitblijven van de e-book&lt;/a&gt;. Niet de e-book reader, die is overal verkrijgbaar, maar het boek zélf. Sinds een kleine week lees ik mijn boeken ook digitaal, heerlijk. Ik ben vooral nog aan het hamsteren. Maar van de ruim 160 boeken, die ik er nu op heb staan, zijn er maar ongeveer 60 legaal. Het merendeel uit &lt;a href=&quot;http://mashable.com/2007/11/12/public-domain-ebook-sources/&quot;&gt;diverse&lt;/a&gt; public-domain, of &lt;a href=&quot;http://openboox.com/tags/creative_commons&quot;&gt;creative commons&lt;/a&gt; bronnen, enkele gekocht. Die gekochte versies zijn allemaal dure it-boeken, van mijn &lt;a href=&quot;http://bler.webschuur.com/wishlist&quot;&gt;wishlist&lt;/a&gt;. De rest is dus illegaal. Illegaal in de zin van: ik heb ook de papieren versie niet in de kast staan, ben niet van zins een legale versie te gaan aanschaffen en ik voel me geenszins shuldig over het &quot;stelen&quot; van het brood van de Schrijvers. Nou goed, een beetje schuldig, anders schreef ik dit stuk natuurlijk niet.&lt;/p&gt;

&lt;p&gt;Dat zit zo: ik wíl graag ebooks kopen. Maar als het aanbod er niet is, kán ik weinig kopen. En Koop ik dus niet. Natuurlijk mag stelen dan nog altijd niet. Als de bakker zegt geen bruinbrood meer te hebben,heb ik pech. Ook al zie ik in de bakkerij nog rijen bruinbrood staan. Je kent het wel, op zaterdag staat de halve bakkerij vol met mensen die brood bestélden, mensen uit een generatie dat je vrijdag nog de bakker belde om op zaterdag een garantie op bruinbrood te hebben. Maar voor jou is het &quot;op&quot;.&lt;/p&gt;

&lt;p&gt;Ik mag dan natuurlijk niet gewoon via de achterdeur de bakkerij binnenlopen en dan zelf mijn brood pakken. Als de bakker zegt dat het bruinbrood op is, heb ik me daar maar naar te voegen, dat is zijn beslissing. En zijn goed recht om mij met lege handen de winkel uit te sturen.&lt;/p&gt;

&lt;p&gt;Zonder toestemming downloaden, is echter iets heel anders dan stelen. Het duidelijkste argument hiervoor, is dat als ik dat brood bij de bakker steelt, hij een brood minder heeft (en mogelijk dus mevrouw Pollux, die &quot;besteld heeft&quot; moet teleurstellen), maar als ik een ebook download, de uitgever nog altijd precies evenveel boeken heeft. Nogmaals, ik wíl graag kopen. Voor zaken waar ik waarde aan hegt, leg ik graag geld neer. Zo kocht ik in 2009 voor bijna €600 aan muziek, en films online en offline. En heb ik een abonnement op het NRC, ondanks dat ik iedere ochtend in de trein allerhande gratis krantjes doorspit. Om verschillende redenen wil ik graag betalen, maar dan moet mij dat wél mogelijk gemaakt worden.&lt;/p&gt;

&lt;p&gt;Sterker nog, dan moet het niet alleen mogelijk zijn, het moet ook nog makkelijk zijn. Liefst makkelijkér dan zonder betaling downloaden. Dat is het allesbehalve. Een &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;safe=off&amp;amp;q=martin+bril+e-book&amp;amp;aq=f&amp;amp;aqi=&amp;amp;aql=&amp;amp;oq=&amp;amp;gs_rfai=&quot;&gt;snelle google&lt;/a&gt;, doorklikken naar één van de vele downloads en klaar. Veel makkelijker dan tussen &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;safe=off&amp;amp;q=Martin+Bril+e-book&amp;amp;aq=f&amp;amp;aqi=&amp;amp;aql=&amp;amp;oq=&amp;amp;gs_rfai=&quot;&gt;lijsten met papieren boeken&lt;/a&gt; zoeken naar de digitale versie. Dan allerlei (op bol.com negen, om precies te zijn, waaronder de altijd-leuke &quot;zoek de random-reader voor ideal tussen de rommel in de rommella&quot;) betaalstappen doorlopen en, tien euro armer, datzelfde boek op mijn reader te hebben staan.&lt;/p&gt;

&lt;p&gt;Ik ga niet én betalen én moeilijker doen én me neerleggen bij een beperkt aanbod. Dan zoek ik de &lt;a href=&quot;http://thepiratebay.org/torrent/5245229/Stieg_Larsson_-_The_Millennium_Trilogy_(text__english&quot;&gt;makkelijke weg&lt;/a&gt;). Die toevallig ook nog eens goedkoper, en makkelijker is. En als ik daar eenmaal aan gewend ben, voert de uitgever een achterhoedegevecht, bij voorbaat verloren, net als die vermaledijde muziekindustrie, die -tig jaar later geen raad meer weet. Daar waar Dirk Knops in de Pers concludeert dat hij zijn ebookreader dan maar laat liggen, vrees ik dat met mij, velen, hun ebooks dan maar illegaal gaan uitwisselen. Schiet op, geef me dat makkelijke, goedkope aanbod. Anders ben ik voorgoed een boekenpiraat.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The problem of Drupals exponential complexity</title>
   <link href="http://berk.es/2010/06/23/the-problem-of-drupals-exponential-complexity"/>
   <updated>2010-06-23T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/23/the-problem-of-drupals-exponential-complexity</id>
   <content type="html">&lt;p&gt;Over the last days, I helped a client with some bugs in a really complex Drupal site. The site is that complex, because clients &quot;needs&quot; and &quot;wishes&quot; were to be met. So gradually more and more modules were stacked onto this Drupal. Resulting in a site that no-one can really grasp. At all. Now, if modules in Drupal were entirely self-contained and very loosely coupled, something I &lt;a href=&quot;/publications/blogs/2010-06-10-design_principles_for_creating_good_classes_let_you_write_good_drupal_modules&quot;&gt;consider good practice&lt;/a&gt;, this would be of little problem.&lt;/p&gt;

&lt;p&gt;The issue, however, lies at the conceptual side, not so much the technical side. Technically such systems suffer from what is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Programming_Complexity&quot;&gt;Exponential Complexit&lt;/a&gt; &lt;em&gt;For every feature (module) added, the overall complexity increases exponential_Hence the amount of breaking features, bugs and regressions will grow exponentially too. For every feature introduced in your site, several new modules are required. For every new module, the complexity can grow N times. Let us say 5 times: an eaverage module contains about 5 hooks and overrides. A Drupal-site with 10 modules might suffer from 6 bugs; big change you won't see any of them become a problem on your project. A Drupalsite with 12 modules would then suffer from 150 bugs, part of which &lt;/em&gt;will_ become a problem at some time. The solution can be sought on the technical side, but frankly, I don't believe there is a holy grail. A system built from self-contained, loosely coupled entities, will, typically, suffer &lt;a href=&quot;http://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;far less bugs and related problems then tightly coupled entities&lt;/a&gt;In web-development you will see that e.g. a project in Django, due to its loosely coupled design will suffer from a lot less &quot;exponential complexity&quot;: if there is a bug in the blogs, that is where the bug is. &gt; A key advantage of such an approach is that components are loosely coupled. That is, each distinct piece of a Django-powered Web application has a single key purpose and can be changed independently without affecting the other pieces. For example, a developer can change the URL for a given part of the application without affecting the underlying implementation. A designer can change a page’s HTML without having to touch the Python code that renders it. A database administrator can rename a database table and specify the change in a single place, rather than having to search and replace through a dozen files.&lt;/p&gt;

&lt;p&gt;The bug will not travel trough the entire site and pop-up in random other places. Drupals design philosophy is exactly the opposite: it is entirely horizontal. Due to this horizontal design bugs can travel troughout the entire project. When you introduce a bug in the messaging system and pow! all mail stops working: maybe (in the case of this clients projecte, that was true) the whole cron stops working: search indexes, sessions, garbage collection etceteras no longer work. One small bug, a misconfiguration, caused a PHP error that could have brought down the entire site in due time.&lt;/p&gt;

&lt;p&gt;One bug caused at least 7 things to break. These 7 things would cause again X new problems in due time. How to fix this? In Drupal, the only way to fix this is to use as few modules as possible. And even then, to select these modules on their &quot;loosely coupled-ness&quot;. So avoid modules that depend on certain Views configurations. Avoid modules that go sit inbetween all your mail transports, avoid modules that depend on other modules. In practice that would mean: just avoid all modules alltogether :). Not very practical. Again, this comes down to common sense: at the very least, avoid Drupal-projects that are so complex that no-one understands them. If you don't understand the messaging-system-modules, then don't use them. Look for an alternative. Even outside of Drupal. Choose the simplest solution. You can always let your site grow over time: add features when they are really needed. That way, at least, you will have to deal with the exponetial complexity only one-step a time: even if those steps will become bigger while your site grows, they are still smaller then the giant leap at a single delivery of a huge site.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Grid Systems, Drupal and Semantics (why CSS frameworks are not that bad in Drupal)</title>
   <link href="http://berk.es/2010/06/18/grid-systems-drupal-and-semantics-why-css-frameworks-are-not-that-bad-in-drupal"/>
   <updated>2010-06-18T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/18/grid-systems-drupal-and-semantics-why-css-frameworks-are-not-that-bad-in-drupal</id>
   <content type="html">&lt;p&gt;It seems Grid systems, or CSS frameworks, are being picked up by the Drupal themer community. I think this is a good thing. Some think it is a bad thing. So let us have a look at the downsides and upsides of grid systems in Drupal.&lt;/p&gt;

&lt;h3&gt;Grid Systems force you to change your HTML, that is bad.&lt;/h3&gt;

&lt;p&gt;This is wrong, for three reasons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It might be bad, if it were true. But not all grid systems, or their implementations require changes to the HTML, in theory. I love &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; and its tool-kit &lt;a href=&quot;http://compass-style.org/docs/&quot;&gt;Compass&lt;/a&gt;. Compass pulls in grid systems such as &lt;a href=&quot;http://www.blueprintcss.org/&quot;&gt;Blueprint&lt;/a&gt; (native) or &lt;a href=&quot;http://960.gs&quot;&gt;960.gs&lt;/a&gt; (plugin), in such a way, that the CSS is the only thing you rewrite.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;... you can apply battle-tested styles from frameworks like Blueprint to your style sheets instead of your markup. &lt;/blockquote&gt;


&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The second reason, is that changing your HTML might not be bad at all. More on this in the next argument &quot;semantic by the way. But, summarized: only if you can afford being a purist, is this an argument. In all other cases, there is nothing wrong with changing and moving some HTML around. Off course, only to some extend (see Semantics). But GS usually require only minimal changes to your markup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third reason lies with Drupal. In order to control the exact outputted HTML, you need not only a huge amount of Drupal theming experience, you need patience. And a gigantic maintainance budget.
Drupal works with overrides: it will output source X by default, untill you decide you want to change it into Y. Now, for a &lt;a href=&quot;http://api.drupal.org/api/function/theme_item_list&quot;&gt;theme_item_list&lt;/a&gt;, that is not too hard. But inherently complex functions such as theme_table, it is. And these themable &quot;things&quot; are themed globally: if you change the item-list-generator, all your lists throughout entire Drupal, will be changed. Not necessarily bad, but it takes a large part of full control of your source away from you.
Drupal also works with nested theme-calls. Theme-page calls theme_foo, theme_foo calls theme_bar, calls theme_item-list. Imagine hunting down that one item-list where you insist on having a .first and .last class, or a .horizontal-list, as required by your CSS framework.
And lastly, Drupal is modular and flexible. Depending on your enabled modules, configuration, context or situation the source will change drastically. A logged in user may see different source and elements then an anonymous visitor. An admin with certain quick-edit-module might get popup-links when hovering certain elements. And dynamic modules, such as Views or CCK allow you to configure not only the data, but also the way the data is shown. These are all examples of modules that alter your source drastically. Again: full control of what is outputted is nearly impossible. So Grid Systems in Drupal are hard to achieve and require a lot of work, especially in details such as smaller elements on your site. But it is not that, when Drupal requires a lot of changes for minor changes in source, the concept of &quot;making minor changes to source to force certain display&quot; is wrong all-together.
In Drupal it may not be practical, true. But the concept itself is not that wrong.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Semantics.&lt;/h3&gt;

&lt;p&gt;Changing the source may be bad because of semantics. Purists say that needing to change your markup (the meaning of the information) in order to change the display (the visualisation of the information) is wrong and was never the idea of HTML.&lt;/p&gt;

&lt;p&gt;I agree.&lt;/p&gt;

&lt;p&gt;However, purists may not have to deal with Internet Explorer in their work (Unfortunately, I do). And purists will steer away from Drupal. Or should.&lt;/p&gt;

&lt;p&gt;Taken from a random &lt;a href=&quot;http://drupal.nl&quot;&gt;Drupal site&lt;/a&gt;. Whitespace and identation deliberately left the way it is generated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                &amp;lt;div class=&quot;view-content&quot;&amp;gt;
                        &amp;lt;div class=&quot;views-row-1 views-row-odd views-row-first views-row-last&quot;&amp;gt;

&amp;lt;div class=&quot;views-field-body&quot;&amp;gt;
                &amp;lt;div class=&quot;field-content&quot;&amp;gt;&amp;lt;p style=&quot;font-size:1.2em&quot;&amp;gt;&amp;lt;img src=&quot;sites/default/files/images/drupal.png&quot; style=&quot;float:right; margin-left:20px&quot; /&amp;gt;Met Drupal: maken en beheren van simpele tot en met complexe websites. Dit is de site van de Belgische en Nederlandse Drupal-community. Lees hier over Drupal's &amp;lt;a href=&quot;over-drupal&quot; rel=&quot;nofollow&quot;&amp;gt;sterke punten&amp;lt;/a&amp;gt;.&amp;lt;a href=&quot;node/1819&quot; rel=&quot;nofollow&quot;&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a href=&quot;/sites/default/files/drupal-6.17.tar.gz&quot;&amp;gt;&amp;lt;img src=&quot;/sites/all/themes/lagelanden/images/download-drupal-btn.png&quot; alt=&quot;&quot; title=&quot;&quot; width=&quot;215&quot; height=&quot;32&quot; /&amp;gt;&amp;lt;/a&amp;gt;  &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Font sizes? Inline CSS? Field-content? empty alt tags? No alt tags at all? 4 nested Divs for a single paragraph? rel nofollow on something that clearly should be followed? Empty A-tags? How people, who work daily with a system that outputs such sources by default, dare mention the argument &quot;semantics&quot;, is beyond me.&lt;/p&gt;

&lt;p&gt;This tagsoup in the example, is mostly the fault of views, which, in practice, adds gigantic loads of meaningless markup.&lt;/p&gt;

&lt;p&gt;A class like &quot;views-row-1 views-row-odd views-row-first views-row-last&quot; is debatable. Some say that these are correct semantics. Maybe. But even if they are, the way some classes are embedded and some are chained makes no meaningful sense.&lt;/p&gt;

&lt;p&gt;Why is .view-content outside of views-row and its subclasses? Why are these subclasses, but us views-field-body not a subclass of field-content? Why do we need these in the first place?&lt;/p&gt;

&lt;p&gt;The answer is technical: because that markup it is dynamically generated with hilghly flexible and complex code, and we still want to provide enough handgrips for desingers to attach their CSS to.&lt;/p&gt;

&lt;p&gt;Certainly not semantic. You cannot convince me that the subclasses  &lt;em&gt;views-row-odd views-row-first views-row-last&lt;/em&gt; make any semantic sense. Last and first together? It is the only item in the list, so it, technically is correct that it is both the last and the first item. And since it is the first, it is also the odd item. But semantic, meaning. Certainly not more then some additional grid-two-column class. Odd, even classes are just as semantic as classes used to identify columns in a grid.&lt;/p&gt;

&lt;p&gt;Now, I will agree with you that the difference between:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&quot;paragraph teaser&quot;&amp;gt;
 &amp;lt;img src=&quot;sites/default/files/images/drupal.png&quot; alt=&quot;Drupal screenshot showing the coolness of Drupal&quot; /&amp;gt;
 Met Drupal: .... Lees hier over Drupal's
 &amp;lt;a href=&quot;over-drupal&quot;&amp;gt;sterke punten&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&quot;paragraph teaser grid-left&quot;&amp;gt;
 &amp;lt;img src=&quot;sites/default/files/images/drupal.png&quot; alt=&quot;Drupal screenshot showing the coolness of Drupal&quot; /&amp;gt;
 Met Drupal: .... Lees hier over Drupal's 
 &amp;lt;a href=&quot;over-drupal&quot; class=&quot;inline-button&quot;&amp;gt;sterke punten&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is important. And that the latter is worse then the first. But Drupal's markup does not even get close to my handcoded and cleaned example. Adding a .grid-left to the tagsoup from the example output of views makes absolutely no semantic difference. At all. Adding it to the corrected, and cleaned examples below does make a difference.&lt;/p&gt;

&lt;p&gt;My random example may be a particularly bad example. But before you comment with urls to examples that are cleaner, consider the heading-layout. Consider the source for logged in admins. And evaluate the entire source/markup ratio. It will be bad in Drupal. Please prove me wrong. :)&lt;/p&gt;

&lt;p&gt;The other point is that semantics are a little overvalued. Not that I think we should abandon the idea of putting meaning in our HTML and go for the dirty solutions such as table-based layouts. I just say we should be pragmatic.
Source order, for example.
Most screen-readers and Braille terminals &quot;look&quot; at CSS. That's because, in practice, most sites change &quot;meaning&quot; by chaning the layout. A form-label that stands above the form-element (like, by default in Drupal), even if done with CSS, will force the Braille terminal to insert a linebreak&quot;: users must take an action to enter the form-field. Changing the CSS so that a label is not display:block, but display:inline will make your forms a lot more accessible.
Being a purist gets you only halfway in this: you will still need to look at the entire picture: javascript, CSS and HTML.
No (sane) web-indexer will ignore javascript entirely. The google bot may not execute all javascript, but will certainly evaluate it to see if the source is altered trough these scripts.&lt;/p&gt;

&lt;p&gt;Good semantics are not just putting a navigation below the content and providing a &quot;skip to navigation&quot;-link. Good semantics are about the entire picture. From source order, via minimalistic source (four nested divs around a single paragraph, for goodness sake!), via correct weight of elements (heading layout etcetera's), untill meaning-altering javascript or CSS. In practical Drupal this is as good as impossible; you can develop and design a minimalistic Drupal, but those are not the sites that stand for Drupal examples. It will, most probably, be considered an ugly, boring or not-very-representative site. Views is a de-facto standard. Zen a theme for theme-developers probably has the worst source/content ratio of all themes. And it is the most used theme.&lt;/p&gt;

&lt;p&gt;Good semantics is about the big picture. And no Drupalsite will manage be semantically correct in that big picture. Not without a huge amount of work, that leaves you with a maintainance nightmare, overrides that, in lines of code, will be far larger then their originals. And a content- and editors- handbook that will make all editors depressed.&lt;/p&gt;

&lt;h2&gt;Are grid systems bad?&lt;/h2&gt;

&lt;p&gt;In theory: yes. In practice: hardly; but only in a place where you control your source and therefore can afford to be entirely semantically correct. They require minimal changes to your source. Adding style to a place that should only contain meaning. Adding a class=&quot;horizontal-list&quot; to an UL, in order to make it horizontal is bad practice. &lt;em&gt;In a place where the rest of the source is perfect&lt;/em&gt;. But in a tagsoup like that of  Drupal, a single class=&quot;horizontal-list&quot; will not make anything worse. Provided you can add that class in the first place, without large code changes (that need to be maintained).
And having to re-order some HTML, but keeping it valid, is always a lot better then getting into ugly IE6 CSS hacks, that not only make your CSS invalid, but often add huge amount of extra CSS complexity to your designs.&lt;/p&gt;

&lt;p&gt;Any Drupal themer, who does not want a CSS framework, because it does not use HTML like it should be used, is acting silly. Drupal, by default, renders HTML that is so far from semantically correct, that the additional downside of a few extra non-semantic classes, or the downside of a few extra not-so-well-source-ordered blocks does exactly nothing: and certainly not make your source less correct. If you really care for semantics, start with the low-hanging fruit and make Drupal, or its contributions, a little more semantically correct.
A Drupal themer who says that using a grid framework is not very practical, because Drupal is far too dynamic and full control of the outputted HTML, is more correct.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mosterd na de maaltijd</title>
   <link href="http://berk.es/2010/06/14/mosterd-na-de-maaltijd"/>
   <updated>2010-06-14T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/14/mosterd-na-de-maaltijd</id>
   <content type="html">&lt;p&gt;Ook fijn: Nú opeens komen kranten (NRC next vandaag: prima stuk over verschillen tussen PVV en VVD) met diep inhoudelijke, politieke analyse. Dat moet toch juist tijdens de campagne: nu hebben één komma zoveel ongeïnformeerde mensen op de PVV (of juist de VVD) gestemd met allerlei &quot;Wij van WC-eend&quot;-adviesen en argumenten. Als ze uit de krant, TV of RTL-boulevard hadden vernomen hoe PVV en VVD inhoudelijk mijlenver van elkaar afliggen: dán had je écht een keuze gemaakt.  -- Jammer &quot;De media&quot; is missch. nog wel het meeste debet aan het failliet van Neerlandsch Progressief en Oopen Vrijdenken.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Design principles for creating Good Classes let you write Good Drupal Modules.</title>
   <link href="http://berk.es/2010/06/10/design-principles-for-creating-good-classes-let-you-write-good-drupal-modules"/>
   <updated>2010-06-10T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/10/design-principles-for-creating-good-classes-let-you-write-good-drupal-modules</id>
   <content type="html">&lt;p&gt;Drupal is not object oriënted (OO). No really, &lt;a href=&quot;http://drupal.org/node/547518&quot;&gt;it is not&lt;/a&gt;! It merely borrows some design principles from OO, and uses some design concepts (such as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt;, or hooks, in Drupal) from OO.
Though many Module developers actually use another design principle, that of Classes. When creating a module, one can borrow almost all ideas from the (good) design of classes, to create a good design for a module.&lt;/p&gt;

&lt;p&gt;Maybe you think: &quot;Why should I design my module&quot;? (When I say design, I do not mean graphical, or UI design, but technical design, often called software architecture). If you ask yourself that, then get back to your developed modules. They may be so small, and welldesigned that you are a natural talent. But more often, you will let them grow, maintain them, add features and think everytime &quot;I should really rewrite this module from scratch&quot;. The problem is't that the ad-hoc is a bad way of coding. But that good abstraction, good design, offers many benefits. It not only make your projects easier to run, it also makes your sites a lot more stable, predictable and -overall- better to use maintain and extend.&lt;/p&gt;

&lt;p&gt;Good classes, and hence good modules, have several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can hide implementation details&lt;/li&gt;
&lt;li&gt;Changes don't affect the whole Drupal environment&lt;/li&gt;
&lt;li&gt;The Drupal environment is more obviously correct&lt;/li&gt;
&lt;li&gt;You don't have to pass data all over your entire Drupal&lt;/li&gt;
&lt;li&gt;You are able to work with real-world (and website) entities rather then with low-level implementation structures.
—Taken, and adapted from &lt;a href=&quot;http://cc2e.com&quot;&gt;Code Complete, second edition&lt;/a&gt; Working Classes, p127-128&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But first let me answer the question whether modules can be compared to classes, at all.
The Drupal handbook, &lt;a href=&quot;http://drupal.org/node/292&quot;&gt;Introduction to Drupal modules&lt;/a&gt; writes:
  &lt;blockquote&gt;...[a module] is more of &lt;em&gt;a concept that encourages good design principles&lt;/em&gt;. Modularity also suits the open-source development model, because it allows a number of developers to contribute functionality to Drupal &lt;em&gt;without risk of interference&lt;/em&gt;.&lt;/blockquote&gt; (emphasis added)&lt;/p&gt;

&lt;p&gt;Those are reasons why classes were created in the first place: as a good design principle, to lower the risk of interference. Or, to avoid changes infecting your entire Drupal site.&lt;/p&gt;

&lt;p&gt;But, more important, is that modules in Drupal are supposed to be highly focused: do one task and do that well.
The general idea in Drupal, is that not a forum module offers all features phpBB offers, but that a phpBB-alike forum is achieved by pulling together many modules: often one module for each feature you wish to introduce. This mathces that other great benefit of Classes: &lt;em&gt;You are able to work with real-world (and website) entities rather then with low-level implementation structures.&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://drupalmodules.com/module/user-display-api&quot;&gt;User Display api&lt;/a&gt;, offers a consistent, focused programming interface to deal with statii of users.  When I talk of interfaces, I mean programming interfaces, not user interfaces (UIs). Interfaces in Drupal are hooks, theme-functions, database-api functions, and public functions.
Eventhough Drupal, or actually PHP, has no proper support for setting the scope of data and methods (functions), the Drupal convention is to prefix private functions with an _underscore().&lt;/p&gt;

&lt;p&gt;So, instead of a forum module that has several features to control the display of the online status of users, Drupal encourages the use of several modules, on top of Drupal core, to introduce such features &lt;em&gt;by themselves&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The answer therefore is: &quot;no, modules are not really classes&quot;, but rather &quot;Good Drupal modules follow a lot of design principles of classes in OO&quot;. You cn approach a module as you would approach a class. But you cannot use all the concepts from classes in a Drupal module.&lt;/p&gt;

&lt;p&gt;I took the liberty to modify McConnells, the author of Code Complete, checklist from the book Code Complete and adjusted it to suit module development. He writes a checklist that you can use to see if your classes and their use is Good. Another book to read on this is &lt;a href=&quot;http://c2.com/cgi/wiki?DesignPatternsBook&quot;&gt;Design Patterns&lt;/a&gt; by the Band of Four. The latter is slightly more academic, but still great if you want to become a better Drupal developer.&lt;/p&gt;

&lt;p&gt;I adjusted the checklist from Code Complete, so it becomes a checklist that shows you if your module is Good. It makes a great checklist for writing awesome modules:&lt;/p&gt;

&lt;h3&gt;Abstract Data Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Have you thought of the modules in your drupal implementation as Abstract Data Types and evaluated their interfaces from that point of view? (Where, again, interfaces are programming interfaces, not UI's)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Abstraction&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Does the module have a central purpose?&lt;/li&gt;
&lt;li&gt;Is the module well named, and does its name describe its central purpose?&lt;/li&gt;
&lt;li&gt;Does the modules's interface present a consistent abstraction?&lt;/li&gt;
&lt;li&gt;Does the modules's interface make obvious how you should use the class?&lt;/li&gt;
&lt;li&gt;Is the modules's interface abstract enough that you don't have to think about how its services are implemented? Can you treat the module as a black box?&lt;/li&gt;
&lt;li&gt;Are the modules's services complete enough that other modules don't have to meddle with its internal data?&lt;/li&gt;
&lt;li&gt;Has unrelated information, user interfaces and functionality been moved out of the module?&lt;/li&gt;
&lt;li&gt;Have you thought about subdividing the module into smaller modules, and have you subdivided it as much as you can?&lt;/li&gt;
&lt;li&gt;Are you preserving the integrity of the modules's interface as you modify the class? (i.e: Can you provide backwards compatibility, without losing the ability to change the code in your module?)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Encapsulation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Does the module minimize accessibility to its internal functions?&lt;/li&gt;
&lt;li&gt;Does the modules avoid exposing data, such as global or accessible variables?&lt;/li&gt;
&lt;li&gt;Does the module hide its implementation details from other modules as much as the used concepts (hooks, theme, etc.) permit?&lt;/li&gt;
&lt;li&gt;Does the module avoid making assumptions about its users (the other modules using this module, not users visting the site), including its derived modules (modules depending on this module)?&lt;/li&gt;
&lt;li&gt;Is the module independent of other modules? Is it loosely coupled? (i.e a form_alter that expects forms to be in an exact state are tightly coupled, a nodeapi inserting a new piece of data into a node is loosely coupled.)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Inheritance&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is inheritance used only to model &quot;is a&quot; relationships? (i.e. dog.module, depends on mammal.module, but never on user.module)&lt;/li&gt;
&lt;li&gt;Does the class documentation describe the inheritance strategy? (i.e. when Module Cat depends on module feline, does it tell this to the users?)&lt;/li&gt;
&lt;li&gt;Do derived modules avoid &quot;overriding&quot; non overridable routines? In PHP and Drupal only achievable by well-commented code.&lt;/li&gt;
&lt;li&gt;Are inheritance trees fairly shallow?&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Other Implementation Issues&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Does the module contain about seven data members (public functions) or fewer?&lt;/li&gt;
&lt;li&gt;Does the module minimize direct and indirect routine (function) calls to other modules?&lt;/li&gt;
&lt;li&gt;Does the module collaborate with other modules only to the extent absolutely necessary?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you want more in-depth information on these statements, please refer to Code Complete, second edition, Chapter 6. Or leave a comment below so that I can try to explain it in more detail.&lt;/p&gt;

&lt;p&gt;In general, the idea is that all rules of thumb that apply to designing good Classes, are usefull for designing good modules. Keep it small, simple, focused and try to hide as many as possible for others.
In Drupal that would mean: provide hook_implementations, but keep all the other functions private. That function that iterates over the latest coffee-mugs to extract their avialability in the shop: should never be available to other modules.&lt;/p&gt;

&lt;p&gt;You can prefix private functions with an underscore, such as __coffeemugs_extract_availability(). Or stick them in include-files, and mention in the code-comments that others should keep away from your inc files, at all times!
Avoid calling functions in include files. Avoid calling any function in any other module, unless it is explicitely advertised as &quot;usable by others&quot;.
Try to avoid introducing such functions as often as possible, rather create a new hook, which, by its nature, is public.&lt;/p&gt;

&lt;p&gt;Keep your module focused. A &lt;em&gt;print_and_pdf_and_mail_for_nodes.module&lt;/em&gt; is a bad module. An &quot;alternative_rendering.module&quot;, with inheriting modules &quot;print.module&quot;, &quot;pdf.module&quot; and mail.module&quot; is far, far better design.&lt;/p&gt;

&lt;p&gt;And go read &lt;a href=&quot;http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&quot;&gt;Code Complete&lt;/a&gt;. It will make you a happier Drupal developer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I withdraw my Pledge to have Tagadelic ready for Drupal 7</title>
   <link href="http://berk.es/2010/06/04/why-i-withdraw-my-pledge-to-have-tagadelic-ready-for-drupal-7"/>
   <updated>2010-06-04T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/04/why-i-withdraw-my-pledge-to-have-tagadelic-ready-for-drupal-7</id>
   <content type="html">&lt;p&gt;Actually, it is very simple: I had a slot in February. And one in May. Both are gone now. But because of the lack of anything stable-ish, I decided to use that slot for diving into some documentation on the proposed (and some submitted) changes to 7. And on getting stuff synched and tagadelic migrated to &lt;a href=&quot;http://github.com/berkes/tagadelic&quot;&gt;git(hub)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I planned a new slot in May. But again, there was no stable Drupal7 to work against. Off course, Tagadelic is simple, and could probably be migrated against a current unstable Drupal7, then work perfectly on release. But maybe not. And I really don't have time, nor the will to go shoot at a moving target. Nor do i plan to upgrade my sites to Drupal7 anytime soon: never fix something that aint broken: they run just fine on Drupal5 and Drupal 6. As soon as a client, who uses Tagadelic, hires me to upgrade  a site, will I upgrade it and make it ready for 7. Or when someone steps up with a &lt;em&gt;properly tested&lt;/em&gt;  and &lt;em&gt;clean&lt;/em&gt; patch to migrate to 7, will I commit it, or grant that person commit rights. In fact: you already have these rights: just fork &lt;a href=&quot;http://github.com/berkes/tagadelic&quot;&gt;tagadelic&lt;/a&gt; and upgrade to seven. Then let me know about it, to review the code.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Small but Useful modules: are they worth the pain?</title>
   <link href="http://berk.es/2010/06/03/small-but-useful-modules-are-they-worth-the-pain"/>
   <updated>2010-06-03T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/03/small-but-useful-modules-are-they-worth-the-pain</id>
   <content type="html">&lt;p&gt;A &lt;a href=&quot;http://blog.merge.nl/2010/06/03/10-small-but-useful-drupal-modules-part-2/&quot;&gt;blogpost on Merge&lt;/a&gt; brought a question back that has haunted me for a while now. &lt;strong&gt;What about all these small modules?&lt;/strong&gt;First part of that question is: &lt;strong&gt;How to deal with the many small modules, day-to-day?&lt;/strong&gt;. Quite often, I see sites that drag more then 50 modules along. Most often these are really very simple sites.&lt;/p&gt;

&lt;p&gt;That introduces several problems in itself: humongous effort on upgrade management and maintainance, lot of time spent on selection, gigantic complexity -to a level that debugging and troubleshooting becomes impossible- and last: performance. The latter is -imho- one of the least of problems. With 50+ modules, how small they may be, you can be sure of a security release every week, possibly more then one. With proper testing and management, that will mean a couple of hours technical maintainance every week. That is unacceptable for (out of thin air) over threequarters of the Drupalsites. Every time you see a module that does what you want, you should consider the impact of that module on the project as a whole. Not just how many minutes it saves while developing; but also how many hours upgrade pain it may cause.&lt;/p&gt;

&lt;p&gt;Second part in this question is: &lt;strong&gt;UNIX has this philosophy with gazillion, tiny, focused and optimised libraries and apps, why is it not a problem there?&lt;/strong&gt;. The answer is probably: managment - and upgrade tools. Drupal has no APT, Gems, VersionTracker or Fink. It has drush that can resolve the minimum of requirements, but hardly more. It has makefiles that provide a good starter for- but are far from- a real package managment tool. The other part of this answer is that UNIX libraries offer no user interface, and that the majority of the tools offer only really low-level user interfaces, most often in the form of configuration options. A small subset offers user interfaces in the form of commandline options. And an even smaller subset offers a real graphical user interface, with options to click, buttons to press and objects to drag. To illustrate: From the 29 packages that help deal with printing (on paper) on my ubuntu machine, only two have a GUI: one to configure and manage printers, the other to print stuff and view the printqueue. Or at least: that is my knowledge, if there are more user interfaces, I do not know of them, nor should I. In Drupal, most modules offer some interaction, add stuff to configuration-pages, offer settings, cases, and so on. In Drupal they not only add technical complexity (dependencies of -, reliance on-, tight coupling with- other modules) they also offer complexity for the user. How often do you not read things like &quot;create a content type, then add a pathauto alias for these nodes, then select the hierarchy from the simple-hierarchy-based-on-aliases module s config interfaces&quot;? I have never read anything like this on ubuntu in order to print an invoice.[1] Small modules are hardly ever librries, they are applications. On UNIX stuff is managable, because probably less then 5% of the apps offer an interface to the user, the rest offers interfaces to software, not to the users.&lt;/p&gt;

&lt;p&gt;Third part of the question is: &lt;strong&gt;Are you not better off, just hardcoding some stuff&lt;/strong&gt;? I know that, say, analytics module offers a handy tool to inject analytics code into your pages. But be honoust: is it &lt;em&gt;that&lt;/em&gt; hard to copy-paste it into your page.tpl.php, the page template? Is it really so hard that it is worth the overhead of upgrades, management, complexity and performance? Do you really need a module to add a javascript file to the header? So, small modules are usefull. And may come in handy at times. But most often you will find that they offer more pain on the long run, then they gain you on the short run.&lt;small&gt;[1] Actually, I work with Linux mostly, for over 10 years now, so I have seen the days when piping stuff trough ghostscript conversion filters. via lineprinter-tools into /dev/something devices. But Ubuntu really is of a whole new level :)&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Toegankelijkheid gestest van 10+1 partij-websites.</title>
   <link href="http://berk.es/2010/06/02/toegankelijkheid-gestest-van-101-partij-websites"/>
   <updated>2010-06-02T00:00:00+02:00</updated>
   <id>http://berk.es/2010/06/02/toegankelijkheid-gestest-van-101-partij-websites</id>
   <content type="html">&lt;p&gt;Hoe goed, of slecht voldoen de websites van politieke partijen aan de toegankelijkheidsrichtlijnen? Ik verklap het antwoord alvast: Slecht.&lt;/p&gt;

&lt;p&gt;De piratenpartij is de enige die de basisrichtlijnen op orde heeft. Maar ze heeft enkele details ook niet op orde. Het slechts scoren Groenlinks en SGP, met 8 fouten, waaronder vooral veel belangrijke fouten.&lt;/p&gt;

&lt;p&gt;Waarom deze lijst? Websites die voldoen aan deze richtlijnen zijn toegankelijk voor iedereen, bijvoorbeeld mensen met voorleesapparaten of braille-terminals. Mogelijk kan dit lijstje iets laten zien over de aandacht die de partijen besteedden aan toegankelijkheid van hun sites. En dus wat ze nu al zélf doen voor toegankelijkheden van minderheden tot hun informatie. Uitereraard is er veel meer dan een validatie van een site. Dus zoek vooral door naar de standpunten van partijen over toegankelijkheid van minderheden tot informatie (en overheidsdiensten en dergelijke).&lt;/p&gt;

&lt;p&gt;De test is gedaan met een WAI validator. Een simpele check, waar ook de nederlandse stichting Drempelvrij gebruik van maakt.&lt;!--break--&gt;  - &lt;a href=&quot;http://verkiezingen.cda.nl/&quot;&gt;CDA&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fverkiezingen.cda.nl%2F&quot;&gt;Faal, 4 fouten&lt;/a&gt;
  - &lt;a href=&quot;http://nu.pvda.nl/&quot;&gt;PVDA&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fnu.pvda.nl%2F&quot;&gt;Faal, 4 fouten. &lt;/a&gt;
  - &lt;a href=&quot;http://www.sp.nl/2010/campagnesite/&quot;&gt;SP&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.sp.nl%2F2010%2Fcampagnesite%2F&quot;&gt;Faal, maar 3 fouten.&lt;/a&gt;
  - &lt;a href=&quot;http://www.vvd.nl/&quot;&gt;VVD&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.vvd.nl%2F&quot;&gt;Faal, 5 fouten.&lt;/a&gt;
  - &lt;a href=&quot;http://pvv.nl/&quot;&gt;PVV&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fpvv.nl%2F&quot;&gt;Faal, 5 fouten. &lt;/a&gt;
  - &lt;a href=&quot;http://groenlinks.nl/&quot;&gt;GroenLinks&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fgroenlinks.nl%2F&quot;&gt;Faal,8 fouten!&lt;/a&gt;
  - &lt;a href=&quot;http://www.christenunie.nl/nl/&quot;&gt;ChristenUnie&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.christenunie.nl%2Fnl%2F&quot;&gt;Faal, 5 fouten. &lt;/a&gt;
  - &lt;a href=&quot;http://www.d66.nl/&quot;&gt;D66&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.d66.nl%2F&quot;&gt;Faal, maar 3 fouten. &lt;/a&gt;
  - &lt;a href=&quot;http://www.partijvoordedieren.nl/&quot;&gt;Partij voor de Dieren&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.partijvoordedieren.nl%2F&quot;&gt;Faal, 5 fouten. &lt;/a&gt;
  - &lt;a href=&quot;http://www.sgp.nl/&quot;&gt;SGP&lt;/a&gt; - &lt;a href=&quot;http://www.cynthiasays.com/mynewtester/cynthia.exe?rptmode=2&amp;amp;url1=http%3A%2F%2Fwww.sgp.nl%2F&quot;&gt;Faal, 8 fouten!&lt;/a&gt;
  - &lt;a href=&quot;http://piratenpartij.nl/&quot;&gt;Piratenpartij&lt;/a&gt; - &lt;a href=&quot;&quot;&gt;Faal, maar 3 fouten. &lt;strong&gt;Echter de basis is in orde! de gevonden fouten zijn details.&lt;/strong&gt;&lt;/a&gt;
De kleine partijen heb ik niet meegenomen, met uitzondering van de Piratenpartij. Deze scoret namelijk het beste van alle partijen. Met ook 3 fouten, maar dat zijn de minst kritische fouten. Waar &lt;strong&gt;iedere partij faalt op de meest basale toegankelijksrichtlijnen&lt;/strong&gt; heeft de piratenpartij die op orde. Enkele details missen ook zij. Momentopname, 2 juni, omstreeks 17.00.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Status update-je Thailand (geen foto's, alleen lettertjes)</title>
   <link href="http://berk.es/2010/05/01/status-update-je-thailand-geen-fotos-alleen-lettertjes"/>
   <updated>2010-05-01T00:00:00+02:00</updated>
   <id>http://berk.es/2010/05/01/status-update-je-thailand-geen-fotos-alleen-lettertjes</id>
   <content type="html">&lt;p&gt;We zijn terug uit Isan, het noorden (van Thailand, want daar ben ik op vakantie). Isan is het Thailse platteland. Dat stukje Thailand waar volgens de Lonely planet geen fsck te doen is (wat ook waar is). Best lekker dus. We hebben voor een paarhonderd Euro handgewoven(weven?) zijde ingeslagen, waar Anna &quot;iets&quot; mee wil maken, en de rest van wil verkopen. Verder hebben we wat bier gedronken. Naar een koe gekeken en daarna naar een andere koe gekeken. En we hebben twee rondjes gelopen om het huis, door het dorp. En cola gedronken.&lt;iframe width=&quot;425&quot; height=&quot;350&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; src=&quot;http://www.openstreetmap.org/export/embed.html?bbox=96.22,12.5,105.45,19.41&amp;layer=mapnik&amp;marker=16.82117,102.57479&quot; style=&quot;border: 1px solid black&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;small&gt;&lt;a href=&quot;http://www.openstreetmap.org/?lat=15.955&amp;amp;lon=100.835&amp;amp;zoom=6&amp;amp;layers=B000FTFTT&amp;amp;mlat=16.82117&amp;amp;mlon=102.57479&quot;&gt;View Larger Map&lt;/a&gt;&lt;/small&gt;Vandaag zijn we weer terug bij Pap, in Chonburi waar we morgen gaan duiken (in het zembad). Dat schijnt leuk te zijn. (Niet in het zwembad, dat is volgens mij niet zo leuk, maar in de zee). Dinsdag gaan we dan voor het echie; duiken in zee. Ik hoop dat ik een vis zie (denk het wel). En dat ik geen garnalen zie (denk van wel), want die vind ik vies. En dat mijn suiker zich een beetje in het gareel houd. Want onder water een boterham eten is wat moeilijk.&lt;iframe width=&quot;425&quot; height=&quot;350&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; src=&quot;http://www.openstreetmap.org/export/embed.html?bbox=100.276,13.222,101.429,14.096&amp;layer=mapnik&amp;marker=13.38113,100.99962&quot; style=&quot;border: 1px solid black&quot;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;small&gt;&lt;a href=&quot;http://www.openstreetmap.org/?lat=13.659&amp;amp;lon=100.8525&amp;amp;zoom=10&amp;amp;layers=B000FTFTT&amp;amp;mlat=13.38113&amp;amp;mlon=100.99962&quot;&gt;View Larger Map&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The first rule of coding for Drupal: never forget about the option to write your own code.</title>
   <link href="http://berk.es/2010/04/19/the-first-rule-of-coding-for-drupal-never-forget-about-the-option-to-write-your-own-code"/>
   <updated>2010-04-19T00:00:00+02:00</updated>
   <id>http://berk.es/2010/04/19/the-first-rule-of-coding-for-drupal-never-forget-about-the-option-to-write-your-own-code</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.yelvington.com/content/first-rule-coding-drupal&quot;&gt;yelvington writes&lt;/a&gt;: &quot;The first rule of coding for Drupal: We do not write code for Drupal.&quot; I must say, that after years , I come to the exact opposite conclusion. Right now, I should be writing another webshop (instead I am writing a blog-post, but this article is not about procastrination :)).&lt;/p&gt;

&lt;p&gt;I was one of the most outspoken for getting the first CCK, flexinode into core. Not that project itself, per sé, but the concept. I have been a firm believer of &quot;don't duplicate code&quot;, as such I even introduced the rule in Drupal &lt;a href=&quot;http://drupal.org/node/23789&quot;&gt;Join forces with others&lt;/a&gt;. I consider myself a moderate programmer (speaking some Perl, Bash, rather good Ruby, almost Fluent PHP and rusty C, C++ and even som Java; hardly a hardcore programmer), I am lazy and tend to be pragmatic (and most often disguise the former by calling it 'pragmatic' :)).&lt;/p&gt;

&lt;p&gt;Why write yet another shop-system when you can pick from several e-commerce tools? Because face it: e-commerce is not ready. Übercart -no offence!- simply sucks, for extendability, usability and flexibility. But that was not the main reason, that was more technical. More on that later.&lt;/p&gt;

&lt;p&gt;Views has a performance horror luring around the corner. It might not hit you, but often will -- Views is not bad performant per sé, but it can be. CCK - well, exactly the same. And panels. Don't get me started on that! If you sincerely hate your frontend developers, give them panels. I have seriously had a person resign from his job because of panels used int their project (panels 2 in his defence, 3 is an improvement). But I do use Views in most projects, together with -obviously- CCK and about 20 other modules.&lt;/p&gt;

&lt;p&gt;Views, CCK, Panels are all great tools for the average quick project. Typically projects where the 80/20 rule is applied as: we build 80 and forget about the 20.  And we all know the problem that &lt;a href=&quot;http://drupal.org/node/580026&quot;&gt;features&lt;/a&gt; tries to solve: you create CCK fields, use these in (dependant!) views, and override that in -PHP- templates. The always returning staging-horror. AKA 'simply repeat the creation on LIVE all over again'.  But I do not want to go into more details on the technical downsides of these modules. However important, a far greater concern outshadows these by far.&lt;/p&gt;

&lt;p&gt;The problem that made me switch 180° was the development &lt;em&gt;for and in&lt;/em&gt; CCK, views, panels and all these high-level buildingbricks. To illustrate, let me give you some quit often repeating questions; try to build them with CCK, views and related modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An event-listing: next upcoming item, whose end-date is not yet passed (event is not yet finished), grouped by day.&lt;/li&gt;
&lt;li&gt;An article with some fields extracted (live) from a webservice: content lives not in the local database, but is pulled over SOAP, REST or similar. E.g. the editor fills in the &quot;trailer_id&quot; and the trailer is pulled from a filmtrailer service.&lt;/li&gt;
&lt;li&gt;On Cron, fill certain nodes with data from a service or an XML-file.&lt;/li&gt;
&lt;li&gt;Validate a postal-code field against a city-field; a postal-code implies a certain city. (using, e.g. a local lookup-table or some provided library).&lt;/li&gt;
&lt;li&gt;People must provide either a telephone OR an emailfield.&lt;/li&gt;
&lt;li&gt;After submitting a node (say a classified ad) people are redirected to the next node form (say, to add photo's), of wich parts are pre-filled and which is related to the first (in database or ORM speak: one classified has_many photo's)&lt;/li&gt;
&lt;li&gt;A table, listing all profile-nodes, but where the fields Prefix, FirstName, middlename, SurName, Postfix are aggregated into one column, sortable by Surname.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right? Off course, with the right combination of computed fields, custom template logic(!) and maybe some views and CCK addons  it is possible. But far from easy.&lt;/p&gt;

&lt;p&gt;Now, I developed each and every of above in custom modules. Let me summarise how I did that, and how many code it required.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eventlisting: Custom node, defined in an event.module, with a (really simple) date-field, and a (slightly less simple) database query, pushing that to a theme('table'). Done. Isolated code for this is less then 200 lines, one small module! The module became more complex, because we changed the model into &quot;event has_many playdates&quot; later. Now bearing less then 600 lines, still small.&lt;/li&gt;
&lt;li&gt;Extraced content from a webservice: Very small custom node, defined in movie.module, on hook_insert etc. insert the ID into a local joined table, hook_load request external source using the value from the table. Tiny module, without  theme functions, less then 400 lines of PHP.&lt;/li&gt;
&lt;li&gt;Fill from an external resource: On cron, fill some custom module-defined nodes. Before we filled CCK-nodes, but the dynamic use of database (database layout changes when reconfiguring fields) made us decide to simply push all data to our custom joined table. Simple. Effective. Less then a thousand lines code, with most code on the XML parsing and validation.&lt;/li&gt;
&lt;li&gt;Telephone or mailfield: A custom node, joined table, with hook_validate checking existence of one of both fields and presenting user with a proper message. Less then 40 lines of PHP. 20 minutes development or so. Other fields on this custom node are added with CCK.&lt;/li&gt;
&lt;li&gt;A module with several custom nodes, extendable with CCK, but some fields are stored in the database (e.g. the abovementioned telephone/mail fields) module does redirecting, validating and pre-filling on several hooks provided by Drupal. One of the larger modules, still less then 1000 lines of PHP.&lt;/li&gt;
&lt;li&gt;Simple SQL pager-query, some PHP looping over the items and aggregating them at wish. Less then 50 lines of PHP. Less then an hour development.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am not trying to look cool and say &quot;look how fast and small I can develop&quot;, nor do I want to thumb down CCK or views, or any of the other buidling blocks. I am trying to point out how an often forgotten, simple tool can aid.
And that writing Views addons, CCK plugins and the likes requires far -FAR- more development, complexity. Will introduce a lot more (unhandled) edge cases (seen a module that does not handle multiple fields correct lately?). And offers hardly any benefit other then the -theoretically- better re-usability. Theoretically, because when being pragmatic, you can just as easy copy paste some code from an old project, then wrinting a perfectly flexible and generic solution.&lt;/p&gt;

&lt;p&gt;To illustrate: we spent a month on addons for übercart, views and CCK: simgle-click-checkout, insert barcode in invoices, hacking the Übercart interface in templates, writing complex -dependant and relating- fields for CCK, and so on. The client was not very happy with the workflow, we were far less happy with the enormous amount of (dependant!) code for all the addons and overrides. Loosing all the benefits of re-using code. A complex form-alter introduces just the same amount of tight coupling as a fork would: you have to maintain your form-alter code on every change of the altered form, just as well. An amount of override and template code that extends the amount of re-used code, defeats the purpose of getting a quick start.&lt;/p&gt;

&lt;p&gt;Rewriting the entire thing in my own modules took less then 3 weeks. And we are far futher then then 80% now, nearing 90. While the generic solution left us entirely stuck at 80%. Not being able to get out, with the only solution &quot;convince the client that the last 20% is not very important&quot;. Well it was, and right so. We killed a project wich required over 30 modules and 3000+ lines of template code to be replaced by two custom modules (4000+lines, so rather large) and no template logic.&lt;/p&gt;

&lt;p&gt;As if a carpenter only uses his completely computerised drilling robot, automated sawing machines and super-hightech-glue-gun. When often a handsaw, nail and hammer will get to planks together in less then 5 minutes. &lt;em&gt;A good carpenter might have all the hight-teck tools, but never forgets about the ease and speed of a hammer and a nail.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, yes. Using Views and CCK helps you forward. And will get your to the 100% if your 100% is not that demanding. Say, in rapid prototyping; get up a CCK+views+panels version in a few hours, see if the general idea is good, throw it out and rerite it in your own code.&lt;/p&gt;

&lt;p&gt;But when you're requirements are slightly more specialised then a few simple modules, -developed in PHP-, are the quickest, cleanest and most pragmatic way. The only way that will make your client 100% happy. Especially when you are your own client!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt; we had over 3000 lines, not over 300 lines of template code.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>&quot;Pick up where you left last X&quot; by not committing last changes, good branches and pseudocode.</title>
   <link href="http://berk.es/2010/04/15/pick-up-where-you-left-last-x-by-not-committing-last-changes-good-branches-and-pseudocode"/>
   <updated>2010-04-15T00:00:00+02:00</updated>
   <id>http://berk.es/2010/04/15/pick-up-where-you-left-last-x-by-not-committing-last-changes-good-branches-and-pseudocode</id>
   <content type="html">&lt;p&gt;When programming, you often need to carry a single task on to the next day, or till &quot;after the meeting&quot; and such. I experimented and found a good method, to pick up where I left. Working &lt;a href=&quot;http://getontracks.org/&quot; title=&quot;Tracks: an open source, webbased Getting Things Done application&quot;&gt;the GTD way&lt;/a&gt;, well documented code, a good software architecutre all help keeping a project in line, up to speed and manageble. But it does not solve one thing, though: &quot;picking up where you left&quot;. I have many clients, did many projects and have lots of strings attached. Hence I get disturbed very often. Even when you can focus entirely on one single programming task (lucky you!) five o'clock is the end of the day (or, in my case, 18:30).  Going on for another half hour or so is perfectly fine, but most often I cannot finish a single task and need to carry it on to the next day. Or till after that meeting. Getting back in the flow then, requires quite some effort. What I do, is twofolded: &lt;em&gt;work with pseudocode&lt;/em&gt; and &lt;em&gt;don't commit the last run&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, I outline my project in the usual diagrams, documents and such. Then, when working on a more micro-level (the methods), I first write out the inner workings in comments. Steve McConnell, in Code Complete, calls this &lt;a href=&quot;http://www.coderookie.com/2006/tutorial/the-pseudocode-programming-process/&quot;&gt;Pseudo Programming Process&lt;/a&gt;. When finished, I will commit this. When not finished, see below. You often see some meeting, break, or end-of-day coming closer, while working in several Classes, on several routines, or in the database, documenation and code all at once. You are in a certain flow, but really need to halt, because people are waiting, kids need to be picked up at school or your girlfriend needs attention. Valid enough to stop working for now. Most people I know, finish up hastily, and commit the work. I call these &lt;em&gt;five o'clock commits&lt;/em&gt; not only are they horrible from a revisioncontrol point (a commit should always describe a complete change) but they offer an opportunity for you: to keep in the flow. Do not commit this. Leave it as it is. Even if you have your work in a commitable state, leave it! After your break, or next day, you open the code, and when you left it commitable, the first thing you must do, is commit the work.&lt;/p&gt;

&lt;p&gt;This forces you to read through the diff, describe the changes and then commit. I found this exercise more then enough to get me right into the flow, to pick up where I left. If you left it in an uncommitable state, then somewhat the same applies. You can read through the diff, describe what was going on and pick up the work right away.&lt;/p&gt;

&lt;p&gt;When combined with &lt;a href=&quot;http://nvie.com/git-model&quot;&gt;good branching practice&lt;/a&gt; this &quot;reading through the diff&quot; takes less then ten minutes. And, as is my experience, even helps when picking up work after a few days other work, or a long weekend or any other situation where simply the diff does not ring a bell anymore. In fact, after finishing this blogpost, I am going to pick up where I left friday (six days ago) and I am confident that the commented pseudocode, good branchnames and the diff leave me more then enough hints to be on track in less then ten minutes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Load Rubygems environment variables on startup (requie 'gemname' gives 'not found')</title>
   <link href="http://berk.es/2010/04/14/load-rubygems-environment-variables-on-startup-requie-gemname-gives-not-found"/>
   <updated>2010-04-14T00:00:00+02:00</updated>
   <id>http://berk.es/2010/04/14/load-rubygems-environment-variables-on-startup-requie-gemname-gives-not-found</id>
   <content type="html">&lt;p&gt;Small note to self (When I blog about something, I tend to remember it better).&lt;/p&gt;

&lt;p&gt;On my new testing environment, I spent over twenty minutes figuring out why some &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveResource/&quot;&gt;gem&lt;/a&gt; would not be available.
Once I figured out that somehow I needed to add &lt;em&gt;require 'rubygems'&lt;/em&gt; I came to realize that on the new machine, I did not add a certain line to my bashrc, an environment variable was not set. Since my development and production machines have this set, I forgot about it alltogether (when something &quot;just works&quot;, why  bother more mental effort on the matter?).&lt;/p&gt;

&lt;p&gt;Here is the line to be added to your &lt;em&gt;~/.bashrc&lt;/em&gt;:
&lt;code&gt;export RUBYOPT=rubygems&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, in all your ruby environments, gems are automatically available when 'require'ing them.
More on the matter at &lt;a href=&quot;http://stackoverflow.com/questions/132867/i-have-a-gem-installed-but-require-gemname-does-not-work-why&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu 10.04 - countdown</title>
   <link href="http://berk.es/2010/04/12/ubuntu-10-04-countdown"/>
   <updated>2010-04-12T00:00:00+02:00</updated>
   <id>http://berk.es/2010/04/12/ubuntu-10-04-countdown</id>
   <content type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.ubuntu.com/files/countdown/display.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Nog eventjes wachten en dan is er weer een nieuwe Ubuntu. Nóg beter, sneller, mooier, stabieler en fijner (hopen we dan maar)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jeff Jarvis over hoe de iPad participatie (weer) doodslaat.</title>
   <link href="http://berk.es/2010/04/05/jeff-jarvis-over-hoe-de-ipad-participatie-weer-doodslaat"/>
   <updated>2010-04-05T00:00:00+02:00</updated>
   <id>http://berk.es/2010/04/05/jeff-jarvis-over-hoe-de-ipad-participatie-weer-doodslaat</id>
   <content type="html">&lt;p&gt;iDingen bashen is leuk. Vooral wanneer je een beetje technisch onderlegd of geïnformeerd bent, kun je makkelijk door dat &lt;a href=&quot;http://en.wikipedia.org/wiki/Reality_distortion_field&quot;&gt;gehype&lt;/a&gt; heenkijken. En zie je gewoon perfect gemarkte maar technisch zeer middelmatige, maar bovenal helemaal-niet-zo vernieuwende producten. Van alle producten die Apple de laatste jaren lanceerde bleek eigenlijk al tijden een (beter) alternatief te zijn. Het mooiste is echter als iemand goed weet te onderbouwen waarom een bepaald Apple product toch eigenlijk heel slecht is (op allerlei gebied). Want meestal is het een welles-nietes spelletje en helaas blijken mac-fans op inhoudelijke kritiek meestal geen antwoord te hebben dan &quot;maar anderen doen het nog slechter&quot; of &quot;jamaar dat maakt mij niet uit, want ik heb dat niet (of juist wel, afhankelijk van het debat) nodig&quot;. Weinig tot geen inhoudelijke tegenargumenten, helaas. Zo ook &lt;a href=&quot;http://thefastertimes.com/mediaandtech/2010/04/04/the-ipad-an-unhappy-return-to-the-past/&quot;&gt;Jarvis' stuk &quot;The iPad: Where Creativity Goes to Die&quot;&lt;/a&gt;. Het verhaal als geheel maakt indruk, maar ene paar citaten geven goed aan wat er eigenlijk mis is met die iPad:&lt;!--break--&gt;&gt; The iPad is retrograde. It tries to turn us back into an audience again. That is why media companies and advertisers are embracing it so fervently, because they think it returns us all to their good old days when we just consumed, we didn\u2019t create, when they controlled our media experience and business models and we came to them.&lt;/p&gt;

&lt;p&gt;Waarna hij verder ingaat op de ontbrekende mogelijkheden om te creëren met dat apparaat. Om te participeren heb je invoermogelijkheid nodig, die nagenoeg ontbreekt: dat is ook precies het idee van dit ding. En daarna gaat hij door over het gegeven dat dit inherent slecht is: dat iedereen in zekere zin &quot;creëert&quot;. Het versturen van de foto's van het paasontbijt aan je schoonfamilie hoort ook tot creëren. Welhaast onmogelijk.&gt; ... shifting from a page-and-site-based Internet to one built on apps. I've been arguing that we are, indeed, moving past a page-, site-, and search-based web to one also built on streams and flows, to a distributed web where you can't expect people to come to you but you must go to them; you must get yourself into their streams. This shift to apps is a move in precisely the opposite direction. Apps are more closed, contained, controlling. That, again, is why media companies like them. Waar hij een heel belangrijk punt aansnijd: een &quot;app&quot; geeft de bouwer controle over de mogelijkheden ervan, bijvoorbeeld het niet kunnen gebruiken op de manier waarop jij het materiaal wenst te gebruiken. in feite dus &lt;a href=&quot;http://nl.wikipedia.org/wiki/Digital_Rights_Management&quot;&gt;DRM&lt;/a&gt;. Websites moeten (de techniek dicteert dat) met &lt;a href=&quot;http://nl.wikisource.org/wiki/Motie_Vendrik&quot;&gt;Open Standaarden&lt;/a&gt; hun materiaal aanleveren. Een app kan zelf de content op een bedrijfseigen, gesloten manier ophalen. Heerlijk voor klassieke mediabedrijven, funest voor een meer open informatievoorziening (aka internet). Stel je voor dat straks uitzendinggemist alleen nog te bekijken is op die paar platforms waarvoor de publieke omroepen het zinvol vonden om een app te bouwen. De iPad (feitelijk ook de iPhone en bijna alle smartphones) dragen hier aan bij. Al zijn Android (open Source mobiel platform van Google) en &lt;a href=&quot;http://meego.com/&quot;&gt;MeeGo&lt;/a&gt; (ookwel &lt;a href=&quot;http://maemo.nokia.com/&quot;&gt;Maemo&lt;/a&gt;, het open source platofmr van intel en Nokia) wel nettere spelers hierin. De apps daarop zijn vaak Open Source, en spelen veel vaker netjes met Open Standaarden en dus open en vrije informatie. De Apps op iDingen zijn veel vaker gesloten en veel ristrictiever over wat de gebruiker ermee mag doen.&lt;/p&gt;

&lt;p&gt;Kortom, de iPad is een &lt;a href=&quot;http://www.defectivebydesign.org/ipad&quot;&gt;grote stap richting een door bedrijven en instanties gecontroleerd internet&lt;/a&gt;. Net nu we met internet een vrije informatiesamenleving beginnen op te bouwen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Piwik 0.5.5 out. New plugin: AnonymizeIP</title>
   <link href="http://berk.es/2010/03/29/piwik-0-5-5-out-new-plugin-anonymizeip"/>
   <updated>2010-03-29T00:00:00+02:00</updated>
   <id>http://berk.es/2010/03/29/piwik-0-5-5-out-new-plugin-anonymizeip</id>
   <content type="html">&lt;p&gt;I run &lt;a href=&quot;http://piwik.org/&quot;&gt;piwik, the Open Source web analytics&lt;/a&gt; tool on the webschuur server to track some clients' sites and this site.&lt;/p&gt;

&lt;p&gt;Piwik released a new, mostly bugfix, version. But one particular new feature, the addon &quot;AnonymizeIP&quot; struck me as very usefull:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Anonymize visitor IP addresses to comply with your local privacy laws/guidelines.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://webschuur.com/files/screenshot_006.png&quot; alt=&quot;piwik plugin screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very little more to be found about this, unfortunately, so I dove into the code.
The file &lt;code&gt;global.ini.php&lt;/code&gt; contains a setting&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; number of octets in IP address to mask, in order to anonymize a visitor's IP address; if the 
AnonymizeIP plugin is deactivated, this value is ignored; for IPv4 addresses, valid values are 
0..4&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting this to e.g. 3 will mask the addresses, so that you store only the first IP-block is kept. For example, the IP adress from Google (one of the many) 74.125.77.147 will be &lt;strong&gt;stored&lt;/strong&gt; as 74.000.000.000 when set to &lt;em&gt;3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have set this to 2. So I can still guess the approximate region, but can never find out who you are exactly. Great for privacy, yet still somewhat usefull for me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>&quot;Drupal ceases being a Content Management Framework&quot;, says John a The Onion webdeveloper.</title>
   <link href="http://berk.es/2010/03/25/drupal-ceases-being-a-content-management-framework-says-john-a-the-onion-webdeveloper"/>
   <updated>2010-03-25T00:00:00+01:00</updated>
   <id>http://berk.es/2010/03/25/drupal-ceases-being-a-content-management-framework-says-john-a-the-onion-webdeveloper</id>
   <content type="html">&lt;p&gt;Since a while I have been going on about how I think Drupal is not a framework. Some call it a CMF, Content Management Framework. Some even dare to call it a web application framework (WAF). I think the latter have simply never worked with a real framework. But the CMF may be a correct label to put on Drupal. Or. Actually: might have once been.&lt;/p&gt;

&lt;p&gt;Today, Boris Mann pointed me to &lt;a href=&quot;http://www.reddit.com/r/django/comments/bhvhz/the_onion_uses_django_and_why_it_matters_to_us/&quot;&gt;an article by the developers of The Onion&lt;/a&gt;, once the &lt;a href=&quot;'&gt;pride of Drupal case studies.&lt;/p&gt;

&lt;p&gt;The article explains some reasoning behind moving &lt;strong&gt;from&lt;/strong&gt; Drupal to Django. Django, eventhough I never had the joy of working with it, is a real framework. But what struck me most, is a comment in the thread by one of the developers:&lt;cite&gt;As westononion pointed out at the start of this thread, that is not what this conversation is about, however, we were never able to use Drupal &quot;as a product&quot; since the form it existed in back when we adopted it was closer to a framework than a product. Five years ago, Drupal did not do what we needed it to do out of the box, so we took the tools and interfaces that it supplied and wrote a site with it. &lt;strong&gt;Since then it has evolved and become less like a framework and more of a one-size-fits-all solution&lt;/strong&gt; (with appropriate modules).&lt;/cite&gt;That is exactly it!  Development of Drupal 7 (now in its final stages) had a strong focus on Usability, &lt;a href=&quot;http://www.d7ux.org/&quot;&gt;and user experience&lt;/a&gt;. Drupal 6 saw the gigantic rise of CCK and Views usage, continued in core in 7 (fields, CCK) and contrib (views). User experience is not something a WAF needs. At all. The fact that Drupal needs a usability team, means that it has aspirations to become an end-user product. And not a developer tool. I foresee some trouble in the coming years, when more developers move to frameworks to build their sites. Developers that Drupal actually really needs to stay up front in the world of CMSes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupaljam 6</title>
   <link href="http://berk.es/2010/03/20/drupaljam-6"/>
   <updated>2010-03-20T00:00:00+01:00</updated>
   <id>http://berk.es/2010/03/20/drupaljam-6</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/skibinski/4447766976/&quot; title=&quot;flickr&quot;&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4040/4447766976_ff364e849e.jpg&quot; alt=&quot;Drupaljam&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.flickr.com/photos/skibinski/4447766976/&quot;&gt;Drupaljam 6&lt;/a&gt;, originally uploaded by &lt;a href=&quot;http://www.flickr.com/people/skibinski/&quot;&gt;Albert Skibinski&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drupaljam was een success. En onze  &lt;a href=&quot;http://wizzlern.nl/drupal/cheat-sheets&quot;&gt;wizzlern cheat sheets&lt;/a&gt; gingen als warme broodjes over de toonbank.&lt;!--break--&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>iDEAL codesprint at the Drupaljam</title>
   <link href="http://berk.es/2010/03/09/ideal-codesprint-at-the-drupaljam"/>
   <updated>2010-03-09T00:00:00+01:00</updated>
   <id>http://berk.es/2010/03/09/ideal-codesprint-at-the-drupaljam</id>
   <content type="html">&lt;p&gt;I will be hosting a &lt;a href=&quot;http://drupaljam.nl/sessies/drupaljam-5-utrecht/ideal-codesprint&quot;&gt;Drupal iDEAL Codesprint &lt;/a&gt; on the Drupaljam in Amsterdam. Please add a comment there, email me (ber -- webschuur - com) or contact me in whatever other way if you want to join, more information or anything else.&gt; iDeal is a Dutch, online payment system, widly adopted, but hard to implement.&amp;nbsp;In Drupal there are many iDeal implementations for übercart, but none are very solid and none are easy to implement; some are even plain insecure.&amp;nbsp;We, the Dutch Drupal community should &lt;strong&gt;focus development on one generic iDEAL layer&lt;/strong&gt;. A general iDEAL payment API. &amp;nbsp;Then developers can build their small übercart-ideal-payment, ecommerce-ideal-payment or whatever-ideal modules on top of that.&amp;nbsp;We do not just need code, &lt;strong&gt;Documentation is just as important&lt;/strong&gt;. One of the hardest part is finding out how to get it running, configured and how to get all the parameters right. Differences in implementation of banks, or their payment-plans make it extremely complex to get running fast. &amp;nbsp;If you have &lt;strong&gt;no experience&lt;/strong&gt; with iDEAL, we will explain the basics here (only if you promise to help, it is not a free iDEAL-course :).&amp;nbsp;If you have &lt;strong&gt;code lying around&lt;/strong&gt; for iDEAL implementations, please bring it.&amp;nbsp;iDeal is a Dutch, online payment system, widly adopted, but hard to implement.&amp;nbsp;In Drupal there are many iDeal implementations for übercart, but none are very solid and none are easy to implement; some are even plain insecure.&amp;nbsp;We, the Dutch Drupal community should &lt;strong&gt;focus development on one generic iDEAL layer&lt;/strong&gt;. A general iDEAL payment API. &amp;nbsp;Then developers can build their small übercart-ideal-payment, ecommerce-ideal-payment or whatever-ideal modules on top of that.&amp;nbsp;We do not just need code, &lt;strong&gt;Documentation is just as important&lt;/strong&gt;. One of the hardest part is finding out how to get it running, configured and how to get all the parameters right. Differences in implementation of banks, or their payment-plans make it extremely complex to get running fast. &amp;nbsp;Action-points for the sprint:  - Explain the architecture to developers and documenters
 - Agree upon where to centralise our development
 - Investigate all available code and modules (bring your code too, please)
 - Document the generic API concept: mission statement and short introduction
 - Write (stubs of) howto's and help-texts
 - Distribute the code/development issues and todo's
Time of the sprint will follow. Sprint will be in English, unless there are no none-dutch speakers at all attending.&amp;nbsp;For my initial work, refer to &lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api&quot;&gt;the ideal-payment-api on Github&lt;/a&gt; (note the crappy documenation :).&lt;/p&gt;

&lt;p&gt;For some of the TODOs with &lt;em&gt;this&lt;/em&gt; api, see the &lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api/issues&quot;&gt;issue list&lt;/a&gt;Note: It is not yet sure if we will take this one as our starting-point, or merely as one of the references and code-pieces.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Googlen in ruil voor je gegevens is helemaal niet nodig.</title>
   <link href="http://berk.es/2010/03/09/googlen-in-ruil-voor-je-gegevens-is-helemaal-niet-nodig"/>
   <updated>2010-03-09T00:00:00+01:00</updated>
   <id>http://berk.es/2010/03/09/googlen-in-ruil-voor-je-gegevens-is-helemaal-niet-nodig</id>
   <content type="html">&lt;p&gt;Iris van der Spoel schrijft in NRC.next een artikel over waarom we niet zo moeten zeuren over Googles vermeende privacy schendingen. Ze sluit af met een les voor &quot;ons&quot;: «Wij internetgebruikers moeten eerst eens goed nadenken over wat we precies verstaan onder privégegevens, voordat we ons aangetast voelen in onze privacy»Dat zit precies het venijn. Bits of Freedom, de diverse fora, blogs en andere hangouts van &quot;tin foil hats&quot;, privacy-activisten zijn bezet door mensen die precies dat deden: nadenken over hun privacy. Dit is ook precies een opvallend gegeven in de privacy-discussie: de experts lijken het allemaal met elkaar eens: Google (en andere instanties) zijn slecht voor onze privacy. Degenen aan de andere kant in dit debat, bijvoorbeeld Spoel, lijken vaak slecht geïnformeerde gebruikers te zijn. Diegenen die de techniek achter bijvoorbeeld de chipcard begrijpen, zien ook de gevaren. En wijzen daarop. En worden dan door tegenstanders weggezet als &quot;tegen gebruiksgemak&quot;.&lt;/p&gt;

&lt;p&gt;Zo ook van der Spoel. De rode draad in haar betoog is &quot;gebruiksgemak&quot;. En dat daar best wat privacy voor mag wijken. Dit is, technisch bekeken, volledige nonsens: Je kunt alle gemakken die zij beschrijft heel gemakkelijk bewerkstelligen zonder daarvoor privacy op te offeren. Adressen en beginpuntent onthouden op een kaart? Daarvoor zijn vele manieren, zoals GeoIP, anonieme geodata doorgeven (vanuit GSM devices) enzovoorts. Of in minder technische termen: het kan goed anders. Je TomTom doet dat ook gewoon, zónder meteen al je privégegens naar haar hoofdkantoor te sturen. Mijn Nokia, weet op zijn ingebouwde kaart ook altijd precies waar ik ben, zónder Nokia daarvan op de hoogte te hoeven stellen.&lt;/p&gt;

&lt;p&gt;Maar ook al was hiervoor geen technische oplossing, dan nóg is dit voor velen geen echt sterke reden om privacy zo grootschalig te laten wijken.&lt;/p&gt;

&lt;p&gt;Google books heeft bijvoorbeeld een concurrent waartegen veel minder bezwaar gemaakt wordt: Gutenberg. Toegegeven, ze bezitten maar een fractie van de boekenkast, en zoeken en vinden valt daar nog erg tegen. Dat heeft echter niets met privacy te maken, maar alles met beschikbaar budget (gebruiksgemak) en met doelstelling: Gutenberg indexeert boeken waarvan het auteursrecht is verlopen (de hoeveelheid beschikbare boeken is daarom minder groot). Overigens heeft indexeren van boeken niets met privacy te maken, maar dat geheel terzijde. En mensen die zich gepubliceerd willen zien, zullen zelden de route van dodde-bomen-inscannen nemen, maar gewoon zélf op het web publiceren. Daar hoeft Google books echt niet tussen te komen.&lt;/p&gt;

&lt;p&gt;Verder noemt ze een lijstje met Google-diensten, waar veelal heel aardige, tot veel betere alternatieven voor bestaan die stukken minder privacygevoelig zijn. Wanneer je daar alle commerciële (en closed source) alternatieven bij optelt, heb je een enorme lijst met diensten die Googles producten qua gebruiksgemak en hoeveelheid ver overstijgen. Het grootste probleem bij Google zit hem ook niet in die kleine stukjes informatie. Het is voor gebruikers veel veiliger om voor elke dienst een andere leverancier te nemen, dan één leverancier voor alles.&lt;/p&gt;

&lt;p&gt;En het zou nog beter zijn als we gewoon zélf onze leverancier zijn. Ik heb ook gewoon onbeperkt mail (nouja, ik geloof iets van een terabyte), omdat ik het gewoon zelf host. Ik begrijp best dat mijn oma niet haar eigen mail gaat hosten, dus aan ons de taak om dat voor haar te doen. Distributie heet dat. De kern van internet: verspreiding van data, infrastructuur en diensten. Google, met haar data obesitas tast precies deze essentie van het internet aan, met haar dataobesitas. En is daarmee niet enkel een gevaar vor onze privacy, maar mogelijk een gevaar voor het internet zélf.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git mirror for Basetheme Genesis</title>
   <link href="http://berk.es/2010/02/20/git-mirror-for-basetheme-genesis"/>
   <updated>2010-02-20T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/20/git-mirror-for-basetheme-genesis</id>
   <content type="html">&lt;p&gt;The fabulous basetheme &lt;a href=&quot;http://drupal.org/project/genesis&quot;&gt;Genesis&lt;/a&gt; is now &lt;a href=&quot;http://github.com/berkes/Genesis&quot;&gt;mirrored on Git&lt;/a&gt;. This has several advantages. A basetheme is used as scaffolding for your own theme. During upgrades and bugfixes, however, your altered version will be hard to keep in sync. Usually this costs a lot of manual labour; eliminating one of the advantages of a basetheme: continuous re-use of existing work.&lt;/p&gt;

&lt;p&gt;With git this becomes really easy. As long as you don't completely overhaul the base (core) of genesis, you can git-clone and git-merge all the future development on this base theme into your derivative! The cron and synchronisation-scripts are based on &lt;a href=&quot;http://mikkel.hoegh.org/blog/2008/feb/19/a_git_mirror_for_drupal_cvs/&quot;&gt;Mikkel Høgh's&lt;/a&gt; Drupal core synchronisation-work. Please be aware that I create and maintain this mirror for personal use, so there is no guarantee that I will continue doing so. When I no longer use genesis (not anytime soon, I expect) or when my synchronisation server breaks or when I finally decide to become a fulltime bike repair man, updates will probably no longer come in.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Facebook chat via XMPP (jabber) op je desktop-chat-programma.</title>
   <link href="http://berk.es/2010/02/19/facebook-chat-via-xmpp-jabber-op-je-desktop-chat-programma"/>
   <updated>2010-02-19T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/19/facebook-chat-via-xmpp-jabber-op-je-desktop-chat-programma</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://blog.xmpp.org/index.php/2010/02/welcome-facebook/&quot;&gt;Via XMppblog&lt;/a&gt; en &lt;a href=&quot;http://twitter.com/danbri/statuses/9326981087&quot;&gt;@danbri&lt;/a&gt; heb ik zojuist mijn &lt;a href=&quot;http://library.gnome.org/users/empathy/stable/introduction.html.en&quot;&gt;desktop-chat-programma&lt;/a&gt; op facebook aangesloten. De &lt;a href=&quot;http://www.facebook.com/sitetour/chat.php&quot;&gt;handleinding is op facebook&lt;/a&gt; te vinden.&gt;  This is great news for XMPP, and great news for open standards in general.&lt;!--break--&gt;Zoals XMPP-blog verder schrijft, is hiermee het aantaal XMPP gebruikers gestegen met ongeveer 400 miljoen. Overigens kon Hyves dit ooit ook, maar is die mogelijkheid door diverse wijzigingen in een grijze mist verdwenen. Of in elk geval ergens weggezakt waar ik hem niet meer zie.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Waarom ik geen Fair Trade wijn koop (en drink)</title>
   <link href="http://berk.es/2010/02/12/waarom-ik-geen-fair-trade-wijn-koop-en-drink"/>
   <updated>2010-02-12T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/12/waarom-ik-geen-fair-trade-wijn-koop-en-drink</id>
   <content type="html">&lt;p&gt;Winkelen is voor mij best makkelijk. Ik heb een soort radartje ontwikkeld voor de 'correcte' labeltjes: eco, fairtrade en bio. Staat dat tussen de pindakaas, dan is voor mij de keuze al gemaakt. Behalve in gevallen waar die elkaar bijten. Eco en fairtrade wijn in Nederland verkopen kan niet. Volgens mij dan. Biologisch en fairtrade kan dan weer wel.&lt;/p&gt;

&lt;p&gt;Fairtrade komt namelijk altijd uit landen waar trade niet al volgens de lokale wetten 'Fair' is. Wijn uit de E.&lt;/p&gt;

&lt;p&gt;U. is, zover ik kan nagaan, automatisch fair-trade. En zo niet, dan hebben we wetten en regels en parlementen om dat aan te pakken en zijn fairtrade labels niet echt nodig. Dus komt fairtrade wijn altijd van ver. Wordt het per schip naar een Europese haven gevaren, en met vrachtauto's vanuit de havens naar andere europese steden vervoerd en in de winkel gezet. Levert een aardige wolk CO&lt;sub&gt;2&lt;/sub&gt; op.&lt;/p&gt;

&lt;p&gt;Dat vervoeren over zulke afstanden is nooit ecologisch. En dus voor mij geen zuidafrikaanse of zuidamerikaanse fairtrade wijn. Maar &lt;a href=&quot;http://www.organicwine.nl/&quot;&gt;biologsiche Wijn&lt;/a&gt; uit 'de regio'.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Will Drupal become the next editorial tool (and cease being a community tool altogether?)</title>
   <link href="http://berk.es/2010/02/10/will-drupal-become-the-next-editorial-tool-and-cease-being-a-community-tool-altogether"/>
   <updated>2010-02-10T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/10/will-drupal-become-the-next-editorial-tool-and-cease-being-a-community-tool-altogether</id>
   <content type="html">&lt;p&gt;Recently, I came to realise that Drupal is not a community platform any more, it has grown into an editorial tool over the last years. Sure, you can build a community on top of Drupal, but the tools to do so, are underdeveloped, stale, or even simply unfinished.
I see more and more high-profile editorial sites being build, and see fewer successful or high-profile community being released.&lt;/p&gt;

&lt;p&gt;Not that there are no good examples of Communities built on Drupal, there are! But their amount is so small that they hardly count. And in all the Drupal projects that I developed for, managed, or simply built myself, the Community-sites were hardest to get right: Drupal simply lacks the high quality community-building components, that we are used to for editorial sites.&lt;/p&gt;

&lt;p&gt;What a community is (in this article)
One of the problems is the term &quot;community&quot; in itself. It is very broad. Some people call a blog with comments enabled a community. Others a mailing list. But the majority will think of a facebook-alike site. Or orkut, or twitter. Maybe even one the various PHPBB forums counts as such. In this article, I mean sites where &quot;People&quot; are central. And where content is organised around them. Facebook would be a community, but so would a simple site with Drupals blog-module enabled be: content is centred around people. Content is a piece of meta-data around the entity &quot;User&quot;, or &quot;Person&quot;. A community-site is one where &quot;People are the centre of it all&quot;.&lt;/p&gt;

&lt;h3&gt;The architecture&lt;/h3&gt;


&lt;p&gt;As such, a community platform should not be a &quot;Content Management System&quot;, but should be a &quot;People Management System&quot;. In a CMS, the person is meta-data around the central entity &quot;Article&quot;. Or, in Drupal speak: Node has an author. Drupal architecture is all built around content, with users being a &quot;thing that belongs to the content&quot;, almost an afterthought, almost nothing more then a necessary entity for logins and permissions. Certainly not the heart of a site.&lt;/p&gt;

&lt;h3&gt;The Tools or modules&lt;/h3&gt;


&lt;p&gt;Nodes have tens of thousands of tools (modules and the likes) to work with, enhance them, workflow them, access-model-them and so on. People very few. Only since views2 could we make lists of users; while cck still lacks all abilities to enhance users.&lt;/p&gt;

&lt;p&gt;It is a good thing that Drupal7 has chosen not to limit the fields (or: customisation) to nodes, but extended it to people.
Because when we talk about a proper community, the heart of that community is the users. And therefore their profiles. And I think just calling that one name, says it all: profile module.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Profiles in Drupal suck. You can avoid this by taking the one of the nodes-as-profile routes, and that will get you far. This, however gives you lots of side-effects, most notably on the data-integrity side, and on the usability side: it is pretty tough to get the flow &quot;just right&quot;. Not impossible! Just hard. Very much harder then to get a proper editors-flow set up right, for example.&lt;/li&gt;
&lt;li&gt;Access-models for users are almost undo-able: Viewing users and profiles remains mostly an all-or-nothing thing. Unless you abuse nodes as people (see above) you cannot provide a proper privacy model, where data is viewable to only a subset of the other users.&lt;/li&gt;
&lt;li&gt;Workflow-systems for users are hard to come by. The only one working rather well, is the logintoboggan, to enhance login workflows and to e.g. put users in a quarantaine untill they performed a certain action.&lt;/li&gt;
&lt;li&gt;Many modules, such as votings, queuing, automating, adding video's, images, making relationsships are all node-only. You can relate nodes. Add video's to nodes, import nodes, add nodes to queues, add complex votings and ratings to nodes. But not to people.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Another way to look at this, is to take &lt;a href=&quot;http://acquia.com/products-services/acquia-drupal-modules&quot;&gt;Aquia's&lt;/a&gt; community modules and look whether they provide community-tools, editorial tools or can be used for both: editorial: 15; community: 1; both: 7. Where I considered modules that come in one tarball as one module.
Aquia provides Drupal core community features and &lt;em&gt;one&lt;/em&gt; additional community tool: Comment notify. The Drupal download modules page (ordered by popularity) shows us the same sort of numbers.&lt;/p&gt;

&lt;h3&gt;Some statistics&lt;/h3&gt;


&lt;p&gt;And then there are the numbers. Let me mention explicitly that I don't consider (the very non-academic) statistics below as any proof. I consider them a sign. And the conclusion is not that you can tell by the numbers that Drupal is hardly used as community-tool, but that there are a lot fewer developers working on community-implementations then on editorial-implementations. And that as a result the latter will develop a lot better, faster, while the development of community tools will fall behind.&lt;/p&gt;

&lt;p&gt;For that I counted the amount of sites Dries spoke about in his &quot;&lt;a href=&quot;http://buytaert.net/tag/drupal-sites&quot;&gt;* uses Drupal&lt;/a&gt;&quot;, where he highlights high-profile Drupalsites.&lt;/p&gt;

&lt;p&gt;I counted &lt;em&gt;8 community sites&lt;/em&gt; and &lt;em&gt;31 editorial&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And I even took &quot;community&quot; very liberal, if I would take earlier mentioned &quot;People (or organisations) are the central entity&quot;, the balance shifts to 3/36. Another side note is that from the 8, at least 4 are in &quot;labs&quot;, testing or otherwise rather unofficial status. While all 31 editorial are &quot;final status&quot;.&lt;/p&gt;

&lt;h3&gt;The ongoing development.&lt;/h3&gt;


&lt;p&gt;And last there is the improvements in Drupal 7. The only improvement that makes building communities easier is a large and great one: &lt;a href=&quot;http://buytaert.net/drupal-7-fields-in-core-status-update-and-next-steps&quot;&gt;Ability to add fields to people&lt;/a&gt;: leverage people to a level that they are almost as important as the(ir) content. All other improvements are aimed at the editors: many usability improvements in the back-end, administration and daily management. Hardly any that make interaction of your users easier, none that I could find, anyway. Please prove me wrong on this one, and show me improvements that benefit a community site.&lt;/p&gt;

&lt;h3&gt;Okay, but what then?&lt;/h3&gt;


&lt;p&gt;I think calling Drupal a community platform is no more really valid. Sure, you &lt;em&gt;can&lt;/em&gt; build a community on top of it. And sure, Drupal offers more interaction(-tools) then most other CMS-es. But a site with interaction is not a community as we have come to know it.&lt;/p&gt;

&lt;p&gt;If you want to build a community in the sense of &quot;putting people in the centre&quot;, you will have trough a lot more development, and far more often you &quot;will be on your own&quot;; the work done and the manuals or posts explaining how to build your community features. And seeing the amount of editorial sites being developed compared to community, I think this will only become worse.&lt;/p&gt;

&lt;p&gt;We can either stop calling Drupal a community platform, or we can put more weight behind the community-tools in Drupal. Removing profile module from core was a great first step, pointing out, leveraging and fixing the other problems is the next.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal Databasedump for incremental backups.</title>
   <link href="http://berk.es/2010/02/05/drupal-databasedump-for-incremental-backups"/>
   <updated>2010-02-05T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/05/drupal-databasedump-for-incremental-backups</id>
   <content type="html">&lt;p&gt;Attached is a &lt;a href=&quot;http://webschuur.com/files/dump_fractured_database.tar_.gz&quot;&gt;simple script to backup Drupal databases in an incremental-archive-friendly way (1.7KB)&lt;/a&gt;.
Instead of dumping the database into one big SQL file, this script creates many small files; one per table. With a &lt;em&gt;blacklist option&lt;/em&gt; to exclude certain tables. It stores the structure (CREATE TABLE statements) in a separate file too.&lt;/p&gt;

&lt;p&gt;Separate files are usefull in an incremental backup situation: Drupal has many tables who's content hardly ever changes, and has tables whos content is completely rewritten every X days (cache, accesslogs, watchdog etc).
That way, those rather stale tables will not fill up your backups, while the quick-rotating tables can be excluded alltogether.&lt;/p&gt;

&lt;p&gt;This script does not create the incremental backups itself. It merely places them in a directory where your backup-system can pick them up.&lt;/p&gt;

&lt;h1&gt;Blacklist&lt;/h1&gt;

&lt;p&gt;Tablenames listed in blacklisted_tables.txt will be ignored, usefull to avoid backups of cached data.
&lt;em&gt;blacklisted_tables.txt&lt;/em&gt; should be placed in the backup-location.
Note: blacklisting watchdog or accesslog may make troubleshooting more difficult: you should probably dump these tables somewhere else: they contain valuable    data, but data that you probably don't want to save in backup archives.&lt;/p&gt;

&lt;h1&gt;Restore&lt;/h1&gt;

&lt;p&gt;Restoring many fractured files is a bit harder. But 'cat' does its job. If you find yourself restoring a lot, you may want to create a script for it. Or, actually, you may want to fix the cause of those many restores first :)
Important is to first run the strcuture into the database, and then the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cat struct_{date}.sql data_*_{date}.sql &amp;gt; mysql ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On huge backups, you may want to loop trough the dump_data files and import them one a time. On busy environments, close down (or lock) you database first: you really don't want Drupal writing in your database while you are importing. Esp. older Drupals
have a habit of fractured inserts, causing broken databases really easy.&lt;/p&gt;

&lt;h1&gt;Known issues and TODOs&lt;/h1&gt;

&lt;p&gt;TODO: If you feel uneasy about storing a password in a plaintext file (you should!), have a look at the debian/ubuntu way of passing a system-maintainance cnf file to mysql. Another reason for not wanting passwds used like this, is that they show up, visible for each user on a system, in the ps-table. Feel free to improve this :)&lt;/p&gt;

&lt;p&gt;TODO: the tmp_alltables.txt-file is not multithreadsafe. Nor is the simple output dumping. In other words: do not run two instances of this script at once. Something with lockfiles, or unique filenames could be a solution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DB=database_name
HOST=localhost
USER=database_user
PASS=database_user_password
BACKUP_PATH=/path/to/place/backups

# Run mysqldump to backup the structure (should hardly ever change)
mysqldump --add-drop-table --create-options --no-data --compress -u$USER -p$PASS -h$HOST $DB &amp;gt; $BACKUP_PATH/struct.sql

# Create a list of all tables 
mysql --skip-column-names -u$USER -p$PASS -h$HOST $DB -e'show tables;' &amp;gt; $BACKUP_PATH/tmp_alltables.txt

# Loop trough the list of tables, filter out blackisted and dump each table.
for table in `comm -23 $BACKUP_PATH/tmp_alltables.txt $BACKUP_PATH/blacklisted_tables.txt`; 
do
    mysqldump --no-create-info --complete-insert --compress --force --lock-tables -u$USER -p$PASS -h$HOST $DB $table &amp;gt; $BACKUP_PATH/data_$table.sql;
done

# And clean up
rm $BACKUP_PATH/tmp_alltables.txt
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>wij stoppen ook met het ondersteunen van Internet Explorer 6</title>
   <link href="http://berk.es/2010/02/03/wij-stoppen-ook-met-het-ondersteunen-van-internet-explorer-6"/>
   <updated>2010-02-03T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/03/wij-stoppen-ook-met-het-ondersteunen-van-internet-explorer-6</id>
   <content type="html">&lt;p&gt;Al ruim een jaar bied ik niet langer ondersteuning voor Internet Explorer 6 meer, op de projecten die ik oplever. De klanten die wel deze ondersteuning willen, betalen daar gewoon extra voor. Uiteraard betekent ondersteuning niet dat klanten met een oude browser worden geweigerd. Of dat die niets te zien krijgen. Ze krijgen gewoon niet altijd een &quot;mooie&quot; site. Of ze moeten soms nét iets vaker door formuliertjes klikken. Uiteraard laat ik altijd alles goed degraden, zodat iedereen bij alle features kan komen: ongeacht hun browser. Vandaar dat ik met &lt;a href=&quot;http://webschuur.com&quot;&gt;webschuur.com&lt;/a&gt; meteen het initiatief &lt;a href=&quot;http://Wijstoppenook.nl/nl/waarom&quot;&gt;Wijstoppenook&lt;/a&gt; (met het ondersteunen van Internet Explorer).&lt;!--break--&gt;&gt; Google stopt met het ondersteunen van Internet Explorer 6. Wij stoppen ook!Google stopt per 1 maart met het ondersteunen van Internet Explorer 6, om te beginnen met hun kantoorapplicatie Google Docs. Onder meer Youtube had al eerder aangegeven te stoppen met het ondersteunen van IE6. Internet Explorer 6 is een belemmering voor de ontwikkeling van het internet. Wij roepen alle webontwerpers, webontwikkelaars en opdrachtgevers op om te stoppen met het ondersteunen van Internet Explorer 6. Doe mee op www.wijstoppenook.nl!Doe mee met Wijstoppenook.nl! Door je aan te melden help je met het uitbannen van de verouderde Internet Explorer 6 browser. Ga naar &lt;a href=&quot;http://www.wijstoppenook.nl&quot;&gt;wijstoppenook.nl&lt;/a&gt;Hoe doe jij dat? Ondersteun je IE6 nog? Reken je daar ook extra voor? Gebruik je deze browser misschien nog?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Drupal iDEAL codesprint</title>
   <link href="http://berk.es/2010/02/02/drupal-ideal-codesprint"/>
   <updated>2010-02-02T00:00:00+01:00</updated>
   <id>http://berk.es/2010/02/02/drupal-ideal-codesprint</id>
   <content type="html">&lt;p&gt;Op de &lt;a href=&quot;http://drupal.nl/evenement/drupaljam-6-amsterdam&quot;&gt;komende DrupalJam&lt;/a&gt; wil ik een codesprint voor een centraal iDEAL-project. Ik ben nog in overleg met de organisatoren, dus mogelijk moeten we het buiten de Drupaljam om gaan doen, al verwacht ik wel dat op de jam hier ruimte voor is.&lt;/p&gt;

&lt;p&gt;Het plan is om met 5 of 6 developers (meer mag ook, maar kan het vinden van ruimte en organisatie vermoeilijken) gedurende ongeveer 2 uur bijelkaar te gaan zitten. Niet-developers zijn uiteraard van harte welkom, mits ze enige ervaring met iDEAL hebben; het is met nadruk geen iDEAL workshop, maar een codesprint om &lt;em&gt;alle uiteenlopende, gefragmenteerde projecten te centraliseren&lt;/em&gt; en daarna dit naar een hoger plan te tillen.&lt;/p&gt;

&lt;p&gt;Ik verzorg een switch, kan ook evt een wireless router meenemen als we enkel wireless hebben. Deelnemers verzorgen zelf laptops.&lt;/p&gt;

&lt;p&gt;Ik ben druk alle (drupal) en andere OSScode aan het verzamelen. Doel is: - een centraal Open Source ideal interface opzetten. (niet persé Drupalspecifiek)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Centrale Drupal-ideal beginnersdocumentatie inrichten en ook al deels vullen.&lt;/li&gt;
&lt;li&gt;Drupal specifieke ideal-module, of modules neerzetten.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Na de Drupaljam wil ik één Drupal.org projectpagina hebben staan met documentatie en eerste code waar ontwikkelaars en gebruikers iDEAL-modules kunnen vinden. En mogelijk één ideal-API pagina waarop een OpenSource iDEAL-bibliotheek te vinden is (als alternatief voor de verscheidenheid aan gesloten en soms moeilijk te verkrijgen en implementeren code van de verschillende banken).&lt;/p&gt;

&lt;p&gt;Dat laatste zou niet Drupal-specifiek zijn, maar wél OpenSource. Hopelijk kunnen we ontwikkelaars uit bijvoorbeeld magento, Joomla! en wordpress hierbij betrekken.&lt;/p&gt;

&lt;p&gt;Weet jij geïnteresseerden? Heb je nog oude iDEAL code rondslingeren die je nooit releaste -om welke reden dan ook- maar die je wel wilt delen? Gebruik je Drupal en iDeal al op dagelijkse basis en wil je wat van je kennis delen? Laat een comment achter, of mail me op ber apending webschuur punt com.&lt;/p&gt;

&lt;p&gt;Wanneer eea is bevestigt volgt meer informatie.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Waarom ik zo loop te schoppen tegen Apple (en zijn fans)</title>
   <link href="http://berk.es/2010/01/31/waarom-ik-zo-loop-te-schoppen-tegen-apple-en-zijn-fans"/>
   <updated>2010-01-31T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/31/waarom-ik-zo-loop-te-schoppen-tegen-apple-en-zijn-fans</id>
   <content type="html">&lt;p&gt;Ik ben nooit een grote fan van Apple geweest. En dat ligt niet aan, zoals mij vaak wordt verweten &quot;omdat ik er nog nooit mee gewerkt heb&quot;. Dat heb ik wel. Toegegeven, ik werk al ruim 10 jaar bijna alleen nog maar op Linux, maar als ITer kom ik geregeld bij klanten waar ik windowsmachines mag opschonen, of in macs mag rondpoken. Sinds een paar maanden loop ik al te broeden op een stukje over het waarom; waarom die groeiende hekel aan Apple? Waar komt die welhaast arrogante (eigenlijk bijna medelijdende) houding van mij tegenover mac-fans toch vandaan? Als ik aan zo'n fan denk, dan zie ik iemand voor me, die waauw! roept, maar geen idee heeft wat hij eigenlijk zo mooi vind; volledig onwetend over de technologie die hij bejubelt. Kortom, iemand die zwaar beïnvloed is door het &lt;a href=&quot;http://en.wikipedia.org/wiki/Reality_distortion_field&quot;&gt;Reality Distortion Field&lt;/a&gt;. Uiteraard is dat heel kortzichtig en bevooroordeeld van mij, want zelfs in mijn directe werk-omgeving (Open Source Developers) zitten heel veel mac-liefhebbers. En die zijn écht niet onwetend over de door hun bejubelde producten.&lt;/p&gt;

&lt;p&gt;En nu weet ik het. Omdat ik het stuk las, dat ik zelf (in mijn hoofd) aan het schrijven was. &lt;a href=&quot;http://diveintomark.org/archives/2010/01/29/tinkerers-sunset&quot;&gt;tinkerers-sunset, door Mark Pilgrim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Het gaat om vrijheid. Een vrijheid die veel mensen niet nodig denken te hebben (&quot;ik wil gewoon kunnen bellen&quot;, &quot;ik wil gewoon met Words kunnen werken en kunnen internetten op Hyves enzo.&quot;) maar die &quot;Het Internet&quot;, of eigenlijk de ICT heel hard nodig heeft. En daarmee de gebruikers van de producten (en sites) die &quot;gewoon dit en dat willen&quot; dus ook. &gt;  But I don’t want to live in a world where you have to break into your own computer before you can start tinkering. And I certainly don’t want to live in a world where tinkering with your own computer is illegal.&lt;/p&gt;

&lt;p&gt;Waarin hij rerefeert aan het moeten inbreken op je Iphone, om eigen (of niet door Apple goedgekeurde) software te moeten draaien. Hier gaat het niet om het feit of je in kán breken op je eigen computer, om daar dingen te doen die waarschijnlijk onverstandig zijn. Maar om het feit dat dit niet mág. Dat dit illegaal is.&gt; Once upon a time, Apple made the machines that made me who I am. I became who I am by tinkering. Now it seems they’re doing everything in their power to stop my kids from finding that sense of wonder. Apple has declared war on the tinkerers of the world.&lt;/p&gt;

&lt;p&gt;Ik heb leren programmeren op een van de &lt;a href=&quot;http://dl.emu-land.net/news/250px-IBM_PC_5150.jpg&quot;&gt;eerste serie DOS personal computers&lt;/a&gt;, dus ik heb Mike's ervaringen met oude macs niet mogen delen. Maar zijn sentiment deel ik wél; Als Apple met de iPad de weg die ze insloegen doorzet, dan is Apple de voorloper in een stroming waarbij de verbetering van computers enkel nog door een selectief gropje multinationals mag gebeuren. En dan is Apple daarmee misschien wel de grootste vijand van de vrijheid en ontwikkeling die computers, ICT en alles daaromheen ons brengen. Dan is Apple hét gezicht geworden van gesloten software, &lt;a href=&quot;http://www.defectivebydesign.org/ipad&quot;&gt;corporate eigendom van cultuur, muziek en media&lt;/a&gt;, ingeperkte kennis en gesloten hardware.&lt;/p&gt;

&lt;p&gt;En de Apple fans, scharen zich hierachter en maken dit alles mogelijk. Waarvoor dank.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Volgende twitter-experiment: alles naar twitter dumpen. (en daarmee aantonen dat twitter dit jaar gaat verzuipen)</title>
   <link href="http://berk.es/2010/01/30/volgende-twitter-experiment-alles-naar-twitter-dumpen-en-daarmee-aantonen-dat-twitter-dit-jaar-gaat-verzuipen"/>
   <updated>2010-01-30T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/30/volgende-twitter-experiment-alles-naar-twitter-dumpen-en-daarmee-aantonen-dat-twitter-dit-jaar-gaat-verzuipen</id>
   <content type="html">&lt;p&gt;Mijn &lt;a href=&quot;http://bler.webschuur.com/twitter_experiment_de_hele_maand_januari_schrijf_ik_maximaal_2_tweets_per_dag&quot;&gt;maand twinderen&lt;/a&gt; is goed bevallen. Over het concrete resultaat schrijf ik nog een nieuwe blogpost, maar het aantal replies, followers en vooral de kwaliteit van de schrijfsels ging vooruit. Nu ga ik het experiment doortrekken en doe ik het precies andersom; twitter wordt één maand lang mijn centrale dump-plek. Iedere tool, applicaite of dienst die ik gebruik, die naar twitter kan posten laat ik dat ook doen. Ongeveer wat mijn &lt;a href=&quot;http://bler.webschuur.com/activity_stream&quot;&gt;Activity stream&lt;/a&gt; hier al doet.&lt;!--break--&gt;Ik ben namelijk overtuigd dat twitter dit jaar gaat knappen. De twuchtbel spat uiteen als gevolg van de enorm toenemende ruis. Tenzij -en eigenlijk hoop ik daar vooral op- twitter zelf met oplossingen komt om de ruis uit te filteren. En met filteren bedoel ik niet dat ik niks meer wil horen over dat stomme iDing, maar filteren van allerlei automatische tweets. Bijvoorbeeld in de vorm die facebook al heeft, waarmee ik kan aangeven nooit meer van die mafia-op-de-boerderij berichten te willen zien. Met automatsiche tweets bedoel ik bijvoorbeeld iphones die melding maken dat je op zoveel graden noorderbreedte en zoveel zuiderbreedte bent aangekomen. Gaap. Of tweets die vanuit RSS-feeds gevoed worden (als ik die feed wil volgen, gebruik ik wel een feedreader, dankje). Tweets dat je de zoveelduizendste foto van jezelf liet maken, tweets vanuit je mediaspeler die iedereen vertellen waar je naar luistert, welke sites je bookmarkt, dat je een foto op flickr zette, of hoveel je nu weer &lt;a href=&quot;http://www.elektroretailmagazine.nl/2010/01/12/twitterende-weegschaal/&quot;&gt;weegt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ik verwacht dat we dit jaar een twitter-koppeling in zo ongeveer elk stuk software en elk soort hardware gaan zien. Van twitterende boormachines &quot;Ik zit nu 3 centimeter diep in de muur&quot; tot  printers &quot;currently printing &quot;Annual_report_2009.pdf&quot;, via &lt;a href=&quot;http://www.botanicalls.com/kits/&quot;&gt;planten&lt;/a&gt; naar wat je &lt;a href=&quot;http://tweetwhatyoueat.com/&quot;&gt;eet&lt;/a&gt;. En dan ga ik nog voorbij aan al het gekoppel van andere sites aan twitter; &quot;Bèr kijkt nu naar &lt;code&gt;I Can Has new Twoiletspapers?&lt;/code&gt; op youtube&quot;.&lt;/p&gt;

&lt;p&gt;Kortom, ik verwacht een enorme, ondoorwaadbare &lt;a href=&quot;http://twitter.com/bertboerland/status/7310072432&quot;&gt;brei aan non-informatie&lt;/a&gt;. Zoveel, dat zelfs de power-users met geen mogelijkheid nog enige berichten door de brei heengedruk krijgen (ik voorspel dat nog voor kerst, zelfs &lt;a href=&quot;http://twitter.com/Erwblo&quot;&gt;@erwblo&lt;/a&gt; niet meer te horen is, in het geruis van die non-informatie). Laat staan dat ik met mijn schaarse tijd nog iets met die vloedgolf aan informatie kan aanvangen. En als experiment ga ik daar een maand aan meedoen. Ik ga iedere redelijke app die ik gebruik koppelen aan twitter. Ik ga die tweets echter nergens anders naar doorzetten. Twitter is het eindpunt. Het doucheputje. Uiteraard zal ik tussen die ruis ook nog proberen echte tweets te plaatsen. Wat diensten die ik op het oog heb.   - Last.fm listening to
  - Blip.fm music tweets
  - Flickr images
  - posts diverse blogs
  - mijn delicious bookmarks
  - Hyves (Hyves → Twitter, niet andersom)
  - Facebook (Facebook → Twitter, niet andersom)
  - Github commits aan interessante projecten
  - comments, votes, polls enzovoort die overal en nergens staan maar waar ik aan deelneem
Overigens behoud ik wel een afbreek-mogelijkheid. Als ik na een week helemaal knetter wordt van die ruis, of mensen om me heen dat worden, dan zal ik het stopzetten. Want dan is mijn punt al meteen bewezen.&lt;/p&gt;

&lt;p&gt;Weet je nog andere diensten die naar twitter kunnen pushen en die ik over het hoofd zie?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>&quot;They had no intention of of selling records to anyone else&quot;</title>
   <link href="http://berk.es/2010/01/28/they-had-no-intention-of-of-selling-records-to-anyone-else"/>
   <updated>2010-01-28T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/28/they-had-no-intention-of-of-selling-records-to-anyone-else</id>
   <content type="html">&lt;object width=&quot;640&quot; height=&quot;505&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/tcKXhMgBC-k&amp;hl=nl_NL&amp;fs=1&amp;color1=0x5d1719&amp;color2=0xcd311b&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;embed src=&quot;http://www.youtube.com/v/tcKXhMgBC-k&amp;hl=nl_NL&amp;fs=1&amp;color1=0x5d1719&amp;color2=0xcd311b&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;640&quot; height=&quot;505&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;blockquote&gt;&lt;p&gt;To promote their soundsystems, Reed and his Competitors had turned to recordproducing by the end of the fifties. But not as we know it today. They had no intention of selling records to anyone else. They brought Jazz-musicians down from the touristhotels, to play the Jamaican versions of their R&amp;amp;B,  and then they made just &lt;em&gt;one&lt;/em&gt; copy of each record, to play it at their soundsystem and achieve the much prized exclusive. Dan vraag ik me toch weer opnieuw af, waar die platebazen, auteursrechten organisaties en zelfs artiesten zelf over lopen te zeiken. Buiten westeuropa zijn genoeg voorbeelden te vinden van alternatieve (sucesvolle) verdienmodellen rondom muziek. Zonder ook maar één plaat te verkopen!&lt;!--break--&gt;&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>DrupalJam Amsterdam, 19 maart 2010!</title>
   <link href="http://berk.es/2010/01/28/drupaljam-amsterdam-19-maart-2010"/>
   <updated>2010-01-28T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/28/drupaljam-amsterdam-19-maart-2010</id>
   <content type="html">&lt;p&gt;Zojuist per mail ontvangen. Zegt het voort!&gt; Op 19 maart 2010 vindt de volgende DrupalJam plaats in Amsterdam.  Toneel voor deze editie is Stayokay Zeeburg, waar wij een vijftal  zalen beschikbaar zullen hebben voor presentaties, workshops, BoF's en  meer! De lokatie stelt alle bezoekers in staat om te blijven  overnachten, aangezien enkelen ver zullen moeten reizen of 's avonds  mee willen naar de kroegmeet (aankondiging daarvan volgt).&lt;/p&gt;

&lt;p&gt;Meer informatie staat op http://drupal.be/evenement/drupaljam-6-amsterdam . Op http://twitter.com/drupaljam worden regelmatig updates geplaatst.  Drupaljam.nl zal binnenkort aangepast en geüpdatet worden.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bler, nu met 100% meer activity-stream</title>
   <link href="http://berk.es/2010/01/08/bler-nu-met-100-meer-activity-stream"/>
   <updated>2010-01-08T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/08/bler-nu-met-100-meer-activity-stream</id>
   <content type="html">&lt;p&gt;Gedurende de week 'doe' ik vanalles op internet. Facebooken, twitteren, reageren, muziek luisteren. Enzovoort. Iedereen doet dat. En naarmate meer mensen deze activiteiten koppelen overstroomt je twitter- of facebook stroom gewoon. Op een gegeven moment sturen je &quot;vrienden&quot; dagelijks (tien)duizenden berichten, waarmee het positieve effect volledig teniet word gedaan. Steeds meer mensen sturen hun activiteit door naar Twitter; koppelen hun bookmarks, 'ik-luister-nu-naar', 'ik vind dit een leuke video' aan Facebook, of Twitter. Of allebei. Ik verzamel mijn activiteit, vanaf nu op &lt;a href=&quot;http://bler.webschuur.com/activity_stream&quot;&gt;mijn blog&lt;/a&gt;.&lt;!--break--&gt;Ik ben erg actief op internet. 50 of meer van zulke berichten van hot naar her sturen is niet ongewoon. De meeste mensen in mijn netwerk ook. Maar als ik soms over de schouder van mijn lief kijkt als ze facebookt, staat haar voorpagina he-le-maal vol met &quot;Bèr Kessels deed-, vond-, stuurde, is nu&quot;. Nu vind ik het niet erg als ik zo'n groot onderdeel van haar (online) sociale wereld inneem. Maar dit kan toch niet de bedoeling zijn. Ik overstroom haar facebook volledig, waardoor ze nauwelijks meer kan zien wat haar (minder actieve) vriendinnen en vrienden doen.&lt;/p&gt;

&lt;p&gt;En zelfs voor mij gaat het vaak te ver. Na een dag meetings- of niet online, kom ik door de honderden meldingen, bookmarks, tweets, replies, facebook-ik-vind-dit-leuks niet meer heen. En negeer ik ze maar allemaal. Als, zoals nu, een paar grootgebruikers in je netwerk een paarhonderd berichten per week naar hun omgevingen sturen: prima. Maar stel dat iedereen dat gaat doen. Dat alle activiteit van internetters verzameld worden. En als dat door organisaties dan ook nog geaggregeerd wordt. Dan moet je altijd alles negeren. En dan krijg je een onuitwarbare brei. Dan verword twitter, van een omgeving om interessante activiteit en kennis binnen je netwerk te volgen, tot een ongefilterede brei met vele honderduizenden berichten per dag. Dan is de signaal-ruisverhouding compleet zoek. Precies die ene bookmark of dat ene artikel dat je echt had moeten zien, gaat compleet verloren tussen alle duizenden 'ik luister nu naar' berichten.  Ik had mij al voorgenomen om deze hele maand &lt;a href=&quot;http://bler.webschuur.com/twitter_experiment_de_hele_maand_januari_schrijf_ik_maximaal_2_tweets_per_dag&quot;&gt;minder te twitteren&lt;/a&gt;. Om te ondezoeken welke invloed deze snel verschuivende signaal-ruis-verhouding heeft. Wat gebeurt als ik niet meer alles naar twitter duw. Nu voeg ik nog iets aan dat experiment toe: een persoonlijke, centrale '&lt;a href=&quot;http://bler.webschuur.com/activity_stream&quot;&gt;wat doe ik de hele dag op de interwebs&lt;/a&gt;' pagina in mijn blog.&lt;/p&gt;

&lt;p&gt;Zodat ik deze ruis uit facebook en twitter kan weghalen, maar toch registreer. Ik doe dit overigens met de &lt;a href=&quot;http://drupal.org/project/activitystream&quot;&gt;Drupal activity stream module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Als volgende stap broed ik nog op 'de conversatie vangen':Waarbij reacties op mijn acties zoals &quot;Karel vindt dit leuk&quot;, of &quot;RT @berkes: Foo is niet Bar&quot;. Of &quot;@berkes: inderdaad, wat een kluns!&quot;. Kortom, de eerste stap nét buiten mijn netwerk. En ook wil ik gaan experimenteren met &quot;dagelijkse digests&quot;. Waarin uit alle brei, de zaken die deze dag komen bovenborrelen uitgelicht worden. Denk aan tweets die een paar maal geretweet werden. Of aan dat ene facebook bericht waar een paar mensen op reageerden. Kortom: die &quot;activiteiten&quot;, automatisch verzamelen, die deze dag aandacht verdienden. En kregen. Als je ideeën hebt over die laatste twee, of ze al ergens ingezet ziet, hoor ik dat graag.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sea Sheperd botst met walvisvaarders: de Sea Sheperd kant in video</title>
   <link href="http://berk.es/2010/01/07/sea-sheperd-botst-met-walvisvaarders-de-sea-sheperd-kant-in-video"/>
   <updated>2010-01-07T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/07/sea-sheperd-botst-met-walvisvaarders-de-sea-sheperd-kant-in-video</id>
   <content type="html">&lt;p&gt;Een boot van de Sea Sheperd botst met walvisvaarders. Het NOs journaal toont beelden, maar, zo lijkt het, alleen de beelden die de Japanse kant van het verhaal ondersteunen. Gelukkig is op Internet altijd &lt;a href=&quot;http://www.youtube.com/watch?v=MhGSQ46a9X8&quot;&gt;meer materiaal&lt;/a&gt; te vinden. &lt;object width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/MhGSQ46a9X8&amp;hl=nl_NL&amp;fs=1&amp;&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;embed src=&quot;http://www.youtube.com/v/MhGSQ46a9X8&amp;hl=nl_NL&amp;fs=1&amp;&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;Ook zeker niet objectief, de beelden en commentaren in de video laten wél duidelijk zien dat de beelden die NOS ons toont alléén de Japanse kant van het verhaal vertellen en daarmee ook niet objectief zijn. Ik hoop dat het jounraal vanavond het geval iets verder uitdiept en beide kanten laat zien.&lt;!--break--&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Met één toetsenbord en muis meerdere PC's bedienen</title>
   <link href="http://berk.es/2010/01/07/met-n-toetsenbord-en-muis-meerdere-pcs-bedienen"/>
   <updated>2010-01-07T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/07/met-n-toetsenbord-en-muis-meerdere-pcs-bedienen</id>
   <content type="html">&lt;p&gt;Met één toetsenbord en muis meerdere PC's bedienen is heel makkelijk met &lt;a href=&quot;http://x2x.dottedmag.net/&quot;&gt;x2x&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dit werkt ongeveer als een &lt;a href=&quot;http://nl.wikipedia.org/wiki/KVM-switch&quot;&gt;KVM switch&lt;/a&gt;, maar vereist géén extra draden, aansluitingen, of hardware.&lt;/p&gt;

&lt;p&gt;Je gebruikt de schermen van de desbetreffende computers, dit is dus niet geschikt om vanuit je werkt even de desktop thuis te openen. Daarvoor gebruik je een heel andere techniek, &lt;a href=&quot;http://www.ubuntugeek.com/share-your-ubuntu-desktop-using-remote-desktop.html&quot;&gt;desktop sharing&lt;/a&gt;. Het goede nieuws is dat dit laatste in Ubuntu heel makkelijk is; alle software is al aanwezig hiervoor. De case waar ik dit vaak voor gebruik, is als ik met mijn laptop naast mijn desktop ga zitten en beide computers wil gebruiken, zonder de hele tijd te wisselen van toetsenbord en muis.&lt;/p&gt;

&lt;p&gt;Het enige dat nodig is, is &lt;a href=&quot;http://doc.nl.linux.org/HOWTO/Ssh-Getting-Started-NL.html&quot;&gt;SSH&lt;/a&gt;. Op de PC waarop de muis en toetsenborden zijn aangesloten moet een ssh-client staan. Op de PC die je wilt gaan bedienen, moet een ssh-server draaien en moet het programma X2X geïnstalleerd zijn. Ik ga uit van Ubuntu, op beide machines, maar met OSX (mac) moet het ook heel makkelijk kunnen. Eerst moet je op de computer waarmee je wilt verbinden, ssh en x2x installeren. Die eerste is meestal al voorgeïnstalleerd op ubuntu, maar voor de zekerheid (geen ervaring met commando's? kijk &lt;a href=&quot;https://help.ubuntu.com/community/UsingTheTerminal&quot;&gt;in deze handleiding&lt;/a&gt;) &lt;code&gt;sudo apt-get install ssh x2x&lt;/code&gt;Ga nu terug naar de computer van waaruit je zometeen wilt verbinden. En typ op een terminal of commandline het volgende in:   &lt;code&gt;ssh -X _remote_machinename_or_ip_address_ x2x _-direction_of_the_remote_display_ -to :0&lt;/code&gt;hierin is:  - &lt;em&gt;remote_machinename_or_ip_address&lt;/em&gt; het IP-adres of de netwerknaam van de andere machine. In een intern (thuis)netwerk vaak iets als 192.168.&lt;/p&gt;

&lt;p&gt;X.&lt;/p&gt;

&lt;p&gt;Y
  - &lt;em&gt;-direction_of_the_remote_display&lt;/em&gt; de positie waar het scherm staat ten opzichte van je hoofdssyteem. -west plaatst het nieuwe scherm rechts, -east links
  Op mijn buro staat mijn laptop links van mijn desktop-pc. Ik wil vanuit mijn laptop de desktop-pc (deze heet emanuela en heeft het netwerkadres emanuela.fritz.box) aansturen. Dus typ ik op mijn laptop in:  &lt;code&gt;ssh -X ber@emanuela.fritz.box x2x -east -to :0&lt;/code&gt;Hiermee log ik op emanuela in als 'ber', en stel het scherm van emanuela in, zodat het rechts van mijn laptop verschijnt. Als ik de muis rechts uit het scherm van mijn laptop laat lopen, komt de muisaanwijzer het scherm van emanuela binnenwandelen. Het toetsenbord van mijn laptop werkt vanaf dan op het scherm van emanuela. Ook mooi, is dat dingen die ik op emanuela knip of copieer (control-c) later binnen mijn laptop te plakken zijn (en vice versa). Uiteraard kan ik geen schermen van links naar rechts verplaatsen. Meer details zijn te vinden in een inleiding op &lt;a href=&quot;http://www.linux.com/archive/feature/148824&quot;&gt;linux.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Een alternatief is &lt;a href=&quot;http://synergy2.sourceforge.net/&quot;&gt;synergy&lt;/a&gt;. Hiermee kun je makkelijk verschillende OSsen mengen, en het heeft grafische tools om dingen in te stellen. Voot mij doet X2X het echter perfect. Simpel, snel en makkelijk te gebruiken.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lots of missing files in development of Drupal? Switch off Drupal's error handling</title>
   <link href="http://berk.es/2010/01/05/lots-of-missing-files-in-development-of-drupal-switch-off-drupals-error-handling"/>
   <updated>2010-01-05T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/05/lots-of-missing-files-in-development-of-drupal-switch-off-drupals-error-handling</id>
   <content type="html">&lt;p&gt;When testing, or developing an existing site, one often does not copy over all the filebase.
A site that has been collecting uploads (such as images in blogs) for a while may have a gigantic amount of images. Often, when setting up a development environment, it is too much to keep the entire filebase in sync, even when you work on a recent codebase and a recent database.&lt;/p&gt;

&lt;p&gt;In Drupal, this gives a lot of problems with the &quot;file not found&quot; handling. The default Drupal .htaccess puts 404 errors, file not found, on to Drupal. So that Drupal can write watchdog errors, or fire things such as imagecache image-actions.
On a page with several images this may result in tens, or sometimes even over 50 file-not-found errors. And since they are all passed to Drupal, the whole of Drupal is bootstrapped, database-connections are opened, watchdog entries are written, and maybe a lot more, even.&lt;/p&gt;

&lt;p&gt;On my poor old dual-core laptop, this can result in 15 apache threads hammering the database and the CPU all at once! As if I am serving fifteen simultaneous visitors at once!&lt;/p&gt;

&lt;p&gt;The simple solution, is to switch off Drupal's error-handling in .htaccess.&lt;/p&gt;

&lt;p&gt;In the file .htaccess, in Drupal root, simply replace the line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Make Drupal handle any 404 errors.
ErrorDocument 404 /index.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Make Drupal handle any 404 errors.
ErrorDocument 404 &quot;The requested page was not found.  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That speeds up your development -environment with missing images often a hundred- or more-fold!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cocosmelk</title>
   <link href="http://berk.es/2010/01/05/cocosmelk"/>
   <updated>2010-01-05T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/05/cocosmelk</id>
   <content type="html">&lt;p&gt;Gelezen op de kokosmelk: &gt;    &lt;strong&gt;Kokosmelk&lt;/strong&gt; wordt onder andere gebruikt bij de bereiding van curries, ijs, milkshakes, desserts cocktails en vele andere gerechten &lt;em&gt;waarin kokosmelk hoort&lt;/em&gt;  &lt;a href=&quot;http://flickr.webschuur.com//moblog/#05012010535.jpg&quot;&gt;&lt;img src=&quot;http://flickr.webschuur.com//data/moblog/web/05012010535.jpg&quot; title=&quot;05012010535&quot; alt=&quot;05012010535&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ideal Payment API</title>
   <link href="http://berk.es/2010/01/04/ideal-payment-api"/>
   <updated>2010-01-04T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/04/ideal-payment-api</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://nl.wikipedia.org/wiki/IDEAL&quot;&gt;iDeal&lt;/a&gt; is a Dutch, online payment system, widly adopted, but hard to implement. In Drupal there are several iDeal implementations for &lt;a href=&quot;http://drupal.org/project/uc_ideal&quot;&gt;übercart&lt;/a&gt;, but none are very solid and none are easy to implement. Moreover: the iDeal übercart implementations lack some error handling, which may not matter for smaller sites, but for large payment flows, this is far from ready. I therefore had the iDeal part extracted from übercart and made into a more general payment API. One that can potentially be used on übercart, e-commerce and your own implementation. But not just code. iDeal is not about the code, so much, but more about how to get it running, configured and how to get all the parameters right. Between the banks, and the account you have, technical differences make it extremely complex to Get Running with one base. This makes Documentation just as importants as code. Probably even more important for those not really into iDeal implentations. I have &lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api/&quot;&gt;released&lt;/a&gt; that API (&lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api/downloads&quot;&gt;Download&lt;/a&gt; &lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api/downloads/berkes/Drupal-iDeal-payment-api/tarball/6.x--0.1&quot;&gt;tgz&lt;/a&gt; | &lt;a href=&quot;http://github.com/berkes/Drupal-iDeal-payment-api/downloads/berkes/Drupal-iDeal-payment-api/zipball/6.x--0.1&quot;&gt;zip&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;And I would really like it when people start looking at it, and shooting at it. I would also greatly enjoy receiving your own iDeal code, if you have any. Then, on the next Drupal-meeting in Netherlands, I will host and organise an iDeal code-sprint, so that we can get the documentation, code and what more up to a first working point. Mostly to centralise the development, but also to inform new iDeal-users to the status in Drupal and the route to take.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google toont nu tweets</title>
   <link href="http://berk.es/2010/01/03/google-toont-nu-tweets"/>
   <updated>2010-01-03T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/03/google-toont-nu-tweets</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://flickr.webschuur.com//moblog/#screenshot_011.png&quot;&gt;&lt;img src=&quot;http://flickr.webschuur.com//data/moblog/web/screenshot_011.png&quot; title=&quot;screenshot_011&quot; alt=&quot;screenshot_011&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Typ een &lt;a href=&quot;http://www.google.com/search?ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;sourceid=navclient&amp;amp;gfns=1&amp;amp;q=berkes&quot;&gt;twitternaam&lt;/a&gt; in en zie de zoekresultaten in Google als kleine tekstbalonetjes verschijnen. Ik zie uit naar de eerste misbruikers hiervan.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter experiment: de hele maand Januari schrijf ik maximaal 2 tweets per dag</title>
   <link href="http://berk.es/2010/01/02/twitter-experiment-de-hele-maand-januari-schrijf-ik-maximaal-2-tweets-per-dag"/>
   <updated>2010-01-02T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/02/twitter-experiment-de-hele-maand-januari-schrijf-ik-maximaal-2-tweets-per-dag</id>
   <content type="html">&lt;p&gt;Ik ga de hele maand Januari maximaal 2 tweets per dag plaatsen. Ik wil hiermee de &lt;a href=&quot;http://nl.wikipedia.org/wiki/Signaal-ruisverhouding&quot;&gt;signaal-ruisverhouding&lt;/a&gt; in mijn twitterstroom verbeteren. Ofwel: meer kwaliteit, minder kwantiteit. Ik ben benieuwd of me dit veel followers gaat kosten. Of misschien juist wel opleveren. En ik ben benieuwd of ik op deze manier daardoor juist minder of meer mensen weet te bereiken.&lt;/p&gt;

&lt;p&gt;Het dwingt me ook om langer na te denken over een berichtje, iets wat eigenlijk juist helemaal niet &quot;twitterig&quot; is. Een ander voordeel, verwacht ik, is dat ik mijn blog weer meer ga gebruiken om de achtergrond en diepgang in die ene tweet te brengen. 140 karakters om de kern te vertellen; mijn blog om het uit te diepen.&lt;!--break--&gt;Ik kies voor 2 tweets per dag, om af te wisselen tussen Engels en Nederlands. En daarmee wil ik ook meteen eens zien waar voor mij de meeste luisteraars zitten: in Nederlands of in Engels.&lt;/p&gt;

&lt;p&gt;Verder laat ik mezelf wél toe om te reageren op twitteraars. Dus als iemand replied op een tweet van me, wil ik daarop kunnen reageren. Anders valt de conversatie dood en gebruik ik Twitter op een manier die me niet aanstaat: om te spuien. Twitter is voor mij vooral een conversatie, niet een monoloog. Dat wil ik zo houden. En dus tellen antwoorden (zogenaamde @replies) niet mee.&lt;/p&gt;

&lt;p&gt;Aan het einde van de maand wil ik kijken wat het me opleverde en ga ik dat uiteraard uitgebreid beschrijven.&lt;/p&gt;

&lt;p&gt;EDIT: foute tag in inleiding gefixed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Manage remote git modules in your gitted Drupal with submodules</title>
   <link href="http://berk.es/2010/01/02/manage-remote-git-modules-in-your-gitted-drupal-with-submodules"/>
   <updated>2010-01-02T00:00:00+01:00</updated>
   <id>http://berk.es/2010/01/02/manage-remote-git-modules-in-your-gitted-drupal-with-submodules</id>
   <content type="html">&lt;p&gt;This small howto describes the concept of adding Drupal modules to your project's git repository. For that, you can use the git command &lt;a href=&quot;http://book.git-scm.com/5_submodules.html&quot;&gt;git submodules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Off course you can simply copy the code into an existing repostory and commit that. But that eliminates the posibility to easily update modules once they are updated upstream (the author has fixed some bugs; you want these bugfixes too). And it will not show you the log for that module. Submodules fixes that.&lt;/p&gt;

&lt;p&gt;We have a Drupal-project already in Git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /to/your/drupal/project
git submodule add git://github.com/berkes/Drupal-iDeal-payment-api.git sites/all/modules/ideal\_payment\_api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pull in the repository Drupal-iDeal-payment-api and place it in sites/all/modules/ideal_payment_api.&lt;/p&gt;

&lt;p&gt;If you wish to commit changes to Drupal-iDeal-payment-api, the url should point to a repository where you have write access.
You can provide any url, also local paths. But in that case, when you push your project to a repository where others (teammembers) pull changes from, those others will not be able to access the submodule. Best is to include only submodules that are accessilbe to those who can access the main project (superproject).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)
#
#   new file:   .gitmodules
#   new file:   sites/all/modules/ideal\_payment\_api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have two commits ready to go: a new file .gitmodules and a directory with the new module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &quot;Add submodule ideal\_payment\_api.&quot;
$ git push origin master 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then commit it, and optionally push it to remote.&lt;/p&gt;

&lt;p&gt;Whenever you change code in the sites/all/modules/ideal_payment_api now, you will be able to commit these changes and push the changes to the repository &lt;em&gt;of the module&lt;/em&gt;.
Other changes made to the module itself, e.g. by the author, or in the project itsef, will &lt;em&gt;not be pulled in automatically&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whenever other users of the superproject, update, they will not get new code in the submodule, unless they specifically request new code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /clean/directory
$ git clone git@github.com:berkes/MPR\_my\_main\_project.git
# Initialized empty Git repository in ... done.
$ ls -ah MPR\_my\_main\_project/sites/all/modules/drupal\_ideal\_payment\_api/
# .  ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the directory for the submodule is there, but it is empty.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule status
# -836a5fc6a04f2297b945e7d0359b765dee208989 sites/all/modules/ideal\_payment\_api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The submodule status command also tells us the directory is empty.
So let us pull in the Drupal module. This is a two-step process: first we initialise, then we call update.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The module is now available and, fixated on the revision where we committed the submodule!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html&quot;&gt;official git-submodule documentation&lt;/a&gt; as well as the &lt;a href=&quot;http://progit.org/book/ch6-6.html&quot;&gt;pro-git book&lt;/a&gt; have in-depth reading on how to maintain your code from here. And describe some pithfalls. &lt;a href=&quot;http://gitcasts.com/posts/git-submodules&quot;&gt;Gitcast&lt;/a&gt; has a good screencast on this matter, if you want to sit back and watch a good explanation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Service Links: Nederlandse Versie</title>
   <link href="http://berk.es/2009/12/29/service-links-nederlandse-versie"/>
   <updated>2009-12-29T00:00:00+01:00</updated>
   <id>http://berk.es/2009/12/29/service-links-nederlandse-versie</id>
   <content type="html">&lt;p&gt;De &lt;a href=&quot;http://drupal.org/project/service_links&quot;&gt;Service Links&lt;/a&gt; module voor Drupal is dom opgezet. Het laat je namelijk niet toe, om zonder de originele module te hacken, eigen service-links toe te voegen. Service links zijn de bekende knopjes als &quot;voeg toe aan je del.icio.us bookmarks&quot; of &quot;plaats op twitter&quot;. In Nederland willen we bij de bekende Amerikaans/Engelse diensten, ook meestal ekudos, nujij, msn-reporter opgenomen hebben. Ik beheerde -net als ongeveer iedere Nederlanse Drupalshop- een anagepaste versie hiervan. En in het kader van &quot;kerstvakantieklusjes&quot; heb ik deze zojuist even in git gezet zodat ik de doorontwikkeling (en bugfixes) van de originele makkelijk kan bijhouden en op mijn fork kan toepassen. En zodat anderzijds jullie, Nederlandse Drupalgebruikers, deze module ook kunnen gaan gebruiken. Het staat tussen mijn &lt;a href=&quot;http://github.com/berkes/Unmaintained-Drupal-modules/&quot;&gt;unmaintained Drupal modules&lt;/a&gt; in het &lt;a href=&quot;http://github.com/berkes/Unmaintained-Drupal-modules/tree/master/service_links/&quot;&gt;mapje Servicelinks&lt;/a&gt;. Snel downloaden kan &lt;a href=&quot;http://github.com/berkes/Unmaintained-Drupal-modules/downloads&quot;&gt;vanaf de download-pagina&lt;/a&gt;. Ik zie uit naar jullie &lt;a href=&quot;http://help.github.com/forking/&quot;&gt;forks&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Prorail onderhoud en risicomanagement</title>
   <link href="http://berk.es/2009/12/22/prorail-onderhoud-en-risicomanagement"/>
   <updated>2009-12-22T00:00:00+01:00</updated>
   <id>http://berk.es/2009/12/22/prorail-onderhoud-en-risicomanagement</id>
   <content type="html">&lt;p&gt;Bij Prorail gaan &lt;a href=&quot;http://www.prorail.nl/Over%20ProRail/documenten/Documents/Jaarverslag%20ProRail%202008.pdf&quot;&gt;duizenden miljoenen (PDF)&lt;/a&gt; Euro per jaar erdoorheen. Een groot bedrijf dus. Nu heb ik tijdens mijn studie Operationele Technologie (het draaiende houden van technische systemen zoals een spoornet of een energiecentrale, in het kort) aardig wat risico-management, onderhoudsmanagement en aanverwante gehad. Genoeg om door de lulkoek die diverse &quot;woordvoerders&quot; van Prorail en NS ons de afgelopen dagen voorschotelden heen te prikken. Dat in Nederland een complex treinen-net ligt, daarover geen twijfel. Dus ook geen flauwe toespelingen naar treinen elders in Europa die &lt;a href=&quot;http://videovolt.blogspot.com/2009/12/noorse-treinen-rijden-wel-door-de.html&quot;&gt;wél rijden&lt;/a&gt;, dat zijn appels en peren. En die kun je volgens het spreekwoord niet vergelijken. En ook geen woord over de slechte naam die het OV hiermee zichzelf geeft, nét nu we in het kader van wat C02-reductie best wat meer mensen de trein in zouden moeten krijgen. Nee. Mij gaat het vooral om de kutsmoezen die ik voorbij hoorde komen. Prorail bleef allereerst erg onduidelijk waar het nu aan lag. Vandaag waren ze het over de smoes eens: Het ligt aan de wissels. Die vroren vast. Dat kan.&lt;/p&gt;

&lt;p&gt;Maar nemen we een artikel van &lt;a href=&quot;http://www.depers.nl/binnenland/206825/ProRail-weer-is-geen-issue-meer.html&quot;&gt;ruim anderhalf jaar geleden erbij&lt;/a&gt;.&gt;  Volgens de spoorbeheerder is de afgelopen jaren [vóór 2007 dus, BK] veel geïnvesteerd om de invloed van het weer tot een minimum te beperken. Zo is er een speciale gel ontwikkeld die het spoor ruwer maakt om het effect van de beruchte blaadjes op het spoor in de herfst tegen te gaan. Wissels worden verwarmd als het koud is, en als het warm is worden maatregelen genomen om spoorspatting, het uitzetten en vervormen van de rails, tegen te gaan.&lt;/p&gt;

&lt;p&gt;Dan komt de kern van wat ik eerder noemde al naar voren: risico management en onderhoudsmanagement. Daarin maak je kansberekeningen. Net zoals ik uitreken of de jaarlijkse premie het waard is om me te verzekeren tegen diefstal van mijn laptop. Het is goed mogelijk dat de kans dat zóveel sneeuw valt als in de afgelopen dagen, niet opweegt tegen de enorme investering om je voor te bereiden op zoveel sneeuw. Dat is een keuze. Als je het goed doet, een bewuste, overwogen, gedocumenteerde keuze.&lt;/p&gt;

&lt;p&gt;Bij onderhouds-management gaat dat precies zo. Hoe groot is de kans dat de harde schijf van de mailserver op je bedrijf crashed, afwegen tegen de kosten van ieder jaar de schijf vervangen. Als die afweging slecht is genomen, betaal je je krom aan harde schijven. Of ligt iedere zoveel dagen alles eruit en ben je alle informatie, orders, klanten enzovoort weer kwijt. Als je het goed doet, zorg je voor backups, bijvoorbeeld. Of weet iedereen dat &quot;de mailserver weer platgaat voor onderhoud&quot;. Dan weet iedereen waar zij of hij aan toe is. &quot;Volgende week kun je de hele donderdagmiddag niet bij je mail&quot; is stukken beter dan &quot;kunnen jullie misschien kijken of op je laptop, thuis of ergens op een CD-tje nog je mail hebt, we zijn alles kwijt&quot;. En zelfs dat is niet zo erg, als dat ooit een keuze was. Maar als hier nooit over is nagedacht, dan weet niemand waar hij of zij aan toe is. Was het een keuze van Prorail, dan kunnen ze daar gewoon eerlijk over zijn. &quot;Bij meer dan 10CM sneeuw gene treinen. Bij meer dan driehonderd eikenblaadjes ook niet. En als het meer dan 100mm regent tussen Appelscha en Zevenaar, daar ook geen treinen&quot;. Dan weet je als organisatie precies waar je aan toe bent. Je maakte keuzes. Misschien niet de slimste, maar je &lt;em&gt;weet&lt;/em&gt; het tenminste.&lt;/p&gt;

&lt;p&gt;Als dan veel sneeuw wordt aangekondigd, kun je dagen vantevoren persberichten rondsturen dat op donderdag 17 december nauwelijks treinen zullen gaan rijden. Naar verwachting. Wel zo fijn om te weten waar je aan toe bent.&lt;/p&gt;

&lt;p&gt;Prorail lijkt echter volledig verrast. Dat geeft aan dat ze óf hun risicomanagement helemaal niet op orde hebben, óf dat ze liegen over dat verrast zijn. In allebei de gevallen moet daar eens goed de bezem erdoorheen. Want liegen, stilhouden en daarmee vele duizenden reizigers in grote moeilijkheden brengen, is grove nalatigheid. Op zijn minst. En je risicomanagement of onderhoudsmanagement nog steeds niet op orde hebben, na vele jaren, is een grove schande voor een miljoenenbedrijf.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Een downloadverbod is technisch onhaalbaar en bij voorbaat al een mislukt, geldverslindende, ontvrichtende onderneming</title>
   <link href="http://berk.es/2009/12/21/een-downloadverbod-is-technisch-onhaalbaar-en-bij-voorbaat-al-een-mislukt-geldverslindende-ontvrichtende-onderneming"/>
   <updated>2009-12-21T00:00:00+01:00</updated>
   <id>http://berk.es/2009/12/21/een-downloadverbod-is-technisch-onhaalbaar-en-bij-voorbaat-al-een-mislukt-geldverslindende-ontvrichtende-onderneming</id>
   <content type="html">&lt;p&gt;Een downloadverbod in Nederland instellen om daarmee auteursrechten- en royalty-organisaties tegemoet te komen is technisch onhaalbaar. Zonder al te diep in te gaan op alle technische details, kan iedereen -dus ook de politici die hierover gaan beslissen- begrijpen dat het technisch onmogelijk is om downloads te verbieden. En dat een miljoenen-kostende infrastructuur hiervoor door iedereen zonder énige moeite is te omzeilen. Weggegooid geld, onzinnig geleuter en een gegarandeerd tegenvallend resultaat.&lt;!--break--&gt;### Transparantie en diversiteit
Muziek zit onder andere ín filmpjes, audi-bestanden (mp3tjes), of streams. Films zitten in DVD-kopiën, videobestanden (divx, mpeg enzovoort), flash-bestanden enzovoort. &quot;De muziek&quot; is dus niet aan te wijzen. Je kunt niet simpelweg alles dat de vorm heeft van muziek  tegenhouden. Daarvoor is het aanbod te divers. Een DVD-kopie bijvoorbeeld, komt in de vorm van een .iso, vaak. Dat is een formaat waarin ook linux-DVDs of andere legale DVDs worden verspreid. Maar het is ook niet erg moelijk om mp3 als een gewone webpagina te vermommen. De enige manier om zonder een enórme foutmarge video en muziek te vinden, is door ál het internetverkeer te bekijken en op &lt;em&gt;inhoud&lt;/em&gt; te analyseren. Dat kan deels automatisch, maar eerder moet je dit voorstellen als enorme hallen met rijen mensen die naar schermen zitten te staren en bekijken, beluisteren en catagoriseren wat alle Nederlanders op dat moment doen. Het is dus onmogelijk om &quot;muziek&quot; of &quot;film&quot; uit al het andere internetverkeer te filteren en daarop verboden, censuur, of belastingen te leggen of te heffen. Bovendien is het doodeenvoudig om dit nog makkelijker te verbergen met beveiligde verbindingen.### Inhoud van verkeer verbergen
Als we internetbankieren (of gewoon inloggen op een site met privégegevens) doen we dat over https. Beveiligde HTTP. De idee van die S in https, is dat tussen jou computer en die van de uiteindelijke ontvanger (de bank) niemand de inhoud kan lezen. Die is versleuteld en dus voor alle &quot;luisteraars&quot; tussendoor slechts en heleboel willekeurige ééntjes en nulletjes. Het enige dat de personen, computers (servers van bijvoorbeeld je provider, ziggo) kunnen zien is dát jij aan het internetbankieren bent, bij de Rabobank (of andere bank). Tussendoor is aléén te zien dat een hele zooi willekeurige eentjes en nulletjes van jou computer naar die van de bank gaat en terug. In het geval van downloads, is dus door de overheden, of Brein, wél te zien dat jij een verbinding hebt met bijvoorbeeld &quot;https://thepiratebay.org/search/Avatar&quot; maar niet wát uiteindelijk van die pagina terugkomt. En ook niet wat in de (zoek, plaats-nieuwe-film, of comment) formulieren als inhoud zit. Brein is niet stom, dus als jij de URL &quot;https://piratebay.com/search/Avatar&quot; bezoekt, is de kans groot dat jij die film zoekt en wilt downloaden. Maar https gaat verder. Want wat ik download, bijvoorbeeld van &quot;http://legalmusic.com&quot; is niet te zien. Of nog moeilijker, met peer2peer-programma's zoals torrent, kan iemand alléén zien dát ik een verbinding met iemand in de buurstad heb, en dat we &quot;iets&quot; uitwisselen. Maar nooit wát. Het is dus onmogelijk om dataverkeer te filteren op muziek, video of andere /inhoud/. Hoogstends kan verboden worden om met bepaalde sites te verbinden. Of om bepaalde /soorten/ verbindingen te maken. Kortom, de ene manier om downloaden van muziek en film te verbieden is om bepaalde protocollen (bijvoobeeld peer2peer) helemaal te verbieden, maar dat heeft funeste gevolgen voor de economie, omdat heel veel kritieke systemen draaien op (afgeleiden van) deze protocollen. De andere manier is om heel veel sites te blokkeren. Wat ze in China doen, zeg maar.### Proxies: gewoon vanuit Duitsland (of de VS) downloaden
Een proxy is, heel eenvoudig gesteld, een computer dis tussen mij en het eindpunt zit. Als ik een verbinding maak met http://example.com zitten daar allerhande servers en computers tussen. Dat zijn in zekere zin allemaal proxies. Het internet draait bij de gratie van proxies; die zijn het belangrijkste ingrediënt van het Internet.&lt;/p&gt;

&lt;p&gt;Maar proxies kunnen ook heel makkelijk ingezet worden om verkeer om te leiden. Of te verbergen. Het eenvoudigste voorbeeld is een grote proxy die, laten we zeggen, in Keulen staat. Vanuit mijn computer in Nijmegen, verbind ik -over een beveiligde verbinding, kom ik later op terug-  met die proxy in Keulen. Gewoon op mijn ADSL-verbinding van XS4all. En dan bezoek ik http://thepiratebay.org. Mijn verbinding ziet er dan als volgt uit:  &gt; Laptop » Modem » XS4all » Keulen » The Pirate BayMaar de nederlandse overheid, die mij bewaakt vanuit de servers van XS4all (of servers net ervoor of net erachter), ziet dan alleen &gt; Modem » XS4all » KeulenDe enige die weet hoe het verkeer ná de proxy loopt, is de proxy zelf. En aangezien de verbinding beveiligd is, kan ook niemand aan de aard van de inhoud achterhalen waar ik surf. Proxies zijn er in vele soorten en maten. Van eenvoudig te installeren software, via (simpele) hardware, tot enorme enterprise systemen. &lt;a href=&quot;http://www.torproject.org/&quot;&gt;Tor&lt;/a&gt; bijvoorbeeld; gemaakt om alle verkeer te anonimiseren. Maar de meeste routers ne modems die je bij Ziggo enzo krijgt, kunnen heel makkelijk ingesteld worden dat ze via een proxy internet aanbieden. En dan moet de Nederlandse overheid niet alleen de sites (en computers) die muziek of film aanbieden afsluiten. Ze moeten ook nog álle open en anonieme proxies in de hele wereld blokkeren. Miljoenen sites verbieden, waar ook nog eens een énorme doorloop in zit, is technisch onhaalbaar. De Chinezen lukt het niet en die hebben hier heel veel voor over, dus waarom zou dat onze overheid wél lukken?Een downloadverbod? Wassen neus. Onhaalbaar. Politici die dit als serieuze optie opperen, moet je per direct hun portefeulle 'internet' afpakken, want ze zijn met open ogen in een mooi verkooppraatje van een Brein-gladjakker, of spionage-systemen-verkoper getrapt. Men staat op het punt enorm dure en ingrijpende beslissingen te nemen, maar die het downloaden simpelweg niet kúnnen verbieden, en zeer waarschijnlijn niet zúllen verminderen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Du bist Terrorist!</title>
   <link href="http://berk.es/2009/12/21/du-bist-terrorist"/>
   <updated>2009-12-21T00:00:00+01:00</updated>
   <id>http://berk.es/2009/12/21/du-bist-terrorist</id>
   <content type="html">&lt;p&gt;Via &lt;a href=&quot;http://www.zeepvrij.nl/2009/12/14/du-bist-ein-terrorist&quot;&gt;Zeepvrij&lt;/a&gt;.&lt;object width=&quot;400&quot; height=&quot;225&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=4631958&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=4631958&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;400&quot; height=&quot;225&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;a href=&quot;http://vimeo.com/4631958&quot;&gt;Du bist Terrorist&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/user221974&quot;&gt;alexanderlehmann&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.
meer op &lt;a href=&quot;http://www.dubistterrorist.de&quot;&gt;dubistterrorist.de&lt;/a&gt; (ik las eerst Dub Is Terrorist.de, maar dat terzijde)&lt;!--break--&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
